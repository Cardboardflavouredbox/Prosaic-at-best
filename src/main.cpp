#include <SFML/Graphics.hpp>
#include <SFML/Network.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <random>
#include <deque>
#include <string.h>
#include <math.h>


std::deque<char>dirkeys,ukey,ikey,okey,kkey,dirkeys2,ukey2,ikey2,okey2,kkey2,cpudir,cpuu,cpui,cpuo,cpuk;

std::deque<unsigned char> soundfxlist,hitsfxlist,voicesfxlist;
std::deque<float> sfxx,hsfxx,vsfxx;
std::random_device rd;
std::mt19937 gen(rd());

short combo=0,roundframecount=0;
static unsigned char animlib[16][128][32][2]=
            {
                {
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{1,1},
                    {0,2},{1,2}
                    },//idle (0)
                    {
                    {3,3},{1,3},

                    {0,0},{1,0},{255,255},
                    {0,1},{2,0},{3,0},
                    {0,2},{1,2},{255,255}
                    },//stand u1 (1)
                    {
                    {3,3},{1,3},

                    {0,0},{1,0},{255,255},
                    {0,1},{2,1},{3,1},
                    {0,2},{1,2},{255,255}
                    },//stand u2 (2)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{4,0},
                    {0,2},{4,1}
                    },//stand i1 (3)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{5,0},
                    {0,2},{5,1}
                    },//stand i2 (4)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{6,0},
                    {0,2},{6,1}
                    },//stand i3 (5)
                    {
                    {3,3},{1,3},

                    {0,0},{1,0},{255,255},
                    {0,1},{7,0},{8,0},
                    {0,2},{7,1},{8,1}
                    },//stand i4 (6)
                    {
                    {3,3},{1,3},

                    {0,0},{1,0},{255,255},
                    {0,1},{9,0},{10,0},
                    {0,2},{9,1},{10,1}
                    },//stand i5 (7)
                    {
                    {2,3},{1,3},

                    {0,3},{1,3},
                    {0,4},{1,4},
                    {0,5},{1,5}
                    },//crouch (8)
                    {
                    {2,3},{1,3},

                    {4,9},{5,9},
                    {4,10},{5,10},
                    {4,11},{5,11}
                    },//hit (9)
                    {
                    {3,3},{1,3},

                    {0,3},{1,3},{255,255},
                    {0,4},{1,4},{255,255},
                    {0,5},{0,7},{1,7}
                    },//crouch u1 (10)
                    {
                    {3,3},{1,3},

                    {0,3},{1,3},{255,255},
                    {0,4},{1,4},{255,255},
                    {0,5},{0,6},{1,6}
                    },//crouch u2 (11)
                    {
                    {2,3},{1,3},

                    {0,3},{2,3},
                    {0,4},{2,4},
                    {0,5},{2,5}
                    },//crouch i1 (12)
                    {
                    {2,3},{1,3},

                    {0,3},{3,3},
                    {0,4},{3,4},
                    {0,5},{3,5}
                    },//crouch i2 (13)
                    {
                    {2,3},{1,3},

                    {0,3},{4,3},
                    {0,4},{4,4},
                    {0,5},{4,5}
                    },//crouch i3 (14)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{1,1},
                    {5,4},{6,4}
                    },//walk left1 (15)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{1,1},
                    {7,4},{8,4}
                    },//walk left2 (16)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{1,1},
                    {5,5},{6,5}
                    },//walk right1 (17)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,1},{1,1},
                    {7,5},{8,5}
                    },//walk right2 (18)
                    {
                    {4,1},{2,1},

                    {2,8},{3,8},{4,8},{255,255}
                    },//knockdown (19)
                    {
                    {2,3},{1,3},

                    {5,2},{6,2},
                    {5,3},{6,3},
                    {0,2},{1,2}
                    },//specialA1 (20)
                    {
                    {2,3},{1,3},

                    {7,2},{8,2},
                    {7,3},{8,3},
                    {0,2},{1,2}
                    },//specialA2 (21)
                    {
                    {2,3},{1,3},

                    {9,2},{10,2},
                    {9,3},{10,3},
                    {0,2},{1,2}
                    },//specialA3 (22)
                    {
                    {2,3},{1,3},

                    {11,2},{12,2},
                    {11,3},{12,3},
                    {0,2},{1,2}
                    },//specialA4 (23)
                    {
                    {3,3},{1,3},

                    {9,4},{10,4},{255,255},
                    {9,5},{10,5},{11,5},
                    {0,2},{1,2},{255,255}
                    },//specialA5 (24)
                    {
                    {3,3},{1,3},

                    {12,4},{13,4},{255,255},
                    {12,5},{13,5},{14,5},
                    {0,2},{1,2},{255,255}
                    },//specialA6 (25)
                    {
                    {2,3},{1,3},

                    {5,6},{6,6},
                    {5,7},{6,7},
                    {5,8},{6,8}
                    },//stand o1 (26)
                    {

                    {3,3},{2,3},

                    {255,255},{8,6},{9,6},
                    {7,7},{8,7},{9,7},
                    {255,255},{8,8},{9,8},
                    },//stand o2 (27)
                    {
                    {4,3},{2,3},

                    {255,255},{11,6},{255,255},{255,255},
                    {10,7},{11,7},{12,7},{12,6},
                    {10,8},{11,8},{12,8},{255,255}
                    },//stand o3 (28)
                    {
                    {3,3},{2,3},

                    {255,255},{6,9},{7,9},
                    {7,6},{6,10},{7,10},
                    {255,255},{6,11},{7,11}
                    },//stand o4 (29)
                    {
                    {3,3},{1,3},

                    {8,9},{9,9},{255,255},
                    {8,10},{9,10},{10,6},
                    {8,11},{9,11},{255,255}
                    },//stand o5 (30)
                    {
                    {4,3},{1,3},

                    {255,255},{11,9},{12,9},{255,255},
                    {10,10},{11,10},{12,10},{10,9},
                    {10,11},{11,11},{12,11},{255,255}
                    },//stand o6 (31)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {2,2},{3,2},
                    {0,2},{1,2}
                    },//stand block (32)
                    {
                    {2,3},{1,3},

                    {0,3},{1,3},
                    {2,6},{3,6},
                    {2,7},{3,7}
                    },//crouch block (33)
                    {
                    {2,3},{1,3},

                    {13,0},{14,0},
                    {11,0},{12,0},
                    {11,1},{12,1}
                    },//specialB1 (34)
                    {
                    {2,3},{1,3},

                    {13,1},{14,1},
                    {13,2},{14,2},
                    {13,3},{14,3}
                    },//specialB2 (35)
                    {
                    {2,4},{1,4},

                    {255,255},{17,0},
                    {15,0},{16,0},
                    {15,1},{16,1},
                    {15,2},{16,2}
                    },//specialB3 (36)
                    {
                    {2,4},{1,4},

                    {255,255},{17,1},
                    {17,5},{17,2},
                    {17,6},{17,3},
                    {17,7},{17,4}
                    },//specialB4 (37)
                    {
                    {2,3},{1,3},

                    {0,3},{1,3},
                    {0,4},{13,6},
                    {0,5},{13,7}
                    },//crouch i1 (38)
                    {
                    {2,3},{1,3},

                    {15,3},{16,3},
                    {15,4},{16,4},
                    {15,5},{16,5}
                    },//crouch i2 (39)
                    {
                    {3,3},{1,3},

                    {0,3},{1,3},{255,255},
                    {14,6},{15,6},{16,6},
                    {14,7},{15,7},{255,255}
                    },//crouch i3 (40)
                    {
                    {3,3},{1,3},

                    {15,8},{16,8},{255,255},
                    {15,9},{16,9},{16,7},
                    {13,8},{14,8},{255,255}
                    },//crouch i4 (41)
                    {
                    {3,3},{1,3},

                    {17,10},{17,9},{255,255},
                    {15,10},{16,10},{17,11},
                    {15,11},{16,11},{255,255}
                    },//crouch i5 (42)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,10},{1,10},
                    {0,11},{1,11}
                    },//jumprise(43)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,8},{1,8},
                    {0,9},{1,9}
                    },//jumpfall(44)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,10},{1,10},
                    {0,11},{2,9}
                    },//jump u1(45)
                    {
                    {2,3},{1,3},

                    {0,0},{1,0},
                    {0,10},{1,10},
                    {0,11},{3,9}
                    },//jump u2(46)
                    {
                    {3,3},{2,3},

                    {255,255},{0,0},{1,0},
                    {2,10},{0,12},{1,12},
                    {255,255},{0,2},{1,2}
                    },//specialC1 (47)
                    {
                    {3,3},{2,3},

                    {255,255},{0,0},{1,0},
                    {2,11},{0,13},{1,13},
                    {255,255},{0,2},{1,2}
                    },//specialC2 (48)
                    {
                    {3,3},{2,3},

                    {255,255},{0,0},{1,0},
                    {3,10},{2,12},{3,12},
                    {255,255},{0,2},{1,2}
                    },//specialC3 (49)
                    {
                    {4,3},{2,3},
                    {255,255},{0,0},{1,0},{255,255},
                    {3,11},{2,13},{3,13},{4,13},
                    {255,255},{0,2},{1,2},{255,255}
                    },//specialC4 (50)
                    {
                    {3,3},{1,3},

                    {0,0},{1,0},{255,255},
                    {4,12},{5,12},{6,12},
                    {0,2},{1,2},{255,255}
                    },//specialC5 (51)
                    {
                    {3,3},{1,3},

                    {0,0},{1,0},{255,255},
                    {5,13},{6,13},{7,13},
                    {0,2},{1,2},{255,255}
                    },//specialC6 (52)
                    {
                    {2,3},{1,3},

                    {13,9},{14,9},
                    {13,10},{14,10},
                    {13,11},{14,11}
                    },//crouch hit(53)
                    {
                    {1,2},{0,2},

                    {7,12},
                    {255,255}
                    },//projectile1(54)
                    {
                    {1,2},{0,2},

                    {8,12},
                    {255,255}
                    },//projectile2(55)
                    {
                    {2,3},{1,3},

                    {8,13},{9,13},
                    {10,12},{11,12},
                    {10,13},{11,13}
                    },//hit2 (56)
                    {
                    {2,3},{1,3},

                    {12,12},{12,13},
                    {13,12},{14,12},
                    {13,13},{14,13}
                    },//crouch hit2(57)
                    {
                    {1,3},{0,3},

                    {15,12},
                    {15,13},
                    {255,255}
                    },//projectile end1(58)
                    {
                    {1,3},{0,3},

                    {16,12},
                    {16,13},
                    {255,255}
                    },//projectile end2(59)
                    {
                    {1,3},{0,3},

                    {17,12},
                    {17,13},
                    {255,255}
                    }//projectile end3(60)
                   },//char 0
                   {255,255},//char 1
                   {
                    {
                    {2,4},{1,4},

                    {0,0},{1,0},
                    {0,1},{1,1},
                    {0,2},{1,2},
                    {0,3},{1,3}
                    },//idle (0)
                    {
                    {3,3},{1,3},

                    {10,10},{11,10},{255,255},
                    {10,11},{11,11},{12,11},
                    {10,12},{11,12},{12,12}
                    },//crouch (1)
                    {
                    {2,4},{1,4},

                    {0,0},{1,0},
                    {0,4},{1,4},
                    {0,5},{1,5},
                    {0,3},{1,3}
                    },//stand light1 (2)
                    {
                    {3,4},{1,4},

                    {0,0},{1,0},{255,255},
                    {2,4},{3,4},{10,7},
                    {2,5},{10,8},{255,255},
                    {0,3},{1,3},{255,255}
                    },//stand light2 (3)
                    {
                    {4,3},{1,3},

                    {10,10},{11,10},{255,255},{255,255},
                    {10,11},{15,8},{16,8},{17,8},
                    {10,12},{15,9},{16,9},{255,255}
                    },//crouch light1 (4)
                    {
                    {4,3},{1,3},

                    {10,10},{11,10},{255,255},{255,255},
                    {10,11},{13,10},{14,10},{14,12},
                    {10,12},{13,11},{14,11},{255,255}
                    },//crouch light2 (5)
                    {
                    {2,4},{1,4},

                    {2,0},{3,0},
                    {2,1},{3,1},
                    {2,2},{3,2},
                    {2,3},{3,3}
                    },//walk1 (6)
                    {
                    {2,4},{1,4},

                    {4,0},{5,0},
                    {4,1},{5,1},
                    {4,2},{5,2},
                    {4,3},{5,3}
                    },//walk2 (7)
                    {
                    {2,4},{1,4},

                    {6,0},{7,0},
                    {6,1},{7,1},
                    {6,2},{7,2},
                    {6,3},{7,3}
                    },//walk3 (8)
                    {
                    {2,4},{1,4},

                    {8,0},{9,0},
                    {8,1},{9,1},
                    {8,2},{9,2},
                    {8,3},{9,3}
                    },//walk4 (9)
                    {
                    {2,4},{1,4},

                    {10,0},{11,0},
                    {10,1},{11,1},
                    {10,2},{11,2},
                    {10,3},{11,3}
                    },//walk5 (10)
                    {
                    {2,4},{1,4},

                    {12,0},{13,0},
                    {12,1},{13,1},
                    {12,2},{13,2},
                    {12,3},{13,3}
                    },//walk6 (11)
                    {
                    {2,4},{1,4},

                    {14,0},{15,0},
                    {14,1},{15,1},
                    {14,2},{15,2},
                    {14,3},{15,3}
                    },//walk7 (12)
                    {
                    {2,4},{1,4},

                    {16,0},{17,0},
                    {16,1},{17,1},
                    {16,2},{17,2},
                    {16,3},{17,3}
                    },//walk8 (13)
                    {
                    {2,4},{1,4},

                    {18,0},{19,0},
                    {18,1},{19,1},
                    {18,2},{19,2},
                    {18,3},{19,3}
                    },//walk9 (14)
                    {
                    {3,4},{2,4},

                    {255,255},{0,6},{1,6},
                    {3,5},{0,7},{1,7},
                    {255,255},{0,8},{1,8},
                    {255,255},{0,9},{1,9}
                    },//hurt1 (15)
                    {
                    {2,4},{1,4},

                    {2,6},{3,6},
                    {2,7},{3,7},
                    {2,8},{3,8},
                    {2,9},{3,9}
                    },//hurt2 (16)
                    {
                    {2,4},{1,4},

                    {6,8},{7,8},
                    {6,9},{7,9},
                    {6,10},{7,10},
                    {6,11},{7,11}
                    },//block1 (17)
                    {
                    {2,4},{1,4},

                    {8,8},{9,8},
                    {8,9},{9,9},
                    {8,10},{9,10},
                    {8,11},{9,11}
                    },//block2 (18)
                    {
                    {2,4},{1,4},

                    {4,4},{5,4},
                    {4,5},{5,5},
                    {4,6},{5,6},
                    {4,7},{5,7}
                    },//stand medium1 (19)
                    {
                    {4,4},{1,4},

                    {6,4},{7,4},{255,255},{255,255},
                    {6,5},{7,5},{255,255},{255,255},
                    {6,6},{7,6},{8,6},{9,6},
                    {6,7},{7,7},{8,7},{9,7}
                    },//stand medium2 (20)
                    {
                    {4,4},{1,4},

                    {8,4},{9,4},{255,255},{255,255},
                    {8,5},{9,5},{10,6},{255,255},
                    {10,4},{11,4},{12,4},{13,4},
                    {10,5},{11,5},{12,5},{13,5}
                    },//stand medium3 (21)
                    {
                    {3,3},{1,3},

                    {7,12},{8,12},{9,12},
                    {7,13},{8,13},{9,13},
                    {7,14},{8,14},{9,14}
                    },//crouch heavy1 (22)
                    {
                    {4,3},{1,3},

                    {7,12},{8,12},{9,12},{255,255},
                    {7,13},{10,13},{11,13},{255,255},
                    {7,14},{10,14},{11,14},{12,14}
                    },//crouch heavy2 (23)
                    {
                    {4,3},{1,3},

                    {7,12},{8,12},{9,12},{255,255},
                    {7,13},{13,13},{14,13},{255,255},
                    {7,14},{13,14},{14,14},{13,12}
                    },//crouch heavy3 (24)
                    {
                    {3,4},{2,4},

                    {0,12},{1,12},{1,0},
                    {0,13},{1,13},{1,1},
                    {255,255},{1,14},{1,2},
                    {255,255},{0,3},{1,3}
                    },//gimmick1 (25)
                    {
                    {3,4},{2,4},

                    {0,12},{0,0},{1,0},
                    {0,15},{1,15},{1,1},
                    {255,255},{1,14},{1,2},
                    {255,255},{0,3},{1,3}
                    },//gimmick2 (26)
                    {
                    {3,4},{2,4},

                    {13,6},{14,4},{15,4},
                    {13,7},{14,5},{15,5},
                    {255,255},{14,6},{15,6},
                    {255,255},{14,7},{15,7}
                    },//specialA1 (27)
                    {
                    {2,4},{1,4},

                    {16,4},{17,4},
                    {16,5},{17,5},
                    {16,6},{17,6},
                    {16,7},{17,7}
                    },//specialA2 (28)
                    {
                    {2,4},{1,4},

                    {18,4},{19,4},
                    {18,5},{19,5},
                    {18,6},{19,6},
                    {18,7},{19,7}
                    },//specialA3 (29)
                    {
                    {3,4},{1,4},

                    {20,4},{21,4},{255,255},
                    {20,5},{21,5},{20,1},
                    {20,6},{21,6},{20,2},
                    {20,7},{21,7},{20,3}
                    },//specialA4 (30)
                    {
                    {3,4},{1,4},

                    {22,4},{23,4},{255,255},
                    {22,5},{23,5},{21,1},
                    {22,6},{23,6},{21,2},
                    {22,7},{23,7},{21,3}
                    },//specialA5 (31)
                    {
                    {3,4},{1,4},

                    {18,8},{19,8},{255,255},
                    {18,9},{19,9},{22,1},
                    {18,10},{19,10},{22,2},
                    {18,11},{19,11},{22,3}
                    },//specialA6 (32)
                    {
                    {4,4},{1,4},

                    {20,8},{21,8},{255,255},{255,255},
                    {20,9},{21,9},{23,1},{23,0},
                    {20,10},{21,10},{23,2},{255,255},
                    {20,11},{21,11},{23,3},{255,255}
                    },//specialA7 (33)
                    {
                    {4,4},{1,4},

                    {255,255},{22,8},{23,8},{255,255},
                    {255,255},{22,9},{23,9},{23,12},
                    {255,255},{22,10},{23,10},{255,255},
                    {20,0},{21,0},{22,0},{255,255}
                    },//specialA8 (34)
                    {
                    {4,4},{1,4},

                    {255,255},{22,8},{23,8},{255,255},
                    {255,255},{22,9},{22,11},{23,11},
                    {255,255},{21,12},{22,12},{255,255},
                    {20,0},{21,0},{22,0},{255,255}
                    },//specialA9 (35)
                    {
                    {2,4},{1,4},

                    {15,10},{16,10},
                    {15,11},{16,11},
                    {15,12},{16,12},
                    {15,13},{16,13}
                    },//specialA10 (36)
                    {
                    {2,4},{1,4},

                    {17,9},{17,13},
                    {17,10},{17,14},
                    {17,11},{17,15},
                    {17,12},{17,16}
                    },//specialA11 (37)
                    {
                    {2,4},{1,4},

                    {15,14},{16,14},
                    {15,15},{16,15},
                    {15,16},{16,16},
                    {15,17},{16,17}
                    },//specialA12 (38)
                    {
                    {3,4},{1,4},

                    {255,255},{19,12},{255,255},
                    {18,13},{19,13},{20,13},
                    {18,14},{19,14},{20,14},
                    {18,15},{19,15},{20,15}
                    },//specialA13 (39)
                    {
                    {3,4},{1,4},

                    {21,14},{22,14},{255,255},
                    {21,15},{22,15},{23,15},
                    {21,16},{22,16},{23,16},
                    {21,17},{22,17},{23,17}
                    },//specialA14 (40)
                    {
                    {2,4},{1,4},

                    {24,14},{25,14},
                    {24,15},{25,15},
                    {24,16},{25,16},
                    {24,17},{25,17}
                    },//specialA15 (41)
                    {
                    {1,3},{0,3},

                    {22,13},
                    {255,255},
                    {255,255}
                    },//projectileA1 (42)
                    {
                    {1,3},{0,3},

                    {23,13},
                    {255,255},
                    {255,255}
                    },//projectileA2 (43)
                    {
                    {2,4},{1,4},

                    {4,10},{5,10},
                    {4,11},{5,11},
                    {4,12},{5,12},
                    {4,13},{6,12}
                    },//jumprise (44)
                    {
                    {3,5},{2,5},

                    {255,255},{5,13},{6,13},
                    {4,14},{5,14},{6,14},
                    {4,15},{5,15},{6,15},
                    {255,255},{5,16},{6,16},
                    {255,255},{5,17},{255,255}
                    },//jumpfall1 (45)
                    {
                    {4,5},{2,5},

                    {255,255},{5,13},{6,13},{255,255},
                    {4,14},{5,14},{6,14},{255,255},
                    {7,15},{8,15},{9,15},{10,15},
                    {255,255},{5,16},{6,16},{255,255},
                    {255,255},{5,17},{255,255},{255,255}
                    },//jumpfall2 (46)
                    {
                    {3,4},{2,4},

                    {24,0},{25,0},{255,255},
                    {24,1},{25,1},{24,3},
                    {24,2},{25,2},{255,255},
                    {255,255},{25,3},{255,255}
                    },//backdash1 (47)
                    {
                    {3,4},{2,4},

                    {24,0},{25,0},{255,255},
                    {24,1},{24,4},{25,4},
                    {24,2},{25,2},{255,255},
                    {255,255},{25,3},{255,255}
                    },//backdash2 (48)
                    {
                    {2,4},{2,4},

                    {24,0},{25,0},
                    {24,1},{24,5},
                    {24,2},{25,2},
                    {255,255},{25,3}
                    },//backdash3 (49)
                    {
                    {2,4},{2,4},

                    {24,0},{25,0},
                    {24,1},{25,5},
                    {24,2},{25,6},
                    {255,255},{25,3}
                    },//backdash4 (50)
                    {
                    {3,4},{2,4},

                    {24,7},{25,7},{255,255},
                    {24,8},{25,8},{24,10},
                    {24,9},{25,9},{24,11},
                    {255,255},{25,10},{24,12}
                    },//backdash5 (51)
                    {
                    {4,4},{1,4},

                    {11,6},{12,6},{255,255},{255,255},
                    {11,7},{12,7},{255,255},{255,255},
                    {11,8},{12,8},{13,8},{14,8},
                    {11,9},{12,9},{13,9},{14,9}
                    },//stand medium4 (52)
                    {
                    {2,4},{1,4},

                    {0,0},{1,0},
                    {7,16},{8,16},
                    {7,17},{1,2},
                    {0,3},{1,3}
                    },//specialB1 (53)
                    {
                    {2,4},{1,4},

                    {2,12},{3,12},
                    {2,13},{3,13},
                    {2,14},{3,14},
                    {2,15},{3,15}
                    },//specialB2 (54)
                    {
                    {3,4},{1,4},

                    {0,16},{1,16},{255,255},
                    {0,17},{1,17},{2,17},
                    {3,16},{4,16},{255,255},
                    {3,17},{4,17},{255,255}
                    },//specialB3 (55)
                    {
                    {3,4},{2,4},

                    {255,255},{0,0},{1,0},
                    {255,255},{9,16},{1,1},
                    {8,17},{9,17},{1,2},
                    {255,255},{0,3},{1,3}
                    },//specialB4 (56)
                    {
                    {2,4},{1,4},

                    {4,8},{5,8},
                    {4,9},{5,9},
                    {0,10},{1,10},
                    {0,11},{1,11}
                    },//hurt3 (57)
                    {
                    {3,4},{1,4},

                    {255,255},{255,255},{14,15},
                    {10,10},{12,15},{13,15},
                    {10,11},{12,16},{13,16},
                    {10,12},{12,17},{12,12}
                    },//crouch medium1 (58)
                    {
                    {3,4},{1,4},

                    {255,255},{255,255},{10,16},
                    {10,10},{11,15},{10,17},
                    {10,11},{11,16},{255,255},
                    {10,12},{11,17},{12,12}
                    },//crouch medium2 (59)
                    {
                    {2,4},{1,4},

                    {0,18},{1,18},
                    {0,19},{1,19},
                    {0,20},{1,20},
                    {0,21},{1,21}
                    },//stand heavy1 (60)
                    {
                    {2,4},{1,4},

                    {2,18},{3,18},
                    {2,19},{3,19},
                    {2,20},{3,20},
                    {2,21},{3,21}
                    },//stand heavy2 (61)
                    {
                    {2,4},{1,4},

                    {4,18},{5,18},
                    {4,19},{5,19},
                    {4,20},{5,20},
                    {4,21},{5,21}
                    },//stand heavy3 (62)
                    {
                    {4,4},{1,4},

                    {6,18},{7,18},{255,255},{255,255},
                    {6,19},{7,19},{8,18},{9,18},
                    {6,20},{7,20},{8,19},{9,19},
                    {6,21},{7,21},{255,255},{255,255}
                    },//stand heavy4 (63)
                    {
                    {4,4},{1,4},

                    {10,18},{11,18},{255,255},{255,255},
                    {10,19},{11,19},{8,20},{9,20},
                    {10,20},{11,20},{8,21},{9,21},
                    {10,21},{11,21},{255,255},{255,255}
                    },//stand heavy5 (64)
                    {
                    {3,4},{1,4},

                    {12,18},{13,18},{255,255},
                    {12,19},{13,19},{14,16},
                    {12,20},{13,20},{14,17},
                    {12,21},{13,21},{255,255}
                    },//stand heavy6 (65)
                    {
                    {3,4},{1,4},

                    {14,18},{15,18},{255,255},
                    {14,19},{15,19},{255,255},
                    {14,20},{15,20},{17,17},
                    {14,21},{15,21},{255,255}
                    },//stand heavy7 (66)
                    {
                    {2,4},{1,4},

                    {16,18},{17,18},
                    {16,19},{17,19},
                    {16,20},{17,20},
                    {16,21},{17,21}
                    },//stand heavy8 (67)
                    {
                    {2,4},{1,4},

                    {18,16},{19,16},
                    {18,17},{19,17},
                    {18,18},{19,18},
                    {18,19},{19,19}
                    },//stand heavy9 (68)
                    {
                    {2,4},{1,4},

                    {18,20},{19,20},
                    {18,21},{19,21},
                    {20,18},{21,18},
                    {20,19},{21,19}
                    },//stand heavy10 (69)
                    {
                    {2,4},{1,4},

                    {20,20},{21,20},
                    {20,21},{21,21},
                    {22,20},{23,20},
                    {22,21},{23,21}
                    },//stand heavy11 (70)
                    {
                    {2,4},{1,4},

                    {0,0},{1,0},
                    {2,10},{2,11},
                    {0,2},{1,2},
                    {0,3},{1,3}
                    },//idle2 (71)
                    {
                    {2,4},{1,4},

                    {24,19},{25,19},
                    {24,20},{25,20},
                    {24,21},{25,21},
                    {0,3},{1,3}
                    },//idle3 (72)
                    {
                    {3,4},{1,4},

                    {0,0},{1,0},{255,255},
                    {22,18},{23,18},{24,18},
                    {22,19},{23,19},{255,255},
                    {0,3},{1,3},{255,255}
                    },//stand light3 (73)
                    {
                    {5,2},{2,2},

                    {255,255},{28,1},{29,1},{255,255},{255,255},
                    {26,4},{27,4},{28,4},{29,4},{29,0}
                    },//knockdown (74)
                    {
                    {3,4},{1,4},

                    {28,5},{29,5},{255,255},
                    {28,6},{29,6},{29,3},
                    {28,7},{29,7},{255,255},
                    {28,8},{29,8},{255,255}
                    },//jump light1(75)
                    {
                    {4,4},{2,4},

                    {255,255},{24,13},{25,13},{255,255},
                    {25,11},{26,11},{27,11},{27,13},
                    {25,12},{26,12},{27,12},{255,255},
                    {255,255},{26,13},{255,255},{255,255}
                    },//jump light2(76)
                    {
                    {3,4},{2,4},

                    {255,255},{0,0},{1,0},
                    {3,10},{3,11},{1,1},
                    {255,255},{1,14},{1,2},
                    {255,255},{0,3},{1,3}
                    },//gimmick3 (77)
                    {
                    {2,4},{1,4},

                    {26,14},{27,14},
                    {26,15},{27,15},
                    {26,16},{27,16},
                    {26,17},{27,17}
                    },//specialC1 (78)
                    {
                    {3,4},{1,4},

                    {26,18},{27,18},{255,255},
                    {26,19},{27,19},{29,12},
                    {26,20},{27,20},{28,13},
                    {26,21},{27,21},{255,255}
                    },//specialC2 (79)
                    {
                    {3,4},{1,4},

                    {255,255},{28,17},{29,17},
                    {29,20},{28,18},{29,18},
                    {29,21},{28,19},{29,19},
                    {28,21},{28,20},{255,255}
                    },//specialC3 (80)
                    {
                    {3,4},{1,4},

                    {255,255},{30,17},{31,17},
                    {255,255},{30,18},{31,18},
                    {31,20},{30,19},{31,19},
                    {31,21},{30,20},{255,255}
                    },//specialC4 (81)
                    {
                    {3,4},{1,4},

                    {255,255},{30,13},{255,255},
                    {31,13},{30,14},{31,14},
                    {31,16},{30,15},{31,15},
                    {31,21},{30,16},{255,255}
                    },//specialC5 (82)
                    {
                    {2,4},{1,4},

                    {30,0},{31,0},
                    {30,1},{31,1},
                    {30,2},{31,2},
                    {0,3},{1,3}
                    },//taunt1 (83)
                    {
                    {2,4},{1,4},

                    {30,0},{31,0},
                    {30,1},{31,1},
                    {30,2},{31,2},
                    {0,3},{31,3}
                    },//taunt2 (84)
                    {
                    {2,4},{1,4},

                    {30,4},{31,4},
                    {30,5},{31,5},
                    {30,2},{31,2},
                    {0,3},{1,3}
                    },//taunt3 (85)
                    {
                    {2,4},{1,4},

                    {30,4},{31,4},
                    {30,5},{31,5},
                    {30,2},{31,2},
                    {0,3},{31,3}
                    },//taunt4 (86)
                    {
                    {4,4},{3,4},

                    {30,10},{31,10},{30,6},{255,255},
                    {255,255},{31,11},{30,7},{31,7},
                    {255,255},{30,11},{30,8},{31,8},
                    {255,255},{255,255},{30,9},{31,9}
                    },//overheadhit1 (87)
                    {
                    {3,4},{2,4},

                    {32,6},{33,6},{255,255},
                    {32,7},{33,7},{34,7},
                    {32,8},{33,8},{34,8},
                    {255,255},{33,9},{34,9}
                    },//overheadhit2 (88)
                    {
                    {3,4},{2,4},

                    {255,255},{26,0},{27,0},
                    {255,255},{26,1},{27,1},
                    {255,255},{26,2},{27,2},
                    {28,0},{26,3},{27,3}
                    },//lowhit1 (89)
                    {
                    {4,4},{2,4},

                    {255,255},{255,255},{27,5},{28,2},
                    {255,255},{26,6},{27,6},{28,3},
                    {255,255},{26,7},{27,7},{29,2},
                    {26,5},{26,8},{27,8},{255,255}
                    },//lowhit2 (90)
                    {
                    {3,4},{2,4},

                    {255,255},{33,0},{34,0},
                    {32,1},{33,1},{34,1},
                    {32,2},{33,2},{34,2},
                    {32,3},{33,3},{34,3}
                    },//run1 (91)
                    {
                    {3,4},{2,4},

                    {255,255},{35,2},{35,3},
                    {33,4},{34,4},{35,4},
                    {33,5},{34,5},{35,5},
                    {255,255},{34,6},{35,6}
                    },//run2 (92)
                    {
                    {3,4},{2,4},

                    {255,255},{32,10},{33,10},
                    {255,255},{32,11},{33,11},
                    {255,255},{32,12},{33,12},
                    {35,9},{32,13},{33,13}
                    },//run3 (93)
                    {
                    {4,4},{2,4},

                    {255,255},{34,10},{35,10},{255,255},
                    {32,4},{34,11},{35,11},{35,7},
                    {32,5},{34,12},{35,12},{35,8},
                    {32,9},{34,13},{35,13},{255,255}
                    },//run4 (94)
                    {
                    {3,4},{2,4},

                    {255,255},{32,14},{33,14},
                    {255,255},{32,15},{33,15},
                    {32,18},{32,16},{33,16},
                    {255,255},{32,17},{33,17}
                    },//run5 (95)
                    {
                    {3,4},{2,4},

                    {255,255},{34,14},{35,14},
                    {35,18},{34,15},{35,15},
                    {35,19},{34,16},{35,16},
                    {35,20},{34,17},{35,17}
                    },//run6 (96)
                    {
                    {3,4},{2,4},

                    {27,9},{28,9},{29,9},
                    {27,10},{28,10},{29,10},
                    {255,255},{28,11},{29,11},
                    {255,255},{28,12},{255,255}
                    },//jump heavy1(97)
                    {
                    {2,4},{1,4},

                    {255,255},{29,13},
                    {28,14},{29,14},
                    {28,15},{29,15},
                    {28,16},{29,16}
                    },//jump heavy2(98)
                   }//char2(Sinclair)
                },
                   hurtboxcount[16][256]={{2,3,3,2,2,2,3,3,2,2,3,3,2,3,3,2,2,2,2,0,2,2,2,2,3,3,2,3,3,3,3,3,2,2,0,2,3,3,2,2,2,3,3,2,2,2,2,2,2,2,3,3,3,2,1,1,2,2,1,1,1},
                    {0},//char1
                    {2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,2,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,2,2,2,3,3,3,3,3,3,2,2,3,2,2,3,3,
                    2,2,2,3,3,3,2,2,2,2,2,2,2,3,0,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},//char2(Sinclair)
                    },
                   hitboxcount[16][256]={{0,1,1,1,1,1,1,1,1,1,1,1},//char 0
                   {0},//char 1
                   {0,1,1,1,1,1,1,2,1,1,1,1},//char 2
                   },
                    colorpalettes[16][4]={
                    {15,7,8},/*Francis*/
                    {15,3,1},/*Sinclair*/
                    {15,4,0},/*Sinclaircanon?*/
                    {15,11,0},/*Cartoon??*/
                    {15,11,3},/*Amber*/
                    {15,13,5},/*Pink*/
                    {6,4,0},/*Martha*/
                    {14,12,4},/*Charlie*/
                    {15,11,13},/*CGA*/
                    {11,13,0},/*CGA2*/
                    {9,3,1},/*Sinclairsuper'd*/
                    },
                    cgapalettes[6][4]={
                    {0,2,4,6},
                    {0,10,12,14},
                    {0,3,5,7},
                    {0,11,13,15},
                    {0,3,4,7},
                    {0,11,12,15},
                    };
unsigned char p1color=0,p2color=0;
float comboscaling=100.0,bgx=0,
colbox[16][8][1][2][2]={
                    {{{{-7,-10},{9,32}}},//standing
                    {{{-7,-1},{9,32}}},//crouching
                    {{{-31,20},{16,32}}},//knockdown
                    {{{0,0},{0,0}}},//grabbed
                    },//char 0
                    {-1},//char 1
                    {{{{-7,-24},{9,32}}},//standing
                    {{{-7,-8},{12,32}}},//crouching
                    {{{-31,20},{16,32}}},//knockdown
                    {{{0,0},{0,0}}},//grabbed
                    },//char 2(Sinclair)
                    },
hurtbox[16][128][8][2][2]={
                    {
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*idle (0)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}},{{4,0},{18,9}}},/*stand u1 (1)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}},{{4,0},{20,6}}},/*stand u2 (2)*/
                    {{{-11,0},{14,32}},{{-7,-15},{9,0}}},/*stand i1 (3)*/{{{-11,0},{15,32}},{{-7,-15},{9,0}}},/*stand i2 (4)*/{{{-11,0},{14,32}},{{-7,-15},{9,0}}},/*stand i3 (5)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}},{{0,12},{24,19}}},/*stand i4 (6)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}},{{4,12},{26,18}}},/*stand i5 (7)*/
                    {{{-11,9},{13,32}},{{-7,-6},{9,9}}},/*crouch (8)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*hit (9)*/
                    {{{-11,9},{13,32}},{{-7,-6},{9,9}},{{4,24},{22,32}}},/*crouch u1 (10)*/{{{-11,9},{13,32}},{{-7,-6},{9,9}},{{4,26},{24,32}}},/*crouch u2 (11)*/
                    {{{-11,9},{13,32}},{{-7,-6},{9,9}}},/*crouch i1 (12)*/{{{-11,9},{13,32}},{{-7,-6},{9,9}},{{6,-8},{15,20}}},/*crouch i2 (13)*/{{{-11,9},{13,32}},{{-7,-6},{9,9}},{{6,-11},{15,20}}},/*crouch i3 (14)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*walk left1 (15)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*walk left2 (16)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*walk right1 (17)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*walk right2 (18)*/
                    {-1},/*knockdown (19)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*specialA1 (20)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*specialA2 (21)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*specialA3 (22)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*specialA4 (23)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}},{{-4,0},{24,12}}},/*specialA5 (24)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}},{{-2,0},{26,12}}},/*specialA6 (25)*/
                    {{{-15,1},{11,32}},{{-9,-14},{7,1}}},/*stand o1 (26)*/{{{-16,0},{9,32}},{{-12,-14},{4,1}},{{4,2},{16,8}}},/*stand o2 (27)*/{{{-22,2},{7,32}},{{-16,-13},{0,2}},{{0,0},{18,9}}},/*stand o3 (28)*/
                    {{{-22,2},{9,32}},{{-15,-14},{6,2}},{{0,0},{16,9}}},/*stand o4 (29)*/{{{-11,0},{11,32}},{{-7,-15},{14,0}},{{4,0},{28,9}}},/*stand o5 (30)*/{{{-11,0},{15,32}},{{2,-13},{19,1}},{{6,1},{35,10}}},/*stand o6 (31)*/
                    {{{-11,0},{14,32}},{{-7,-15},{9,0}}},/*stand block (32)*/{{{-11,9},{13,32}},{{-7,-6},{9,9}}},/*crouch block (33)*/
                    {-1},/*specialB1 (34)*/{{{-11,1},{14,32}},{{-5,-9},{11,6}}},/*specialB2 (35)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}},{{-5,-26},{15,16}}},/*specialB3 (36)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}},{{-5,-30},{15,-4}}},/*specialB4 (37)*/
                    {{{-11,9},{13,32}},{{-7,-6},{9,9}}},/*crouch i1(38)*/{{{-12,9},{13,32}},{{-8,-6},{8,9}}},/*crouch i2(39)*/{{{-11,9},{13,32}},{{-7,-6},{9,9}}},/*crouch i3(40)*/
                    {{{-10,9},{13,32}},{{-6,-6},{10,9}},{{9,9},{24,14}}},/*crouch i4(41)*/{{{-10,9},{13,32}},{{-5,-6},{11,9}},{{9,9},{24,14}}},/*crouch i5(42)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*jumprise(43)*/{{{-10,0},{12,29}},{{-7,-15},{9,0}}},/*jumpfall(44)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*jump u1(45)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*jump u2(46)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*specialC1 (47)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*specialC2 (48)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*specialC3 (49)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}},{{-2,0},{26,12}}},/*specialC4 (50)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}},{{-2,0},{26,12}}},/*specialC5 (51)*/{{{-11,0},{11,32}},{{-7,-15},{9,0}},{{-2,0},{26,12}}},/*specialC6 (52)*/
                    {{{-11,9},{13,32}},{{-7,-6},{9,9}}},/*crouch hit(53)*/
                    {{{0,-4},{13,12}}},/*projectile1(54)*/{{{0,-4},{13,12}}},/*projectile2(55)*/
                    {{{-11,0},{11,32}},{{-7,-15},{9,0}}},/*hit2 (56)*/{{{-11,9},{13,32}},{{-7,-6},{9,9}}},/*crouch hit2(57)*/
                    {-1},/*projectile end1(58)*/{-1},/*projectile end2(59)*/{-1},/*projectile end3(60)*/
                    },//char 0
                    {-1},//char 1
                    {
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*idle (0)*/{{{-11,0},{16,32}},{{-1,-15},{15,0}}},/*crouch (1)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*stand u1 (2)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{4,-14},{24,-4}}},/*stand u2 (3)*/
                    {{{-11,0},{16,32}},{{-1,-15},{15,0}},{{4,0},{30,14}}},/*crouch u1 (4)*/{{{-11,0},{16,32}},{{-1,-15},{15,0}},{{4,0},{35,8}}},/*crouch u2 (5)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk1 (6)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk2 (7)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk3 (8)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk4 (9)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk5 (10)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk6 (11)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk7 (12)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk8 (13)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*walk9 (14)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*hurt1 (15)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*hurt2 (16)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*block1 (17)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*block2 (18)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*stand i1 (19)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{6,10},{40,32}}},/*stand i2 (20)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{6,10},{40,32}}},/*stand i3 (21)*/
                    {{{-11,0},{16,32}},{{-1,-15},{15,0}}},/*crouch o1(22)*/{{{-11,0},{16,32}},{{-1,-15},{15,0}},{{3,12},{39,32}}},/*crouch o2(23)*/{{{-11,0},{16,32}},{{-1,-15},{15,0}},{{3,14},{37,32}}},/*crouch o3(24)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*gimmick1 (25)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*gimmick2 (26)*/
                    {{{-15,-16},{11,32}},{{-5,-29},{9,-16}},{{-20,-30},{4,-8}}},/*specialA1(27)*/{{{-11,-16},{13,32}},{{-2,-27},{11,-14}},{{-16,-28},{4,-8}}},/*specialA2(28)*/{{{-11,-16},{15,32}},{{-1,-26},{14,-11}},{{-14,-26},{4,-6}}},/*specialA3(29)*/
                    {{{-11,-16},{23,32}},{{-1,-26},{14,-11}},{{-14,-26},{4,-6}}},/*specialA4(30)*/{{{-11,-16},{24,32}},{{-1,-26},{14,-11}},{{-15,-26},{4,-6}}},/*specialA5(31)*/{{{-11,-16},{25,32}},{{-1,-26},{14,-11}},{{-15,-26},{4,-6}}},/*specialA6(32)*/
                    {{{-11,-16},{26,32}},{{-1,-26},{15,-11}},{{-15,-16},{38,-2}}},/*specialA7(33)*/{{{-11,-16},{27,32}},{{1,-26},{17,-11}},{{0,-12},{41,-2}}},/*specialA8(34)*/{{{-11,-16},{27,32}},{{1,-26},{17,-11}},{{0,-12},{41,-2}}},/*specialA9(35)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{-16,-16},{-4,24}}},/*specialA10(36)*/{{{-11,-18},{11,32}},{{-8,-32},{8,-18}},{{-16,-16},{-4,4}}},/*specialA11(37)*/{{{-15,-16},{11,32}},{{-5,-29},{9,-16}},{{-17,-22},{4,-8}}},/*specialA12(38)*/
                    {{{-11,-11},{27,32}},{{0,-28},{15,-11}}},/*specialA13(39)*/{{{-11,-16},{15,32}},{{-5,-29},{12,-16}}},/*specialA14(40)*/{{{-11,-16},{12,32}},{{-7,-30},{10,-16}}},/*specialA15(41)*/
                    {{{0,-14},{14,0}}},/*projectileA1(42)*/{{{0,-14},{14,0}}},/*projectileA2(43)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*jumprise (44)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*jumpfall1 (45)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*jumpfall2 (46)*/
                    {{{-18,8},{0,32}},{{-25,-16},{-2,8}},{{-24,-31},{-8,-16}}},/*backdash1 (47)*/{{{-18,8},{0,32}},{{-25,-16},{-2,8}},{{-24,-31},{-8,-16}}},/*backdash2 (48)*/{{{-18,8},{0,32}},{{-25,-16},{-2,8}},{{-24,-31},{-8,-16}}},/*backdash3 (49)*/{{{-18,8},{0,32}},{{-25,-16},{-2,8}},{{-24,-31},{-8,-16}}},/*backdash4 (50)*/
                    {{{-10,8},{4,32}},{{-17,-16},{6,8}},{{-16,-31},{0,-16}}},/*backdash5 (51)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{6,14},{32,32}}},/*stand i4 (52)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*specialB1 (53)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*specialB2 (54)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{4,-16},{32,-4}}},/*specialB3 (55)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*specialB4 (56)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*hurt3 (57)*/
                    {{{-11,0},{16,32}},{{-1,-15},{15,0}},{{4,-16},{26,10}}},/*crouch medium1 (58)*/{{{-11,0},{16,32}},{{-1,-15},{15,0}},{{4,-16},{26,10}}},/*crouch medium2 (59)*/
                    {{{-11,-16},{11,32}},{{-6,-31},{10,-16}}},/*stand heavy1 (60)*/{{{-11,-16},{12,32}},{{-4,-31},{12,-16}}},/*stand heavy2 (61)*/{{{-12,-16},{14,32}},{{-2,-30},{14,-15}}},/*stand heavy3 (62)*/
                    {{{-12,-16},{14,32}},{{-4,-30},{12,-15}},{{5,-7},{38,15}}},/*stand heavy4 (63)*/{{{-8,-16},{18,32}},{{-4,-30},{12,-15}},{{5,-7},{43,15}}},/*stand heavy5 (64)*/
                    {{{-8,-16},{18,32}},{{-4,-30},{12,-15}},{{5,-7},{27,15}}},/*stand heavy6 (65)*/{{{-8,-16},{18,32}},{{-4,-30},{12,-15}}},/*stand heavy7 (66)*/
                    {{{-8,-16},{18,32}},{{-4,-30},{12,-15}}},/*stand heavy8 (67)*/{{{-9,-16},{14,32}},{{-4,-30},{12,-15}}},/*stand heavy9 (68)*/
                    {{{-10,-16},{16,32}},{{-5,-30},{11,-15}}},/*stand heavy10 (69)*/{{{-11,-16},{11,32}},{{-6,-30},{10,-15}}},/*stand heavy11 (70)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*idle2 (71)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*idle3 (72)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{4,-14},{24,-4}}},/*stand u3 (73)*/
                    {-1},/*knockdown (74)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}},{{4,-16},{18,-3}}},/*jump light1 (75)*/{{{-18,-16},{4,32}},{{-8,-31},{8,-16}},{{4,-16},{27,-3}}},/*jump light2 (76)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*gimmick2 (77)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*specialC1 (78)*/{{{-11,-16},{11,32}},{{-1,-28},{15,-13}}},/*specialC2 (79)*/{{{-11,-16},{11,32}},{{6,-25},{22,-10}}},/*specialC3 (80)*/
                    {{{-11,-16},{11,32}},{{9,-22},{25,-7}}},/*specialC4 (81)*/{{{-11,-15},{16,32}},{{-1,-29},{15,-14}}},/*specialC5 (82)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*taunt1 (83)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*taunt2 (84)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*taunt1 (85)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*taunt1 (86)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*overheadhit1 (87)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*overheadhit2 (88)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*lowhit1 (89)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*lowhit2 (90)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*run1 (91)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*run2 (92)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*run3 (93)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*run4 (94)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*run5 (95)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*run6 (96)*/
                    {{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*jump heavy1 (97)*/{{{-11,-16},{11,32}},{{-8,-31},{8,-16}}},/*jump heavy2 (98)*/
                    },//char 2(Sinclair)
                    },
hitbox[16][16][4][2][2]={
                    {{0},//idle (0)
                    {{{4,-1},{22,7}}},//stand u(1)
                    {{{5,11},{30,20}}},//stand i(2)
                    {{{5,25},{26,32}}},//crouch u(3)
                    {{{6,-13},{19,20}}},//crouch o(4)
                    {{{-2,-2},{27,14}}},//specialA(5)
                    {{{8,2},{36,9}}},//stand o(6)
                    {{{7,-1},{18,18}}},//specialB1(7)
                    {{{-12,-36},{16,-4}}},//specialB2(8)
                    {{{9,8},{27,15}}},//crouch i(9)
                    {{{0,16},{18,32}}},//jump u(10)
                    {{{-2,0},{24,12}}},//grab(11)
                    },//char 0
                    {-1},//char 1
                    {{0},//idle (0)
                    {{{4,-16},{26,0}}},//stand u(1)
                    {{{4,-1},{37,10}}},//crouch u(2)
                    {{{6,12},{42,32}}},//stand i(3)
                    {{{3,16},{39,32}}},//crouch o(4)
                    {{{4,-16},{32,0}}},//specialB(5)
                    {{{4,-18},{28,10}}},//crouch i(6)
                    {{{24,-9},{45,5}},{{4,-3},{26,12}}},//stand o(7)
                    {{{-64,-64},{64,0}}},//special B k(8)
                    {{{4,-18},{30,1}}},//jump u(9)
                    {{{4,-27},{33,6}}},//special C(10)
                    {{{4,-18},{20,23}}},//jump o(11)
                    }//char 2
                    };
bool flash=true,screenfocused=true;

sf::Color CGAcolor(unsigned char palette[][4],unsigned char colorcode,unsigned char number){
    return sf::Color(170*((palette[colorcode][number]/4)%2) + 85*(palette[colorcode][number]/8), 
    (1-(palette[colorcode][number]==6)/3.0)*170*((palette[colorcode][number]/2)%2) + 85*(palette[colorcode][number]/8),
    170*(palette[colorcode][number]%2) + 85*(palette[colorcode][number]/8));
}

class mapnpc{
public:
    unsigned char x=0,y=0,spriteset=0,interaction=0,dir=0,//0=up,1=right,2=down,3=left
    battlecharacter=0;
    float battlehp=500;
    bool interactable=true,battle=false;
};

class attackdata{
public:
    short movetype,hitstun,blockstun,kdown,hitwait;
    float kback,launch,grab[2];
    bool pushaway=true,wallcrash=false;

};

class projectile
{
public:
    float x,y,movex,movey,dmg,kback,mgain,launch;
    short movetype,animloop=0,looplen=0,loopanim[256]={},
    frame=0,hitstop,hitstun,blockstun,hitcount=0,hitstopped=0,knockdown=0,code=0,existed=0,moveact=0;
    bool right,hit=false;
    std::deque<short>endanim;
};

class player
{
public:
    std::deque<short> animq,idleanim,hitboxanim,atkfx;
    std::deque<projectile> proj;
    attackdata attack;
    unsigned char anim[64][2]={},color=0;
    short gimmick[8]={},hbframe=0,act=0,col=0,frame=0,block=-1,//-1=not blocking,0=stand blocking,1=crouch blocking.2=all blocking
    hitstun=0,blockstun=0,hitstop=0,wins=0,character=0,hurtframes[9]={56,56,57,32,33,56,56,56,56},//0=stand,1=stand2,2=crouch,3=stand block,4=crouch block,5=overhead1,6=overhead2,7=low,8=low
    buffer=0,kdown=0,kdowned=0,movewaitx=0,movewaity=0,movetype=0,//-1=can't do anything,0=whiff cancelable,1=low,2=middle,3=overhead,4=unblockable
    landdelay=0,hitstopped=0,grabstate=-1,//-1=neutural,0=grab escape,1=normal grab,2=command grab,3=grab confirmed normal,4=grab confirmed command
    iframes=0,grabiframes=0,hitcount=0,
    moveact=0,movescaling[64]={};
    bool cancel[64]={},air=false,whiff=true,right,hit=false,slide=false,neutural=true,comboed=false,hitbefore=false,super=false,wallcrash=false,wallcrashed=false,running=false,counter=false;
    float x=0,y=176.0,jumpx=0,jumpy=0,kback=0,launch=0,hp=1000.0,maxhp=1000.0,dmg=0,pushaway=0,grab[2]={},meter=100,mgain=0;
};

class characterselect : public sf::Drawable, public sf::Transformable
{
public:

    bool load(const std::string& tileset)
    {
        if (!m_tileset.loadFromFile(tileset))return false;
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(64);
        return true;
    }
    void setcharselect(short xlen,short ylen,short x, short y){
        float spacingx=48,spacingy=48;
        for(short i=0;i<ylen;i++)
            for(short j=0;j<xlen;j++){
            sf::Vertex* tri = &m_vertices[6*(i*xlen+j)];
            tri[0].position = sf::Vector2f(x+spacingx*j,y+spacingy*i);
            tri[1].position = sf::Vector2f(x+32+spacingx*j,y+spacingy*i);
            tri[2].position = sf::Vector2f(x+spacingx*j,y+32+spacingy*i);
            tri[3].position = sf::Vector2f(x+spacingx*j,y+32+spacingy*i);
            tri[4].position = sf::Vector2f(x+32+spacingx*j,y+spacingy*i);
            tri[5].position = sf::Vector2f(x+32+spacingx*j,y+32+spacingy*i);
            tri[0].texCoords = sf::Vector2f((i*xlen+j)*32,0);
            tri[1].texCoords = sf::Vector2f((i*xlen+j+1)*32,0);
            tri[2].texCoords = sf::Vector2f((i*xlen+j)*32,32);
            tri[3].texCoords = sf::Vector2f((i*xlen+j)*32,32);
            tri[4].texCoords = sf::Vector2f((i*xlen+j+1)*32,0);
            tri[5].texCoords = sf::Vector2f((i*xlen+j+1)*32,32);
        }
    }

    void setselect(short xlen,short ylen,short x, short y,short x2,short y2){
        for(short i=0;i<ylen;i++)
            for(short j=0;j<xlen;j++){
            sf::Vertex* tri = &m_vertices[6*(i*xlen+j)];
            for(short k=0;k<6;k++){
                if((x==j&&y==i)||(x2==j&&y2==i))tri[k].color=sf::Color(255,255,255,255);
                else tri[k].color=sf::Color(170,170,170,255);
            }
        }
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = &m_tileset;

        target.draw(m_vertices, states);
    }
    sf::VertexArray m_vertices;
    sf::Texture m_tileset;
};

class menu : public sf::Drawable, public sf::Transformable
{
public:

    bool load(const std::string& tileset)
    {
        if (!m_tileset.loadFromFile(tileset))return false;
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(64);
        return true;
    }
    void setmenu(short cnt,float x,float y,float spacingx, float spacingy,short tcode){
        for(short i=0;i<cnt;i++){
            sf::Vertex* tri = &m_vertices[6*i];
            tri[0].position = sf::Vector2f(x+spacingx*i,y+spacingy*i);
            tri[1].position = sf::Vector2f(x+64+spacingx*i,y+spacingy*i);
            tri[2].position = sf::Vector2f(x+spacingx*i,y+16+spacingy*i);
            tri[3].position = sf::Vector2f(x+spacingx*i,y+16+spacingy*i);
            tri[4].position = sf::Vector2f(x+64+spacingx*i,y+spacingy*i);
            tri[5].position = sf::Vector2f(x+64+spacingx*i,y+16+spacingy*i);
            tri[0].texCoords = sf::Vector2f(tcode*64,i*16);
            tri[1].texCoords = sf::Vector2f(64+tcode*64,i*16);
            tri[2].texCoords = sf::Vector2f(tcode*64,i*16+16);
            tri[3].texCoords = sf::Vector2f(tcode*64,i*16+16);
            tri[4].texCoords = sf::Vector2f(64+tcode*64,i*16);
            tri[5].texCoords = sf::Vector2f(64+tcode*64,i*16+16);
        }
        textcoordinates=tcode;
    }

    void setcolor(short cnt,bool shading,short placeinput){
        for(short i=0;i<cnt;i++){
            sf::Vertex* tri = &m_vertices[6*i];
            for(short j=0;j<6;j++){
                if(placeinput==i)tri[j].color=sf::Color(85,85,85,255);
                else tri[j].color=sf::Color(255,255,255,255);
                if(shading&&placeinput==i){
                    tri[j].color=sf::Color(255,255,255,255);
                    tri[0].texCoords = sf::Vector2f(64+textcoordinates*64,i*16);
                    tri[1].texCoords = sf::Vector2f(128+textcoordinates*64,i*16);
                    tri[2].texCoords = sf::Vector2f(64+textcoordinates*64,i*16+16);
                    tri[3].texCoords = sf::Vector2f(64+textcoordinates*64,i*16+16);
                    tri[4].texCoords = sf::Vector2f(128+textcoordinates*64,i*16);
                    tri[5].texCoords = sf::Vector2f(128+textcoordinates*64,i*16+16);
                }
                else{
                    tri[0].texCoords = sf::Vector2f(textcoordinates*64,i*16);
                    tri[1].texCoords = sf::Vector2f(64+textcoordinates*64,i*16);
                    tri[2].texCoords = sf::Vector2f(textcoordinates*64,i*16+16);
                    tri[3].texCoords = sf::Vector2f(textcoordinates*64,i*16+16);
                    tri[4].texCoords = sf::Vector2f(64+textcoordinates*64,i*16);
                    tri[5].texCoords = sf::Vector2f(64+textcoordinates*64,i*16+16);
                }
            }
        }
    }
    short textcoordinates;
private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = &m_tileset;

        target.draw(m_vertices, states);
    }
    sf::VertexArray m_vertices;
    sf::Texture m_tileset;
};

class charactergraphics : public sf::Drawable, public sf::Transformable
{
public:

    void load(const sf::Texture tread,bool shadow)
    {
        m_tileset=tread;

        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(300);

        for (unsigned int i = 0; i < 6; ++i)
            for (unsigned int j = 0; j < 8; ++j)
            {
                sf::Vertex* tri = &m_vertices[(j + i * 8) * 6];
                if(shadow){
                    tri[0].position = sf::Vector2f(0+j*16,0+i*4);
                    tri[1].position = sf::Vector2f(16+j*16,0+i*4);
                    tri[2].position = sf::Vector2f(0+j*16,4+i*4);
                    tri[3].position = sf::Vector2f(0+j*16,4+i*4);
                    tri[4].position = sf::Vector2f(16+j*16,0+i*4);
                    tri[5].position = sf::Vector2f(16+j*16,4+i*4);
                    for(unsigned k=0;k<6;k++)tri[k].color=sf::Color::Black;
                }
                else{
                    tri[0].position = sf::Vector2f(0+j*16,0+i*16);
                    tri[1].position = sf::Vector2f(16+j*16,0+i*16);
                    tri[2].position = sf::Vector2f(0+j*16,16+i*16);
                    tri[3].position = sf::Vector2f(0+j*16,16+i*16);
                    tri[4].position = sf::Vector2f(16+j*16,0+i*16);
                    tri[5].position = sf::Vector2f(16+j*16,16+i*16);
                }
            }
    }

    void setanim(unsigned char anim[][2],bool right){
        short sizex=anim[0][0],sizey=anim[0][1],basex=anim[1][0],basey=anim[1][1];
        for (unsigned int i = 0; i < 6; ++i)
            for (unsigned int j = 0; j < 8; ++j){
            short temp=j-4+basex+sizex*(i-6+basey)+2;
            if(j<4-basex||4+sizex-basex<=j||i<6-basey||6+sizey-basey<=i||(anim[temp][0]==255&&anim[temp][1]==255)){
                if(right){sf::Vertex* tri = &m_vertices[(j + i * 8) * 6];for(short k=0;k<6;k++)tri[k].texCoords= sf::Vector2f(0,0);}
                else{sf::Vertex* tri = &m_vertices[(7-j + i * 8) * 6];for(short k=0;k<6;k++)tri[k].texCoords= sf::Vector2f(0,0);}
            }
            else{
                short tempx=anim[temp][0],tempy=anim[temp][1];
                if(right){
                    sf::Vertex* tri = &m_vertices[(j + i * 8) * 6];
                    tri[0].texCoords = sf::Vector2f(tempx*16, tempy*16);
                    tri[1].texCoords = sf::Vector2f(tempx*16+16, tempy*16);
                    tri[2].texCoords = sf::Vector2f(tempx*16, tempy*16+16);
                    tri[3].texCoords = sf::Vector2f(tempx*16, tempy*16+16);
                    tri[4].texCoords = sf::Vector2f(tempx*16+16, tempy*16);
                    tri[5].texCoords = sf::Vector2f(tempx*16+16, tempy*16+16);

                }
                else{
                    sf::Vertex* tri = &m_vertices[(7-j + i * 8) * 6];
                    tri[0].texCoords = sf::Vector2f(tempx*16+16, tempy*16);
                    tri[1].texCoords = sf::Vector2f(tempx*16, tempy*16);
                    tri[2].texCoords = sf::Vector2f(tempx*16+16, tempy*16+16);
                    tri[3].texCoords = sf::Vector2f(tempx*16+16, tempy*16+16);
                    tri[4].texCoords = sf::Vector2f(tempx*16, tempy*16);
                    tri[5].texCoords = sf::Vector2f(tempx*16, tempy*16+16);

                }
            }
        }
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = &m_tileset;

        target.draw(m_vertices, states);
    }

    sf::VertexArray m_vertices;
    sf::Texture m_tileset;
};

class superflash : public sf::Drawable, public sf::Transformable
{
public:
    void create(short frame,float py){
        frame=frame/2-4;
        if(frame<1)frame=1;
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(16);
        sf::Vertex* triangles = &m_vertices[6];
        triangles[0].position = sf::Vector2f(0,py-frame+1);
        triangles[1].position = sf::Vector2f(256,py-frame+1);
        triangles[2].position = sf::Vector2f(0,py+frame);
        triangles[3].position = sf::Vector2f(0,py+frame);
        triangles[4].position = sf::Vector2f(256,py+frame);
        triangles[5].position = sf::Vector2f(256,py-frame+1);
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = NULL;

        target.draw(m_vertices, states);
    }
   sf::VertexArray m_vertices;

};

class effects : public sf::Drawable, public sf::Transformable
{
public:
    void create(){
        if(code==0){//basic particles
            m_vertices.setPrimitiveType(sf::PrimitiveType::Points);
            m_vertices.resize(3);
            sf::Vertex* point = &m_vertices[1];
            point[0].position = sf::Vector2f(x+bgx+std::cos(dir*3.14/180)*frame*speed,y+std::sin(dir*3.14/180)*frame*speed);
            point[0].color = color1;
        }
        else if(code==1){//hit lines
            m_vertices.setPrimitiveType(sf::PrimitiveType::Lines);
            m_vertices.resize(32);
            for(short i=0;i<8;i++){
                float angle=i * 3.14f / 4.f;
                float xtemp=std::cos(angle),ytemp=std::sin(angle);
                sf::Vertex* line = &m_vertices[i*2];
                if(frame==0){
                    line[i*2].position = sf::Vector2f(x+xtemp+bgx,y+ytemp);line[i*2+1].position = sf::Vector2f(xtemp*16+x+bgx,ytemp*16+y);
                }
                else{
                    line[i*2].position = sf::Vector2f(xtemp*(frame+8)+bgx+x,ytemp*(frame+8)+y);
                    line[i*2+1].position = sf::Vector2f(xtemp*(float(frame)/8+16)+bgx+x,ytemp*(float(frame)/8+16)+y);
                }
                if(frame>3&&frame%2==1&&flash){line[i*2].color=sf::Color::Transparent;line[i*2+1].color=sf::Color::Transparent;}
                else {line[i*2].color=color1;line[i*2+1].color=color1;}
            }
        }
        else if(code==2){//hit circle
            m_vertices.setPrimitiveType(sf::PrimitiveType::Lines);
            m_vertices.resize(192);
            sf::Vertex* circle = &m_vertices[96];
            for(unsigned int i=0;i<36;i++){
                float angle=i * 3.14f / 18.f,angle2=(i+1) * 3.14f / 18.f;
                circle[i*2].position = sf::Vector2f((std::cos(angle))*(4+frame)*speed+x+bgx,(std::sin(angle))*(4+frame)*speed+y);
                circle[i*2+1].position = sf::Vector2f((std::cos(angle2))*(4+frame)*speed+x+bgx,(std::sin(angle2))*(4+frame)*speed+y);
                if(frame>3&&frame%2==1&&flash){circle[i*2].color=sf::Color::Transparent;circle[i*2+1].color=sf::Color::Transparent;}
                else {circle[i*2].color=color1;circle[i*2+1].color=color1;}
            }
        }
        else if(code==3){//hit flash
            m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
            m_vertices.resize(9);
            sf::Vertex* tri = &m_vertices[3];
            tri[0].position = sf::Vector2f(std::cos((dir)*3.14/180)*4+x+bgx,std::sin((dir)*3.14/180)*4+y);
            tri[1].position = sf::Vector2f(std::cos((dir+fxsize/2)*3.14/180)*512+x+bgx,std::sin((dir+fxsize/2)*3.14/180)*512+y);
            tri[2].position = sf::Vector2f(std::cos((dir-fxsize/2)*3.14/180)*480+x+bgx,std::sin((dir-fxsize/2)*3.14/180)*480+y);
            if(frame%2==0&&frame>3&&flash){tri[0].color = sf::Color::Transparent;tri[1].color = sf::Color::Transparent;tri[+2].color = sf::Color::Transparent;}
            else{tri[0].color = color1;tri[1].color = color1;tri[2].color = color1;}
        }
        else if(code==4){//lines
            m_vertices.setPrimitiveType(sf::PrimitiveType::Lines);
            m_vertices.resize(8);
            float angle=speed * dir * 3.14f / 4.f;
            float xtemp=std::cos(angle),ytemp=std::sin(angle);
            sf::Vertex* line = &m_vertices[2];
            line[0].position = sf::Vector2f(bgx+x,y);
            line[1].position = sf::Vector2f(xtemp*fxsize+bgx+x,ytemp*fxsize+y);
            if(frame>3&&frame%2==1&&flash){line[0].color=sf::Color::Transparent;line[1].color=sf::Color::Transparent;}
            else {line[0].color=color1;line[1].color=color1;}
        }
        frame++;
    }

    short frame=0,code=0,len=0;
    float dir=0,x,y,fxsize=1,speed=1;
    sf::Color color1=sf::Color(255, 255, 255);

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = NULL;

        target.draw(m_vertices,states);
    }
   sf::VertexArray m_vertices;
};
std::deque<effects> effectslist;

class meterbar : public sf::Drawable, public sf::Transformable
{
public:
    void create(float meter,float meter2){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices2.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices3.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(32);
        m_vertices2.resize(32);
        m_vertices3.resize(32);
        sf::Vertex* triangles = &m_vertices[12];
        triangles[0].position = sf::Vector2f(35,221);
        triangles[1].position = sf::Vector2f(93,221);
        triangles[2].position = sf::Vector2f(35,227);
        triangles[3].position = sf::Vector2f(35,227);
        triangles[4].position = sf::Vector2f(93,221);
        triangles[5].position = sf::Vector2f(93,227);

        triangles[6].position = sf::Vector2f(163,221);
        triangles[7].position = sf::Vector2f(221,221);
        triangles[8].position = sf::Vector2f(163,227);
        triangles[9].position = sf::Vector2f(163,227);
        triangles[10].position = sf::Vector2f(221,221);
        triangles[11].position = sf::Vector2f(221,227);
        sf::Vertex* tri = &m_vertices2[12];
        sf::Vertex* tri2 = &m_vertices3[12];
        float temp=(meter-(int(meter)/100)*100);
        temp=temp*58/100;
        tri[0].position = sf::Vector2f(35,221);
        tri[1].position = sf::Vector2f(35+temp,221);
        tri[2].position = sf::Vector2f(35,227);
        tri[3].position = sf::Vector2f(35,227);
        tri[4].position = sf::Vector2f(35+temp,221);
        tri[5].position = sf::Vector2f(35+temp,227);
        tri2[0].position = sf::Vector2f(35,225);
        tri2[1].position = sf::Vector2f(35+temp,225);
        tri2[2].position = sf::Vector2f(35,227);
        tri2[3].position = sf::Vector2f(35,227);
        tri2[4].position = sf::Vector2f(35+temp,225);
        tri2[5].position = sf::Vector2f(35+temp,227);
        temp=(meter2-(int(meter2)/100)*100);
        temp=temp*58/100;
        tri[6].position = sf::Vector2f(221-temp,221);
        tri[7].position = sf::Vector2f(221,221);
        tri[8].position = sf::Vector2f(221-temp,227);
        tri[9].position = sf::Vector2f(221-temp,227);
        tri[10].position = sf::Vector2f(221,221);
        tri[11].position = sf::Vector2f(221,227);
        tri2[6].position = sf::Vector2f(221-temp,225);
        tri2[7].position = sf::Vector2f(221,225);
        tri2[8].position = sf::Vector2f(221-temp,227);
        tri2[9].position = sf::Vector2f(221-temp,227);
        tri2[10].position = sf::Vector2f(221,225);
        tri2[11].position = sf::Vector2f(221,227);
        for(unsigned int i=0;i<12;i++){triangles[i].color = sf::Color (0, 0, 0);tri[i].color = sf::Color (85, 255, 255);tri2[i].color = sf::Color (0, 170, 170);}
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = NULL;

        target.draw(m_vertices,states);
        target.draw(m_vertices2,states);
        target.draw(m_vertices3,states);
    }
   sf::VertexArray m_vertices,m_vertices2,m_vertices3;

};

class healthbar : public sf::Drawable, public sf::Transformable
{
public:
    void create(float hp,float hp2,float maxhp,float maxhp2){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices2.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices3.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(32);
        m_vertices2.resize(32);
        m_vertices3.resize(32);
        sf::Vertex* triangles = &m_vertices[12];
        triangles[0].position = sf::Vector2f(18,10);
        triangles[1].position = sf::Vector2f(106,10);
        triangles[2].position = sf::Vector2f(22,18);
        triangles[3].position = sf::Vector2f(22,18);
        triangles[4].position = sf::Vector2f(106,10);
        triangles[5].position = sf::Vector2f(110,18);

        triangles[6].position = sf::Vector2f(146,18);
        triangles[7].position = sf::Vector2f(234,18);
        triangles[8].position = sf::Vector2f(150,10);
        triangles[9].position = sf::Vector2f(150,10);
        triangles[10].position = sf::Vector2f(234,18);
        triangles[11].position = sf::Vector2f(238,10);
        sf::Vertex* tri = &m_vertices2[12];
        sf::Vertex* tri2 = &m_vertices3[12];
        float temp=hp/maxhp*88;
        tri[0].position = sf::Vector2f(106-temp,10);
        tri[1].position = sf::Vector2f(106,10);
        tri[2].position = sf::Vector2f(110-temp,18);
        tri[3].position = sf::Vector2f(110-temp,18);
        tri[4].position = sf::Vector2f(106,10);
        tri[5].position = sf::Vector2f(110,18);
        tri2[0].position = sf::Vector2f(109-temp,16);
        tri2[1].position = sf::Vector2f(109,16);
        tri2[2].position = sf::Vector2f(110-temp,18);
        tri2[3].position = sf::Vector2f(110-temp,18);
        tri2[4].position = sf::Vector2f(109,16);
        tri2[5].position = sf::Vector2f(110,18);
        temp=hp2/maxhp2*88;
        tri[6].position = sf::Vector2f(146,18);
        tri[7].position = sf::Vector2f(146+temp,18);
        tri[8].position = sf::Vector2f(150,10);
        tri[9].position = sf::Vector2f(150,10);
        tri[10].position = sf::Vector2f(146+temp,18);
        tri[11].position = sf::Vector2f(150+temp,10);
        tri2[6].position = sf::Vector2f(146,18);
        tri2[7].position = sf::Vector2f(146+temp,18);
        tri2[8].position = sf::Vector2f(147,16);
        tri2[9].position = sf::Vector2f(147,16);
        tri2[10].position = sf::Vector2f(146+temp,18);
        tri2[11].position = sf::Vector2f(147+temp,16);
        for(unsigned int i=0;i<12;i++){triangles[i].color = sf::Color (85, 85, 85);tri[i].color = sf::Color (85, 255, 85);tri2[i].color = sf::Color (0, 170, 0);}
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = NULL;

        target.draw(m_vertices,states);
        target.draw(m_vertices2,states);
        target.draw(m_vertices3,states);
    }
   sf::VertexArray m_vertices,m_vertices2,m_vertices3;

};

class timeui : public sf::Drawable, public sf::Transformable
{
public:
    bool load(const std::string& tileset)
    {
        if (!m_tileset.loadFromFile(tileset))return false;
        return true;
    }
    void create(){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(32);
        sf::Vertex* triangles = &m_vertices[12];
        triangles[0].position = sf::Vector2f(120,8);
        triangles[1].position = sf::Vector2f(120,24);
        triangles[2].position = sf::Vector2f(128,8);
        triangles[3].position = sf::Vector2f(128,8);
        triangles[4].position = sf::Vector2f(120,24);
        triangles[5].position = sf::Vector2f(128,24);

        triangles[6].position = sf::Vector2f(128,8);
        triangles[7].position = sf::Vector2f(128,24);
        triangles[8].position = sf::Vector2f(136,8);
        triangles[9].position = sf::Vector2f(136,8);
        triangles[10].position = sf::Vector2f(128,24);
        triangles[11].position = sf::Vector2f(136,24);
    }
    void timeset(short time){
        sf::Vertex* tri = &m_vertices[12];
        short temp=(time/10+1)*8;
        tri[0].texCoords = sf::Vector2f(temp,0);
        tri[1].texCoords = sf::Vector2f(temp,16);
        tri[2].texCoords = sf::Vector2f(temp+8,0);
        tri[3].texCoords = sf::Vector2f(temp+8,0);
        tri[4].texCoords = sf::Vector2f(temp,16);
        tri[5].texCoords = sf::Vector2f(temp+8,16);
        temp=(time%10+1)*8;
        tri[6].texCoords = sf::Vector2f(temp,0);
        tri[7].texCoords = sf::Vector2f(temp,16);
        tri[8].texCoords = sf::Vector2f(temp+8,0);
        tri[9].texCoords = sf::Vector2f(temp+8,0);
        tri[10].texCoords = sf::Vector2f(temp,16);
        tri[11].texCoords = sf::Vector2f(temp+8,16);
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = &m_tileset;

        target.draw(m_vertices,states);

    }
   sf::VertexArray m_vertices;
   sf::Texture m_tileset;

};

class comboui : public sf::Drawable, public sf::Transformable
{
public:
    bool load(const std::string& tileset)
    {
        if (!m_tileset.loadFromFile(tileset))return false;
        return true;
    }
    void create(bool right,sf::Color color1,sf::Color color2){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(16);
        m_tileset.setRepeated(true);
        sf::Vertex* tri = &m_vertices[6];
        if(right){
            tri[0].position = sf::Vector2f(0-slide,32);
            tri[1].position = sf::Vector2f(0-slide,80);
            tri[2].position = sf::Vector2f(48-slide,32);
            tri[3].position = sf::Vector2f(48-slide,32);
            tri[4].position = sf::Vector2f(0-slide,80);
            tri[5].position = sf::Vector2f(48-slide,80);
        }
        else{
            tri[0].position = sf::Vector2f(256+slide,32);
            tri[1].position = sf::Vector2f(256+slide,80);
            tri[2].position = sf::Vector2f(208+slide,32);
            tri[3].position = sf::Vector2f(208+slide,32);
            tri[4].position = sf::Vector2f(256+slide,80);
            tri[5].position = sf::Vector2f(208+slide,80);
        }
        tri[0].texCoords = sf::Vector2f(0,0);
        tri[1].texCoords = sf::Vector2f(0,48);
        tri[2].texCoords = sf::Vector2f(48,0);
        tri[3].texCoords = sf::Vector2f(48,0);
        tri[4].texCoords = sf::Vector2f(0,48);
        tri[5].texCoords = sf::Vector2f(48,48);
        m_vertices2.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices2.resize(16);
        sf::Vertex* tri2 = &m_vertices2[6];
        float temp=comboscaling/100*42;
        if(right){
            tri2[0].position = sf::Vector2f(2-slide,68);
            tri2[1].position = sf::Vector2f(2-slide,74);
            tri2[2].position = sf::Vector2f(2+temp-slide,68);
            tri2[3].position = sf::Vector2f(2+temp-slide,68);
            tri2[4].position = sf::Vector2f(2-slide,74);
            tri2[5].position = sf::Vector2f(2+temp-slide,74);
        }
        else{
            tri2[0].position = sf::Vector2f(254+slide,68);
            tri2[1].position = sf::Vector2f(254+slide,74);
            tri2[2].position = sf::Vector2f(254-temp+slide,68);
            tri2[3].position = sf::Vector2f(254-temp+slide,68);
            tri2[4].position = sf::Vector2f(254+slide,74);
            tri2[5].position = sf::Vector2f(254-temp+slide,74);
        }
        for(short i=0;i<6;i++)tri2[i].color=color1;
        m_vertices3.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices3.resize(16);
        sf::Vertex* tri3 = &m_vertices3[6];
        if(right){
            tri3[0].position = sf::Vector2f(0-slide,64);
            tri3[1].position = sf::Vector2f(0-slide,78);
            tri3[2].position = sf::Vector2f(44-slide,64);
            tri3[3].position = sf::Vector2f(44-slide,64);
            tri3[4].position = sf::Vector2f(0-slide,78);
            tri3[5].position = sf::Vector2f(44-slide,78);
        }
        else{
            tri3[0].position = sf::Vector2f(256+slide,64);
            tri3[1].position = sf::Vector2f(256+slide,78);
            tri3[2].position = sf::Vector2f(212+slide,64);
            tri3[3].position = sf::Vector2f(212+slide,64);
            tri3[4].position = sf::Vector2f(256+slide,78);
            tri3[5].position = sf::Vector2f(212+slide,78);
        }
        for(short i=0;i<6;i++)tri3[i].color=color2;
    }
float slide=0,slide2=0;

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();


        target.draw(m_vertices3);
        target.draw(m_vertices2);
        states.texture = &m_tileset;
        target.draw(m_vertices,states);
    }
   sf::VertexArray m_vertices,m_vertices2,m_vertices3;
   sf::Texture m_tileset;

};

class storymapui : public sf::Drawable, public sf::Transformable
{
public:
    bool load(const std::string& tileset)
    {
        if (!m_tileset.loadFromFile(tileset))return false;
        return true;
    }
    void create(bool check[]){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(180);
        m_tileset.setRepeated(true);
        sf::Vertex* tri = &m_vertices[60];
        if(check[3]){//left
            tri[54].position = sf::Vector2f(0,32);
            tri[55].position = sf::Vector2f(64,64);
            tri[56].position = sf::Vector2f(0,208);
            tri[57].position = sf::Vector2f(64,64);
            tri[58].position = sf::Vector2f(0,208);
            tri[59].position = sf::Vector2f(64,176);
        }
        else if(check[0]){//left front
            tri[54].position = sf::Vector2f(-48,64);
            tri[55].position = sf::Vector2f(64,64);
            tri[56].position = sf::Vector2f(-48,176);
            tri[57].position = sf::Vector2f(64,64);
            tri[58].position = sf::Vector2f(-48,176);
            tri[59].position = sf::Vector2f(64,176);
        }
        else for(short i=0;i<6;i++)tri[i+54].position=sf::Vector2f(-1,-1);

        if(check[4]){//right
            tri[48].position = sf::Vector2f(192,64);
            tri[49].position = sf::Vector2f(256,32);
            tri[50].position = sf::Vector2f(192,176);
            tri[51].position = sf::Vector2f(256,32);
            tri[52].position = sf::Vector2f(192,176);
            tri[53].position = sf::Vector2f(256,208);
        }
        else if(check[2]){//right front
            tri[48].position = sf::Vector2f(192,64);
            tri[49].position = sf::Vector2f(304,64);
            tri[50].position = sf::Vector2f(192,176);
            tri[51].position = sf::Vector2f(304,64);
            tri[52].position = sf::Vector2f(192,176);
            tri[53].position = sf::Vector2f(304,176);
        }
        else for(short i=0;i<6;i++)tri[i+48].position=sf::Vector2f(-1,-1);

        if(check[1]){
            tri[42].position = sf::Vector2f(64,64);
            tri[43].position = sf::Vector2f(192,64);
            tri[44].position = sf::Vector2f(64,176);
            tri[45].position = sf::Vector2f(192,64);
            tri[46].position = sf::Vector2f(64,176);
            tri[47].position = sf::Vector2f(192,176);
        }
        else for(short i=0;i<6;i++)tri[i+42].position=sf::Vector2f(-1,-1);

        if(!check[1]&&check[0]){
            tri[36].position = sf::Vector2f(64,64);
            tri[37].position = sf::Vector2f(96,80);
            tri[38].position = sf::Vector2f(64,176);
            tri[39].position = sf::Vector2f(96,80);
            tri[40].position = sf::Vector2f(64,176);
            tri[41].position = sf::Vector2f(96,160);
        }
        else for(short i=0;i<6;i++)tri[i+36].position=sf::Vector2f(-1,-1);

        if(!check[1]&&check[2]){
            tri[30].position = sf::Vector2f(160,80);
            tri[31].position = sf::Vector2f(192,64);
            tri[32].position = sf::Vector2f(160,160);
            tri[33].position = sf::Vector2f(192,64);
            tri[34].position = sf::Vector2f(160,160);
            tri[35].position = sf::Vector2f(192,176);
        }
        else for(short i=0;i<6;i++)tri[i+30].position=sf::Vector2f(-1,-1);

        if(check[6]&&!check[1]){
            tri[24].position = sf::Vector2f(96,80);
            tri[25].position = sf::Vector2f(160,80);
            tri[26].position = sf::Vector2f(96,160);
            tri[27].position = sf::Vector2f(160,80);
            tri[28].position = sf::Vector2f(96,160);
            tri[29].position = sf::Vector2f(160,160);
        }
        else for(short i=0;i<6;i++)tri[i+24].position=sf::Vector2f(-1,-1);

        if(check[5]&&!check[0]){
            tri[18].position = sf::Vector2f(32,80);
            tri[19].position = sf::Vector2f(96,80);
            tri[20].position = sf::Vector2f(32,160);
            tri[21].position = sf::Vector2f(96,80);
            tri[22].position = sf::Vector2f(32,160);
            tri[23].position = sf::Vector2f(96,160);
        }
        else for(short i=0;i<6;i++)tri[i+18].position=sf::Vector2f(-1,-1);

        if(check[7]&&!check[2]){
            tri[12].position = sf::Vector2f(160,80);
            tri[13].position = sf::Vector2f(224,80);
            tri[14].position = sf::Vector2f(160,160);
            tri[15].position = sf::Vector2f(224,80);
            tri[16].position = sf::Vector2f(160,160);
            tri[17].position = sf::Vector2f(224,160);
        }
        else for(short i=0;i<6;i++)tri[i+12].position=sf::Vector2f(-1,-1);

        if(check[8]&&!check[0]){
            tri[6].position = sf::Vector2f(0,64);
            tri[7].position = sf::Vector2f(32,80);
            tri[8].position = sf::Vector2f(0,176);
            tri[9].position = sf::Vector2f(32,80);
            tri[10].position = sf::Vector2f(0,176);
            tri[11].position = sf::Vector2f(32,160);
        }
        else for(short i=0;i<6;i++)tri[i+6].position=sf::Vector2f(-1,-1);
        if(check[9]&&!check[2]){
            tri[0].position = sf::Vector2f(224,80);
            tri[1].position = sf::Vector2f(256,64);
            tri[2].position = sf::Vector2f(224,160);
            tri[3].position = sf::Vector2f(256,64);
            tri[4].position = sf::Vector2f(224,160);
            tri[5].position = sf::Vector2f(256,176);
        }
        else for(short i=0;i<6;i++)tri[i].position=sf::Vector2f(-1,-1);

        for(short i=0;i<10;i++){
            tri[i*6].texCoords=sf::Vector2f(0,0);
            tri[i*6+1].texCoords=sf::Vector2f(32,0);
            tri[i*6+2].texCoords=sf::Vector2f(0,32);
            tri[i*6+3].texCoords=sf::Vector2f(32,0);
            tri[i*6+4].texCoords=sf::Vector2f(0,32);
            tri[i*6+5].texCoords=sf::Vector2f(32,32);
        }
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = &m_tileset;
        target.draw(m_vertices,states);
    }
   sf::VertexArray m_vertices;
   sf::Texture m_tileset;
};

class mapcompass : public sf::Drawable, public sf::Transformable
{
public:
    void create(unsigned char dir,sf::Color color1,sf::Color color2){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(16);
        sf::Vertex* tri = &m_vertices[6];
        if(dir==0){
            tri[0].position = sf::Vector2f(4,0);tri[1].position = sf::Vector2f(0,-16);tri[2].position = sf::Vector2f(-4,0);
            tri[3].position = sf::Vector2f(4,0);tri[4].position = sf::Vector2f(0,16);tri[5].position = sf::Vector2f(-4,0);
        }
        else if(dir==1){
            tri[0].position = sf::Vector2f(0,4);tri[1].position = sf::Vector2f(16,0);tri[2].position = sf::Vector2f(0,-4);
            tri[3].position = sf::Vector2f(0,4);tri[4].position = sf::Vector2f(-16,0);tri[5].position = sf::Vector2f(0,-4);
        }
        else if(dir==2){
            tri[0].position = sf::Vector2f(4,0);tri[1].position = sf::Vector2f(0,16);tri[2].position = sf::Vector2f(-4,0);
            tri[3].position = sf::Vector2f(4,0);tri[4].position = sf::Vector2f(0,-16);tri[5].position = sf::Vector2f(-4,0);
        }
        else if(dir==3){
            tri[0].position = sf::Vector2f(0,4);tri[1].position = sf::Vector2f(-16,0);tri[2].position = sf::Vector2f(0,-4);
            tri[3].position = sf::Vector2f(0,4);tri[4].position = sf::Vector2f(16,0);tri[5].position = sf::Vector2f(0,-4);
        }

        for(unsigned char i=0;i<3;i++)tri[i].color=color1;
        for(unsigned char i=0;i<3;i++)tri[i+3].color=color2;
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();
        target.draw(m_vertices,states);
    }
   sf::VertexArray m_vertices;
};

class inputlist : public sf::Drawable, public sf::Transformable
{
public:
    bool load(const std::string& tileset)
    {
        if (!m_tileset.loadFromFile(tileset))return false;
        return true;
    }
    void create(std::deque<char>keylist,bool right){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(768);
        m_tileset.setRepeated(true);
        for(short i=0;i<keylist.size()/5;i++)
            for(short j=0;j<4;j++){
                sf::Vertex* tri = &m_vertices[6*(j+i*4)];
                if(right){
                    tri[6*(j+i*4)].position = sf::Vector2f(j*16,80+16*i);
                    tri[1+6*(j+i*4)].position = sf::Vector2f(j*16,96+16*i);
                    tri[2+6*(j+i*4)].position = sf::Vector2f(j*16+16,80+16*i);
                    tri[3+6*(j+i*4)].position = sf::Vector2f(j*16+16,80+16*i);
                    tri[4+6*(j+i*4)].position = sf::Vector2f(j*16,96+16*i);
                    tri[5+6*(j+i*4)].position = sf::Vector2f(j*16+16,96+16*i);
                }
                else{
                    tri[6*(j+i*4)].position = sf::Vector2f(240-j*16,80+16*i);
                    tri[1+6*(j+i*4)].position = sf::Vector2f(240+-j*16,96+16*i);
                    tri[2+6*(j+i*4)].position = sf::Vector2f(240-j*16+16,80+16*i);
                    tri[3+6*(j+i*4)].position = sf::Vector2f(240-j*16+16,80+16*i);
                    tri[4+6*(j+i*4)].position = sf::Vector2f(240-j*16,96+16*i);
                    tri[5+6*(j+i*4)].position = sf::Vector2f(240-j*16+16,96+16*i);
                }
            }
        for(short i=0;i<keylist.size()/5;i++){
            char temp[5]={'0','0','0','0','0'};
            short tempcnt=0;
            if(keylist[i*5+4]!='0'&&keylist[i*5]!='5')temp[tempcnt++]=keylist[i*5+4];
            if(keylist[i*5+3]=='u')temp[tempcnt++]='u';
            if(keylist[i*5+2]=='i')temp[tempcnt++]='i';
            if(keylist[i*5+1]=='o')temp[tempcnt++]='o';
            if(keylist[i*5]=='k')temp[tempcnt++]='k';
            for(short j=0;j<4;j++){
                sf::Vertex* tri = &m_vertices[6*(j+i*4)];
                if(temp[j]=='0'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(0,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(0,0);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(0,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(0,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(0,0);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(0,0);
                }
                else if(temp[j]=='u'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(0,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(0,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(16,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(16,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(0,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(16,16);
                }
                else if(temp[j]=='i'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(16,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(16,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(32,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(32,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(16,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(32,16);
                }
                else if(temp[j]=='o'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(32,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(32,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(48,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(48,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(32,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(48,16);
                }
                else if(temp[j]=='k'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(48,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(48,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(48,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(64,16);
                }
                else if(temp[j]=='1'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(96,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(96,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(96,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                }
                else if(temp[j]=='2'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(64,16);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                }
                else if(temp[j]=='3'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(96,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(96,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(96,16);
                }
                else if(temp[j]=='4'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(64,16);
                }
                else if(temp[j]=='6'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(64,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(64,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                }
                else if(temp[j]=='7'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(96,16);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(96,0);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(96,0);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                }
                else if(temp[j]=='8'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(64,16);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(64,16);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(64,0);
                }
                else if(temp[j]=='9'){
                    tri[6*(j+i*4)].texCoords = sf::Vector2f(80,16);
                    tri[1+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[2+6*(j+i*4)].texCoords = sf::Vector2f(96,16);
                    tri[3+6*(j+i*4)].texCoords = sf::Vector2f(96,16);
                    tri[4+6*(j+i*4)].texCoords = sf::Vector2f(80,0);
                    tri[5+6*(j+i*4)].texCoords = sf::Vector2f(96,0);
                }
            }
        }
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        states.transform *= getTransform();

        states.texture = &m_tileset;

        target.draw(m_vertices,states);

    }
   sf::VertexArray m_vertices;
   sf::Texture m_tileset;

};

class box : public sf::Drawable, public sf::Transformable
{
public:
    void create(float px,float py,float xy[][2][2],bool right,short count,sf::Color col){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Lines);
        m_vertices.resize(64);
        for(unsigned int i=0;i<count;i++){
            sf::Vertex* box = &m_vertices[i*8];
            if(right){
            box[i*8].position = sf::Vector2f(xy[i][0][0]+int(px),xy[i][0][1]+int(py));
            box[i*8+1].position = sf::Vector2f(xy[i][1][0]+int(px),xy[i][0][1]+int(py));
            box[i*8+2].position = sf::Vector2f(xy[i][1][0]+int(px),xy[i][0][1]+int(py));
            box[i*8+3].position = sf::Vector2f(xy[i][1][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+4].position = sf::Vector2f(xy[i][1][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+5].position = sf::Vector2f(xy[i][0][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+6].position = sf::Vector2f(xy[i][0][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+7].position = sf::Vector2f(xy[i][0][0]+int(px),xy[i][0][1]+int(py));
            }
            else{
            box[i*8].position = sf::Vector2f(-xy[i][1][0]+int(px),xy[i][0][1]+int(py));
            box[i*8+1].position = sf::Vector2f(-xy[i][0][0]+int(px),xy[i][0][1]+int(py));
            box[i*8+2].position = sf::Vector2f(-xy[i][0][0]+int(px),xy[i][0][1]+int(py));
            box[i*8+3].position = sf::Vector2f(-xy[i][0][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+4].position = sf::Vector2f(-xy[i][0][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+5].position = sf::Vector2f(-xy[i][1][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+6].position = sf::Vector2f(-xy[i][1][0]+int(px),xy[i][1][1]+int(py));
            box[i*8+7].position = sf::Vector2f(-xy[i][1][0]+int(px),xy[i][0][1]+int(py));
            }
            for(unsigned int j=0;j<8;j++)box[i*8+j].color = col;
        }
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        // apply the transform
        states.transform *= getTransform();

        // our particles don't use a texture
        states.texture = NULL;

        // draw the vertex array
        target.draw(m_vertices,states);
    }
   sf::VertexArray m_vertices;

};

class textbox : public sf::Drawable, public sf::Transformable
{
public:
    void create(float x,float y){
        m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
        m_vertices.resize(24);
        sf::Vertex* box = &m_vertices[9];
        box[0].position = sf::Vector2f(8,8);
        box[1].position = sf::Vector2f(8,96);
        box[2].position = sf::Vector2f(248,8);
        box[3].position = sf::Vector2f(248,8);
        box[4].position = sf::Vector2f(8,96);
        box[5].position = sf::Vector2f(248,96);
        box[6].position = sf::Vector2f(192,96);
        box[7].position = sf::Vector2f(160,96);
        box[8].position = sf::Vector2f(x,y);
        for(unsigned int i=0;i<9;i++)box[i].color = sf::Color(0,0,0);
    }

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        // apply the transform
        states.transform *= getTransform();

        // our particles don't use a texture
        states.texture = NULL;

        // draw the vertex array
        target.draw(m_vertices,states);
    }
   sf::VertexArray m_vertices;

};

void collisionchecks(player *p1,player *p2,float overlap[],short *framedata){
    bool projcheck=false,hitcheck=false,clashed=false;
    #define P1 (*p1)
    #define P2 (*p2)
    float temp[2],temp2[2],temp3[2],temp4[2],temp5[2],temp6[2];
    if(P1.iframes==0)
    for(int i=hurtboxcount[P1.character][P1.frame]-1;i>=0;i--){
    if(P1.right==true){
        temp[0]=hurtbox[P1.character][P1.frame][i][0][0]+int(P1.x);
        temp[1]=hurtbox[P1.character][P1.frame][i][0][1]+int(P1.y);
        temp2[0]=hurtbox[P1.character][P1.frame][i][1][0]+int(P1.x);
        temp2[1]=hurtbox[P1.character][P1.frame][i][1][1]+int(P1.y);
    }
    else{
        temp[0]=-hurtbox[P1.character][P1.frame][i][1][0]+int(P1.x);
        temp[1]=hurtbox[P1.character][P1.frame][i][0][1]+int(P1.y);
        temp2[0]=-hurtbox[P1.character][P1.frame][i][0][0]+int(P1.x);
        temp2[1]=hurtbox[P1.character][P1.frame][i][1][1]+int(P1.y);
    }
    if(P2.grabstate!=3&&P2.grabstate!=4)
    for(short j=0;j<P2.proj.size();j++){
        if(P2.proj[j].hitstopped==0&&P2.proj[j].hitcount>0){
        for(short k=0;k<hurtboxcount[P2.character][P2.proj[j].frame];k++){
            if(P2.proj[j].right==true){
                temp3[0]=hurtbox[P2.character][P2.proj[j].frame][k][0][0]+int(P2.proj[j].x);
                temp3[1]=hurtbox[P2.character][P2.proj[j].frame][k][0][1]+int(P2.proj[j].y);
                temp4[0]=hurtbox[P2.character][P2.proj[j].frame][k][1][0]+int(P2.proj[j].x);
                temp4[1]=hurtbox[P2.character][P2.proj[j].frame][k][1][1]+int(P2.proj[j].y);
            }
            else{
                temp3[0]=-hurtbox[P2.character][P2.proj[j].frame][k][1][0]+int(P2.proj[j].x);
                temp3[1]=hurtbox[P2.character][P2.proj[j].frame][k][0][1]+int(P2.proj[j].y);
                temp4[0]=-hurtbox[P2.character][P2.proj[j].frame][k][0][0]+int(P2.proj[j].x);
                temp4[1]=hurtbox[P2.character][P2.proj[j].frame][k][1][1]+int(P2.proj[j].y);
            }
        }
        if(!(temp[0]>=temp4[0]||temp2[0]<=temp3[0]||temp[1]>=temp4[1]||temp2[1]<=temp3[1])){
            P2.proj[j].hit=true;projcheck=true;
            if(temp2[0]<temp4[0])overlap[0]=temp2[0];
            else overlap[0]=temp4[0];
            if(temp[0]<temp3[0])overlap[0]+=temp3[0];
            else overlap[0]+=temp[0];
            overlap[0]/=2;
            if(temp2[1]<temp4[1])overlap[1]=temp2[1];
            else overlap[1]=temp4[1];
            if(temp[1]<temp3[1])overlap[1]+=temp3[1];
            else overlap[1]+=temp[1];
            overlap[1]/=2;
            break;
            }
        }
    }
    if((P2.grabstate==1||P2.grabstate==2)&&P2.movetype==4){
        if(P1.right==true){
            temp[0]=colbox[P1.character][P1.col][0][0][0]+int(P1.x);
            temp[1]=colbox[P1.character][P1.col][0][0][1]+int(P1.y);
            temp2[0]=colbox[P1.character][P1.col][0][1][0]+int(P1.x);
            temp2[1]=colbox[P1.character][P1.col][0][1][1]+int(P1.y);
        }
        else{
            temp[0]=-colbox[P1.character][P1.col][0][1][0]+int(P1.x);
            temp[1]=colbox[P1.character][P1.col][0][0][1]+int(P1.y);
            temp2[0]=-colbox[P1.character][P1.col][0][0][0]+int(P1.x);
            temp2[1]=colbox[P1.character][P1.col][0][1][1]+int(P1.y);
        }
    }
    if(P2.hitcount>0)
    for(int j=0;j<hitboxcount[P2.character][P2.hbframe];j++){
        if(P2.right==true){
            temp3[0]=hitbox[P2.character][P2.hbframe][j][0][0]+int(P2.x);
            temp3[1]=hitbox[P2.character][P2.hbframe][j][0][1]+int(P2.y);
            temp4[0]=hitbox[P2.character][P2.hbframe][j][1][0]+int(P2.x);
            temp4[1]=hitbox[P2.character][P2.hbframe][j][1][1]+int(P2.y);
        }
        else{
            temp3[0]=-hitbox[P2.character][P2.hbframe][j][1][0]+int(P2.x);
            temp3[1]=hitbox[P2.character][P2.hbframe][j][0][1]+int(P2.y);
            temp4[0]=-hitbox[P2.character][P2.hbframe][j][0][0]+int(P2.x);
            temp4[1]=hitbox[P2.character][P2.hbframe][j][1][1]+int(P2.y);
        }
        if(P1.hitcount>0)
        for(short k=0;k<hitboxcount[P1.character][P1.hbframe];k++){
            if(P1.right==true){
                temp5[0]=hitbox[P1.character][P1.hbframe][k][0][0]+int(P1.x);
                temp5[1]=hitbox[P1.character][P1.hbframe][k][0][1]+int(P1.y);
                temp6[0]=hitbox[P1.character][P1.hbframe][k][1][0]+int(P1.x);
                temp6[1]=hitbox[P1.character][P1.hbframe][k][1][1]+int(P1.y);
            }
            else{
                temp5[0]=-hitbox[P1.character][P1.hbframe][k][1][0]+int(P1.x);
                temp5[1]=hitbox[P1.character][P1.hbframe][k][0][1]+int(P1.y);
                temp6[0]=-hitbox[P1.character][P1.hbframe][k][0][0]+int(P1.x);
                temp6[1]=hitbox[P1.character][P1.hbframe][k][1][1]+int(P1.y);
            }
            if(!(temp5[0]>=temp4[0]||temp6[0]<=temp3[0]||temp5[1]>=temp4[1]||temp6[1]<=temp3[1])){
                hitcheck=true;clashed=true;
                if(temp6[0]<temp4[0])overlap[0]=temp6[0];
                else overlap[0]=temp4[0];
                if(temp5[0]<temp3[0])overlap[0]+=temp3[0];
                else overlap[0]+=temp5[0];
                overlap[0]/=2;
                if(temp6[1]<temp4[1])overlap[1]=temp6[1];
                else overlap[1]=temp4[1];
                if(temp5[1]<temp3[1])overlap[1]+=temp3[1];
                else overlap[1]+=temp5[1];
                overlap[1]/=2;
                break;
                }
        }
        if(clashed)break;
        if(!(temp[0]>=temp4[0]||temp2[0]<=temp3[0]||temp[1]>=temp4[1]||temp2[1]<=temp3[1])){
            hitcheck=true;
            if(temp2[0]<temp4[0])overlap[0]=temp2[0];
            else overlap[0]=temp4[0];
            if(temp[0]<temp3[0])overlap[0]+=temp3[0];
            else overlap[0]+=temp[0];
            overlap[0]/=2;
            if(temp2[1]<temp4[1])overlap[1]=temp2[1];
            else overlap[1]=temp4[1];
            if(temp[1]<temp3[1])overlap[1]+=temp3[1];
            else overlap[1]+=temp[1];
            overlap[1]/=2;
            break;
            }
        }
    }
    if(P2.hitstopped==0){
        if((P2.grabstate==1||P2.grabstate==2)&&P2.movetype==4&&(P1.air||P1.comboed))hitcheck=false;
        if(hitcheck==true)P2.whiff=false;
        if(hitcheck==false){P1.hitbefore=false;P2.whiff=true;}
        else if(hitcheck==true&&P2.hitcount==1&&P1.hitbefore==false)P1.hitbefore=true;
        else if(P1.hitbefore)hitcheck=false;
    }
    else if(projcheck){
        if(P1.hitbefore)hitcheck=false;
    }
    projcheck=false;
    for(short i=0;i<P2.proj.size();i++){
        if(hitcheck)P2.proj[i].hit=false;
        if(P2.proj[i].hit){
                projcheck=true;
                P2.grabstate=-1;
                P2.grab[0]=0;
                P2.grab[1]=0;
                P2.movetype=P2.proj[i].movetype;
                P2.kdown=P2.proj[i].knockdown;
                P2.kback=P2.proj[i].kback;
                P2.dmg=P2.proj[i].dmg;
                P2.hitstun=P2.proj[i].hitstun;
                P2.blockstun=P2.proj[i].blockstun;
                P2.launch=P2.proj[i].launch;
                P2.hitcount=P2.proj[i].hitcount;
                P2.mgain=P2.proj[i].mgain;
                P2.hitstop=P2.proj[i].hitstop;
                break;
            }
        }
    if(((P2.hitstopped==0&&hitcheck)||projcheck)&&!(P1.counter||clashed)){
        effects fxtemp;
        fxtemp.code=1;fxtemp.x=overlap[0];fxtemp.y=overlap[1];
        if(((P2.movetype==1||P2.movetype==2)&&P1.block==1)||((P2.movetype==3||P2.movetype==2)&&P1.block==0)||P1.block==2){
            if(P1.block==1)memcpy(P1.anim,animlib[P1.character][P1.hurtframes[4]],sizeof(animlib[P1.character][P1.hurtframes[4]]));
            else memcpy(P1.anim,animlib[P1.character][P1.hurtframes[3]],sizeof(animlib[P1.character][P1.hurtframes[3]]));
            P1.meter+=P2.mgain/10*11;
            if(!projcheck&&(P2.gimmick[1]==0||P2.character!=2))P2.meter+=P2.mgain;
            P2.dmg/=5;
            if(P2.hitstop==0)P1.hitstopped=14;
            else P1.hitstopped=P2.hitstop*10/9;
            if(!projcheck)P2.hitstopped=P1.hitstopped;
            fxtemp.len=P1.hitstopped;
            if(fxtemp.len<10)fxtemp.len=12;
            fxtemp.color1=sf::Color (85, 255, 255);
            *framedata=P2.blockstun-P2.animq.size();
            if(P2.grabstate==1||P2.grabstate==2)P2.whiff=true;
            hitsfxlist.push_back(13);
            hsfxx.push_back((bgx+overlap[0]-128.f)/256.f);
        }
        else{
            if(P1.col==1)memcpy(P1.anim,animlib[P1.character][P1.hurtframes[2]],sizeof(animlib[P1.character][P1.hurtframes[2]]));
            else {
                if(overlap[1]<P1.y-10){P1.frame=P1.hurtframes[5];memcpy(P1.anim,animlib[P1.character][P1.hurtframes[5]],sizeof(animlib[P1.character][P1.hurtframes[5]]));}
                else if(P2.movetype==1){P1.frame=P1.hurtframes[7];memcpy(P1.anim,animlib[P1.character][P1.hurtframes[7]],sizeof(animlib[P1.character][P1.hurtframes[7]]));}
                else memcpy(P1.anim,animlib[P1.character][P1.hurtframes[0]],sizeof(animlib[P1.character][P1.hurtframes[0]]));
                }
            if(combo==0)for(unsigned i=0;i<64;i++){P1.movescaling[i]=0;P2.movescaling[i]=0;}
            if(P2.hitstop!=0||P2.dmg!=0)combo++;
            if(projcheck){
                for(short i=0;i<P2.proj.size();i++)
                    if(P2.proj[i].hit){
                        if(P2.proj[i].hitcount==1)P2.movescaling[P2.proj[i].moveact]++;
                        if(P2.movescaling[P2.proj[i].moveact]>2)comboscaling=comboscaling/20.f*18.f;
                        break;
                   }
            }
            else{
                if(P2.hitcount==1)P2.movescaling[P2.moveact]++;
                if(P2.movescaling[P2.moveact]>2)comboscaling=comboscaling/20.f*18.f;
            }
            if(combo>3)comboscaling=comboscaling/20.f*19.f;
            P1.meter+=P2.mgain/7*8;
            if(!projcheck&&(P2.gimmick[1]==0||P2.character!=2))P2.meter+=P2.mgain;
            P2.dmg=P2.dmg/100.f*comboscaling;
            P1.hitstopped=P2.hitstop;
            if(!projcheck)P2.hitstopped=P1.hitstopped;
            fxtemp.color1=sf::Color (255, 255, 255);
            std::uniform_int_distribution<int> dis(0,360),dis2(1,5);
            fxtemp.len=P1.hitstopped;if(fxtemp.len<10&&fxtemp.len>0)fxtemp.len=10;
            if(P2.hitstop>13)
            for(short i=0;i<3;i++){
                fxtemp.code=3;fxtemp.dir=dis(gen);
                fxtemp.fxsize=dis2(gen);
                effectslist.push_back(fxtemp);
            }
            *framedata=P2.hitstun-P2.animq.size();
            std::uniform_int_distribution<int> dis3(1,2);
            if(P1.hitstopped>13)hitsfxlist.push_back(dis3(gen)+2);
            else hitsfxlist.push_back(dis3(gen));
            hsfxx.push_back((bgx+overlap[0]-128.f)/256.f);
        }
        fxtemp.code=1;
        effectslist.push_back(fxtemp);
        fxtemp.code=2;
        effectslist.push_back(fxtemp);
        P2.hitcount--;

        P1.attack.movetype=P2.movetype;
        P1.attack.hitstun=P2.hitstun;
        P1.attack.blockstun=P2.blockstun;
        P1.attack.kback=P2.kback;
        if(P2.right)P1.attack.kback*=-1;
        P1.attack.launch=P2.launch;
        P1.attack.grab[0]=P2.grab[0];
        P1.attack.grab[1]=P2.grab[1];
        P1.attack.kdown=P2.kdown;
        P1.attack.pushaway=!(projcheck||P2.wallcrash);
        P1.attack.wallcrash=P2.wallcrash;
        P1.hp-=P2.dmg;
        P1.hit=true;
        P1.comboed=true;
        }
    if(((P2.hitstopped==0&&hitcheck)||projcheck)&&P1.counter){//countered
        P1.hitstopped=P1.hitstop;P2.hitstopped=P1.hitstop;P1.hit=true;
        effects fxtemp;
        fxtemp.x=overlap[0];fxtemp.y=overlap[1];
        fxtemp.len=P1.hitstopped;
        fxtemp.color1=sf::Color (85, 255, 255);
        fxtemp.code=1;
        effectslist.push_back(fxtemp);
        fxtemp.code=2;
        effectslist.push_back(fxtemp);

        P2.hitcount--;
        hitsfxlist.push_back(13);
        hsfxx.push_back((bgx+overlap[0]-128.f)/256.f);
        }
    if(((P2.hitstopped==0&&hitcheck)||projcheck)&&clashed){//clashed
        P1.hitstopped=15;P2.hitstopped=15;
        effects fxtemp;
        fxtemp.x=overlap[0];fxtemp.y=overlap[1];
        fxtemp.len=P1.hitstopped;
        fxtemp.color1=sf::Color (255, 255, 255);
        fxtemp.code=1;
        effectslist.push_back(fxtemp);
        fxtemp.code=2;
        effectslist.push_back(fxtemp);
        fxtemp.color1=sf::Color (255, 255, 255);
        std::uniform_int_distribution<int> dis(0,360),dis2(1,5);
        fxtemp.len=P1.hitstopped;if(fxtemp.len<10&&fxtemp.len>0)fxtemp.len=10;
        for(short i=0;i<3;i++){
            fxtemp.code=3;fxtemp.dir=dis(gen);
            fxtemp.fxsize=dis2(gen);
            effectslist.push_back(fxtemp);
        }
        //some sort of lightning affect
        P1.hitcount--;
        P2.hitcount--;
        P1.movetype=0;P2.movetype=0;
        for(unsigned char i=1;i<64;i++){P1.cancel[i]=true;P2.cancel[i]=true;}
        hitsfxlist.push_back(13);
        hsfxx.push_back((bgx+overlap[0]-128.f)/256.f);
        }
    if(projcheck)
        for(short i=0;i<P2.proj.size();i++){
            if(P2.proj[i].hit){
                P1.attack.kback=P2.proj[i].kback;
                if(P2.proj[i].right)P1.attack.kback*=-1;
                P1.attack.grab[0]=0;
                P1.attack.grab[1]=0;
                P1.attack.movetype=P2.proj[i].movetype;
                P1.attack.blockstun=P2.blockstun;
                P1.attack.kdown=P2.proj[i].knockdown;
                P1.attack.hitstun=P2.proj[i].hitstun;
                P1.attack.blockstun=P2.proj[i].blockstun;
                P1.attack.launch=P2.proj[i].launch;

                //P2.proj[i].hitstopped=P1.hitstopped;
                break;
            }
        }
    #undef P1
    #undef P2
}

void keypresscheck(sf::Keyboard::Key keycode,char *key){
    if(screenfocused&&sf::Keyboard::isKeyPressed(keycode)){if(*key=='0')*key='2';else if(*key=='2')*key='1';}else *key='0';
}
void macrokeypresscheck(sf::Keyboard::Key keycode,sf::Keyboard::Key keycode2,char *key){
    if(screenfocused&&(sf::Keyboard::isKeyPressed(keycode)||sf::Keyboard::isKeyPressed(keycode2))){if(*key=='0')*key='2';else if(*key=='2')*key='1';}else *key='0';
}

bool cmdcheck(int playercode,int len,char s[][5]){
    //s[][0]==num,s[][1]==u,s[][2]==i,s[][3]==o,s[][4]==k
    short temp=0;
    for(int j=0;j<15;j++){
        char dir,u,i,o,k;
        bool skip=false;
        if(playercode==1)dir=dirkeys[j],u=ukey[j],i=ikey[j],o=okey[j],k=kkey[j];
        else if(playercode==2)dir=dirkeys2[j],u=ukey2[j],i=ikey2[j],o=okey2[j],k=kkey2[j];
        //if(u=='1')u='0';if(i=='1')i='0';if(o=='1')o='0';if(k=='1')k='0';
        if(s[temp][0]=='0'&&(dir=='5'||dir==s[temp+1][0])){s[temp][0]=dir;skip=true;}

        if((dir!=s[temp][0]&&dir!=s[temp-1][0]))break;
        if(dir==s[temp][0]&&u==s[temp][1]&&i==s[temp][2]&&o==s[temp][3]&&k==s[temp][4]){temp++;if(skip)temp++;}
        if(temp>=len)break;
    }
    if(temp>=len)return true;
    else return false;

}

int chooseaction(short character,short previousact,int playercode, bool air, char keyinput[], float meter){
    char c236[4][5]={{'0','0','0','0','0'},{'6','0','0','0','0'},{'3','0','0','0','0'},{'2','0','0','0','0'}},
        c214[4][5]={{'0','0','0','0','0'},{'4','0','0','0','0'},{'1','0','0','0','0'},{'2','0','0','0','0'}},
        c623[4][5]={{'0','0','0','0','0'},{'3','0','0','0','0'},{'2','0','0','0','0'},{'6','0','0','0','0'}},
        c323[4][5]={{'0','0','0','0','0'},{'3','0','0','0','0'},{'2','0','0','0','0'},{'3','0','0','0','0'}},
        c626[4][5]={{'0','0','0','0','0'},{'6','0','0','0','0'},{'2','0','0','0','0'},{'6','0','0','0','0'}},
        c636[4][5]={{'0','0','0','0','0'},{'6','0','0','0','0'},{'3','0','0','0','0'},{'6','0','0','0','0'}},
        c63236[6][5]={{'0','0','0','0','0'},{'6','0','0','0','0'},{'3','0','0','0','0'},{'2','0','0','0','0'},{'3','0','0','0','0'},{'6','0','0','0','0'}},
        c6236[5][5]={{'0','0','0','0','0'},{'6','0','0','0','0'},{'3','0','0','0','0'},{'2','0','0','0','0'},{'6','0','0','0','0'}};
            if(!air){
                if(keyinput[0]=='1'||keyinput[0]=='2'||keyinput[0]=='3'){//crouching actions
                    if((keyinput[1]=='2'&&keyinput[2]=='2')||(keyinput[2]=='2'&&keyinput[3]=='2')||(keyinput[1]=='2'&&keyinput[3]=='2')){
                        return 25;//grab
                    }
                    else if(keyinput[3]=='2'){
                        c623[0][3]='2';c323[0][3]='2';
                        if(cmdcheck(playercode,4,c623)||cmdcheck(playercode,4,c323))return 23;//special B strong
                        else return 14;//strong normal
                        c623[0][3]='0';c323[0][3]='0';
                    }
                    else if(keyinput[2]=='2'){
                        c623[0][2]='2';c323[0][2]='2';
                        if(cmdcheck(playercode,4,c623)||cmdcheck(playercode,4,c323))return 22;//special B middle
                        else return 13;//middle normal
                        c623[0][2]='0';c323[0][2]='0';
                    }
                    else if(keyinput[1]=='2'){
                        c623[0][1]='2';c323[0][1]='2';
                        if(cmdcheck(playercode,4,c623)||cmdcheck(playercode,4,c323))return 21;//special B weak
                        else return 12;//weak normal
                        c623[0][1]='0';c323[0][1]='0';
                    }
                    else if(keyinput[4]=='2'){
                        c623[0][4]='2';c323[0][4]='2';
                        if(cmdcheck(playercode,4,c623)||cmdcheck(playercode,4,c323))return 24;//special B gimmick
                        c623[0][4]='0';c323[0][4]='0';
                        if(character==2&&meter>50)return 32;//super
                        else return 15;//gimmick
                    }
                    else if(keyinput[0]=='1')return 20;//crouching block
                    else return 11;//crouch
                }
                else{
                    //grounded actions
                    if(keyinput[1]=='2'&&keyinput[2]=='2'&&keyinput[3]=='2'&&keyinput[4]=='2')return 37;//taunt
                    if((keyinput[1]=='2'&&keyinput[2]=='2')||(keyinput[2]=='2'&&keyinput[3]=='2')||(keyinput[1]=='2'&&keyinput[3]=='2')){
                        if(character==0){
                            c214[0][1]='2';c214[0][2]='2';c214[0][3]='2';
                            if(cmdcheck(playercode,4,c214)&&meter>=100)return 32;//super
                            c214[0][3]='0';
                            if(cmdcheck(playercode,4,c214)&&meter>=100)return 32;//super
                            c214[0][3]='2';c214[0][1]='0';
                            if(cmdcheck(playercode,4,c214)&&meter>=100)return 32;//super
                            c214[0][1]='0';c214[0][2]='0';
                            if(cmdcheck(playercode,4,c214)&&meter>=100)return 32;//super
                            c214[0][1]='0';c214[0][2]='0';c214[0][3]='0';
                        }
                        else if(character==2){
                            c236[0][1]='2';c236[0][2]='2';c236[0][3]='2';
                            if(cmdcheck(playercode,4,c236)&&meter>=100)return 38;//super2
                            c236[0][3]='0';
                            if(cmdcheck(playercode,4,c236)&&meter>=100)return 38;//super2
                            c236[0][3]='2';c236[0][1]='0';
                            if(cmdcheck(playercode,4,c236)&&meter>=100)return 38;//super2
                            c236[0][1]='0';c236[0][2]='0';
                            if(cmdcheck(playercode,4,c236)&&meter>=100)return 38;//super2
                            c236[0][1]='0';c236[0][2]='0';c236[0][3]='0';
                        }
                        return 25;//grab
                    }
                    if(keyinput[3]=='2'){
                        c214[0][3]='2';c236[0][3]='2';c636[0][3]='2';c626[0][3]='2';c63236[0][3]='2';c6236[0][3]='2';
                        if(cmdcheck(playercode,4,c214))return 30;//special C strong
                        else if(cmdcheck(playercode,4,c636)||cmdcheck(playercode,6,c63236)||cmdcheck(playercode,4,c626)||cmdcheck(playercode,5,c6236))return 23;//special B strong
                        else if(cmdcheck(playercode,4,c236))return 18;//special A strong
                        else if(keyinput[1]=='2'||keyinput[2]=='2')return 25;//grab
                        else return 10;//strong normal
                        c214[0][3]='0';c236[0][3]='0';c636[0][3]='0';c626[0][3]='0';c63236[0][3]='0';c6236[0][3]='0';
                    }
                    else if(keyinput[2]=='2'){
                        c214[0][2]='2';c236[0][2]='2';c636[0][2]='2';c626[0][2]='2';c63236[0][2]='2';c6236[0][2]='2';
                        if(cmdcheck(playercode,4,c214))return 29;//special C middle
                        else if(cmdcheck(playercode,4,c636)||cmdcheck(playercode,6,c63236)||cmdcheck(playercode,4,c626)||cmdcheck(playercode,5,c6236))return 22;//special B middle
                        else if(cmdcheck(playercode,4,c236))return 17;//special A middle
                        else return 9;//middle normal
                        c214[0][2]='0';c236[0][2]='0';c636[0][2]='0';c626[0][2]='0';c63236[0][2]='0';c6236[0][2]='0';
                    }
                    else if(keyinput[1]=='2'){
                        c214[0][1]='2';c236[0][1]='2';c636[0][1]='2';c626[0][1]='2';c63236[0][1]='2';c6236[0][1]='2';
                        if(cmdcheck(playercode,4,c214))return 28;//special C weak
                        else if(cmdcheck(playercode,4,c636)||cmdcheck(playercode,6,c63236)||cmdcheck(playercode,4,c626)||cmdcheck(playercode,5,c6236))return 21;//special B weak
                        else if(cmdcheck(playercode,4,c236))return 16;//special A weak
                        else return 8;//weak normal
                        c214[0][1]='0';c236[0][1]='0';c636[0][1]='0';c626[0][1]='0';c63236[0][1]='0';c6236[0][1]='0';
                    }
                    else if(keyinput[4]=='2'){
                        c214[0][4]='2';c236[0][4]='2';c636[0][4]='2';c626[0][4]='2';c63236[0][4]='2';c6236[0][4]='2';
                        if(cmdcheck(playercode,4,c214))return 31;//special C gimmick
                        else if(cmdcheck(playercode,4,c636)||cmdcheck(playercode,6,c63236)||cmdcheck(playercode,4,c626)||cmdcheck(playercode,5,c6236))return 24;//special B gimmick
                        else if(cmdcheck(playercode,4,c236))return 19;//special A gimmick
                        else return 15;//gimmick
                        c214[0][4]='0';c236[0][4]='0';c636[0][4]='0';c626[0][4]='0';c63236[0][4]='0';c6236[0][4]='0';
                    }
                    else if(keyinput[0]=='4'){
                        char temp[3][5]={{'4','0','0','0','0'},{'5','0','0','0','0'},{'4','0','0','0','0'}};
                        if(cmdcheck(playercode,3,temp))return 2;//leftdash
                        else return 1;//leftwalk
                    }
                    else if(keyinput[0]=='6'){
                        char temp[3][5]={{'6','0','0','0','0'},{'5','0','0','0','0'},{'6','0','0','0','0'}};
                        if(cmdcheck(playercode,3,temp)||previousact==4)return 4;//rightdash
                        else return 3;//rightwalk
                    }
                    else if(keyinput[0]=='8')return 5;//upjump
                    else if(keyinput[0]=='7')return 6;//leftjump
                    else if(keyinput[0]=='9')return 7;//rightjump
                    else return 0;//neutural

                }
            }
            else{
                //jump actions
                if(keyinput[1]=='2'){
                    c236[0][1]='2';
                    if(cmdcheck(playercode,4,c236)&&character==2)return 16;//special A weak
                    else return 8;//weak normal
                    c236[0][1]='0';
                }
                else if(keyinput[2]=='2'){
                    c236[0][2]='2';
                    if(cmdcheck(playercode,4,c236))return 17;//special A middle
                    else return 9;//middle normal
                    c236[0][2]='0';
                }
                else if(keyinput[3]=='2'){
                    c236[0][3]='2';
                    if(cmdcheck(playercode,4,c236))return 18;//special A heavy
                    else return 10;//strong normal
                    c236[0][3]='0';
                }
                else if(keyinput[4]=='2'){
                    c236[0][4]='2';
                    if(cmdcheck(playercode,4,c236))return 19;//special A gimmick
                    else return 15;//gimmick
                    c236[0][4]='0';
                }
                return 0;
                }
}

void cpuopponent(char input[],unsigned char *currentmove,player *p1,player *p2,unsigned char difficulty,unsigned char aggressive){
    #define P1 (*p1)
    #define P2 (*p2)
    if(!cpudir.empty()){
        input[0]=cpudir[0];
        input[1]=cpuu[0];
        input[2]=cpui[0];
        input[3]=cpuo[0];
        input[4]=cpuk[0];
        cpudir.pop_front();
        cpuu.pop_front();
        cpui.pop_front();
        cpuo.pop_front();
        cpuk.pop_front();
        if(cpudir.empty())*currentmove=0;
    }
    else{
    std::uniform_int_distribution<unsigned char> dis(0,255);
    switch(*currentmove){
        case 0:{//idle
            if(difficulty>=dis(gen)){//decide act
                bool preblock=false;
                unsigned char movetype;//-1=can't do anything,0=whiff cancelable,1=low,2=middle,3=overhead,4=unblockable
                if(P2.movetype>0&&(abs(int(P1.x-P2.x))<64)){preblock=true;movetype=P2.movetype;}
                if(!preblock)for(short i=0;i<P2.proj.size();i++)if(abs(int(P2.proj[i].x-P1.x))<64&&abs(int(P2.proj[i].y-P1.y))<64&&P2.proj[i].hitcount>0){preblock=true;movetype=P2.proj[i].movetype;break;}

                if(P1.comboed&&difficulty>=dis(gen)&&aggressive<=dis(gen)&&P1.meter>=200)*currentmove=6;//special
                else if(P1.comboed&&P2.grabstate==3&&difficulty>=dis(gen))*currentmove=8;//grab
                else if(preblock&&(movetype==3||movetype==2))*currentmove=1;//block
                else if(preblock&&movetype==1)*currentmove=9;//block
                else if(abs(int(P1.x-P2.x))<64){
                    if(P1.y>P2.y)*currentmove=5;//dragon punch special move
                    else if(abs(int(P1.y-P2.y))<48){
                        if(dis(gen)<127)*currentmove=8;//grab
                        else{
                            if(64<dis(gen))input[0]='5';
                            else input[0]='2';
                            *currentmove=2;}//attack
                        }
                    }
                else if(dis(gen)<=aggressive)input[0]='6';//move forward
                else if(dis(gen)<=aggressive)input[0]='9';//jump forward
                else if(dis(gen)>=aggressive&&dis(gen)<=difficulty)*currentmove=3;//projectile
                else {*currentmove=0;}
            }
            else {*currentmove=0;input[0]='5';}
            break;
        }
        case 1:{//block
            input[0]='4';
            *currentmove=0;
            break;
        }
        case 2:{//basic chain combo
            if(input[1]=='2'){input[1]='0';input[2]='2';}
            else if(input[2]=='2'){input[2]='0';input[3]='2';}
            else if(input[3]=='2'){
                input[3]='0';
                if(difficulty>=dis(gen))*currentmove=4;//clap special
                else if(difficulty>=dis(gen))*currentmove=5;//dragon punch special
                else if(difficulty>=dis(gen)&&dis(gen)<=aggressive&&P1.meter>=100)*currentmove=7;//super
                else *currentmove=0;
                }
            else input[1]='2';
            break;
        }
        case 3:{//projectile
            cpudir.push_back('2');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('1');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('4');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('4');cpuu.push_back('0');cpui.push_back('2');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('5');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            break;
        }
        case 4:{//clap special
            cpudir.push_back('2');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('3');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('6');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            unsigned char temp=dis(gen);
            if(temp<80){cpudir.push_back('6');cpuu.push_back('2');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');}
            else if(temp<160){cpudir.push_back('6');cpuu.push_back('0');cpui.push_back('2');cpuo.push_back('0');cpuk.push_back('0');}
            else{cpudir.push_back('6');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('2');cpuk.push_back('0');}
            cpudir.push_back('5');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            break;
        }
        case 5:{//dragon punch special
            cpudir.push_back('6');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('2');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('3');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            unsigned char temp=dis(gen);
            if(temp<80){cpudir.push_back('3');cpuu.push_back('2');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');}
            else if(temp<160){cpudir.push_back('3');cpuu.push_back('0');cpui.push_back('2');cpuo.push_back('0');cpuk.push_back('0');}
            else{cpudir.push_back('3');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('2');cpuk.push_back('0');}
            cpudir.push_back('5');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            break;
        }
        case 6:{//special
            input[0]='5';
            if(input[4]=='2'){
                input[4]='0';*currentmove=0;
                }
            else input[4]='2';
            break;
        }
        case 7:{//super
            cpudir.push_back('2');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('1');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('4');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            cpudir.push_back('4');cpuu.push_back('0');cpui.push_back('2');cpuo.push_back('2');cpuk.push_back('0');
            cpudir.push_back('5');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            break;
        }
        case 8:{//grab
            cpudir.push_back('5');cpuu.push_back('2');cpui.push_back('2');cpuo.push_back('2');cpuk.push_back('0');
            cpudir.push_back('5');cpuu.push_back('0');cpui.push_back('0');cpuo.push_back('0');cpuk.push_back('0');
            break;
        }
        case 9:{//low block
            input[0]='1';
            *currentmove=0;
            break;
        }
    }
    }
    #undef P1
    #undef P2
}

void inputcode(char pinput[],sf::Keyboard::Key upkey,sf::Keyboard::Key leftkey,sf::Keyboard::Key downkey,sf::Keyboard::Key rightkey,sf::Keyboard::Key lightkey,
               sf::Keyboard::Key mediumkey,sf::Keyboard::Key heavykey,sf::Keyboard::Key specialkey,sf::Keyboard::Key grabkey,short px,short enemyx){
    bool w=false,a=false,s=false,d=false;
    if(screenfocused&&sf::Keyboard::isKeyPressed(upkey))w=true;
    if(screenfocused&&sf::Keyboard::isKeyPressed(leftkey))a=true;
    if(screenfocused&&sf::Keyboard::isKeyPressed(downkey))s=true;
    if(screenfocused&&sf::Keyboard::isKeyPressed(rightkey))d=true;
    if(w&&s){w=true;s=false;}
    if(a&&d){a=false;d=false;}

    macrokeypresscheck(lightkey,grabkey,&pinput[1]);
    macrokeypresscheck(mediumkey,grabkey,&pinput[2]);
    macrokeypresscheck(heavykey,grabkey,&pinput[3]);
    keypresscheck(specialkey,&pinput[4]);
    if(w&&!a&&!s&&!d)pinput[0]='8';
    else if(!w&&a&&!s&&!d)pinput[0]='4';
    else if(!w&&!a&&s&&!d)pinput[0]='2';
    else if(!w&&!a&&!s&&d)pinput[0]='6';
    else if(w&&a&&!s&&!d)pinput[0]='7';
    else if(!w&&a&&s&&!d)pinput[0]='1';
    else if(!w&&!a&&s&&d)pinput[0]='3';
    else if(w&&!a&&!s&&d)pinput[0]='9';
    else pinput[0]='5';
    if(px>enemyx){
        if(pinput[0]=='7')pinput[0]='9';
        else if(pinput[0]=='9')pinput[0]='7';
        else if(pinput[0]=='4')pinput[0]='6';
        else if(pinput[0]=='6')pinput[0]='4';
        else if(pinput[0]=='3')pinput[0]='1';
        else if(pinput[0]=='1')pinput[0]='3';
    }
}

void windowset(sf::RenderWindow& window,bool *gamequit){
    while (std::optional event = window.pollEvent()){
            if (event->is<sf::Event::Closed>()){window.close();*gamequit=true;}
            if(event->is<sf::Event::FocusGained>())screenfocused=true;
            else if(event->is<sf::Event::FocusLost>())screenfocused=false;

            if (auto resized = event->getIf<sf::Event::Resized>()){
                float x,y;
                if((resized->size.x)>(resized->size.y)){
                    y=240;
                    x=(float(resized->size.x)/float(resized->size.y)*240.f);
                }
                else{
                    x=256;
                    y=(float(resized->size.y)/float(resized->size.x)*256.f);
                }
                sf::FloatRect visibleArea({(-x+256.f)/2,(-y+240.f)/2},{x,y});

                window.setView(sf::View(visibleArea));
            }
    }
}

void boolfill(bool *arr,bool value,short a[]){
    short temp=0;
    for(int i=0;i<64;i++){
        if(a[temp]==i){arr[i]=value;temp++;}
        else if(value)arr[i]=false;
        else arr[i]=true;
    }
}

void projectiledata(player *p,short superstop,short enemycharacter,short enemygimmick[]){
    #define P (*p)
    for(short i=0;i<P.proj.size();i++){
        if(superstop==0){
            if(P.proj[i].hit){P.proj[i].hit=false;P.proj[i].hitcount--;}
            if(P.proj[i].x<-128||P.proj[i].x>384||P.proj[i].y<0||P.proj[i].y>240){
                if(P.character==2&&P.proj[i].y>210){P.proj[i].y=210;P.proj[i].hitcount=0;}
                else P.proj.erase(P.proj.begin()+i);return;
                }
            if(P.proj[i].hitcount<=0){
                if(P.proj[i].endanim.empty()){P.proj.erase(P.proj.begin()+i);return;}
                else{
                    P.proj[i].dmg=0;P.proj[i].hitstop=0;P.proj[i].hitstun=0;P.proj[i].blockstun=0;
                    if(P.character==0){
                        std::uniform_int_distribution<int> dis(-150,-30),dis2(-4,4);
                        effects temp;
                        temp.code=0;
                        temp.frame=0;
                        temp.len=16;
                        temp.color1=(sf::Color(170*((colorpalettes[P.color][0]/4)%2) + 85*(colorpalettes[P.color][0]/8), (1-(colorpalettes[P.color][0]==6)/3.0)*170*((colorpalettes[P.color][0]/2)%2) + 85*(colorpalettes[P.color][0]/8), 170*(colorpalettes[P.color][0]%2) + 85*(colorpalettes[P.color][0]/8)));
                        for(short j=0;j<8;j++){
                            if(P.proj[i].right){temp.dir=270+dis(gen);temp.x=P.proj[i].x+8+dis2(gen);}
                            else{temp.dir=270-dis(gen);temp.x=P.proj[i].x-8+dis2(gen);}

                            temp.y=P.proj[i].y+4+dis2(gen);
                            effectslist.push_back(temp);
                        }
                        P.proj[i].frame=P.proj[i].endanim[0];
                        P.proj[i].endanim.pop_front();
                    }
                    else if(P.character==2){
                        if(P.proj[i].hitcount==0){
                            if(P.proj[i].right)P.proj[i].movex=-2;
                            else P.proj[i].movex=2;
                            P.proj[i].code=2;
                            P.proj[i].movey=-3;
                            P.proj[i].hitcount=-1;
                            P.proj[i].animloop=0;
                        }
                        else{
                            P.proj[i].movey+=0.5;
                            if(enemycharacter==2&&(enemygimmick[0]>0||(enemygimmick[1]>0&&(P.character!=2||P.gimmick[1]==0)))){
                                P.proj[i].x+=P.proj[i].movex/2;
                                P.proj[i].y+=P.proj[i].movey/2;
                            }
                            else{
                                P.proj[i].x+=P.proj[i].movex;
                                P.proj[i].y+=P.proj[i].movey;
                            }
                            P.proj[i].frame=P.proj[i].endanim[P.proj[i].animloop];
                            if(P.proj[i].animloop==0)P.proj[i].animloop=1;
                            else P.proj[i].animloop=0;
                            if(P.proj[i].y>210){P.proj[i].endanim.erase(P.proj[i].endanim.begin(),P.proj[i].endanim.end());/*soundfxlist.push_back(7);*/}
                        }
                    }
                }
            }
            else if(P.proj[i].hitstopped>0&&superstop==0)P.proj[i].hitstopped-=1;
            else{
                P.proj[i].existed++;
                if(enemycharacter==2&&(enemygimmick[0]>0||(enemygimmick[1]>0&&(P.character!=2||P.gimmick[1]==0)))){
                    if(P.proj[i].right)P.proj[i].x+=P.proj[i].movex/2;
                    else P.proj[i].x-=P.proj[i].movex/2;
                    P.proj[i].y+=P.proj[i].movey/2;
                }
                else{
                    if(P.proj[i].right)P.proj[i].x+=P.proj[i].movex;
                    else P.proj[i].x-=P.proj[i].movex;
                    P.proj[i].y+=P.proj[i].movey;
                }
                P.proj[i].animloop+=1;
                if(P.proj[i].looplen<=P.proj[i].animloop)P.proj[i].animloop=0;
                P.proj[i].frame=P.proj[i].loopanim[P.proj[i].animloop];
                if(P.character==0){
                    std::uniform_int_distribution<int> dis(-120,-60),dis2(-4,4);
                    effects temp;
                    temp.code=0;
                    temp.len=8;
                    temp.color1=(sf::Color(170*((colorpalettes[P.color][0]/4)%2) + 85*(colorpalettes[P.color][0]/8), (1-(colorpalettes[P.color][0]==6)/3.0)*170*((colorpalettes[P.color][0]/2)%2) + 85*(colorpalettes[P.color][0]/8), 170*(colorpalettes[P.color][0]%2) + 85*(colorpalettes[P.color][0]/8)));
                    for(short j=0;j<8;j++){
                        if(P.proj[i].right)temp.dir=270+dis(gen);
                        else temp.dir=270-dis(gen);
                        temp.x=P.proj[i].x+dis2(gen);
                        temp.y=P.proj[i].y+4+dis2(gen);
                        effectslist.push_back(temp);
                    }
                }
                else if(P.character==2){
                    if(P.proj[i].y>210){P.proj[i].y=210;P.proj[i].hitcount=0;}
                    if(P.proj[i].code==3){
                        if(enemycharacter==2&&(enemygimmick[0]>0||(enemygimmick[1]>0&&(P.character!=2||P.gimmick[1]==0)))){
                            P.proj[i].movey+=0.125;
                        }
                        else{
                            P.proj[i].movey+=0.25;
                            if(P.proj[i].looplen>2){
                                if(P.proj[i].right)P.proj[i].x-=P.proj[i].movex*4/5;
                                else P.proj[i].x+=P.proj[i].movex*4/5;
                                P.proj[i].movey-=0.25*4/5;
                                P.proj[i].y-=P.proj[i].movey*4/5;
                            }
                        }
                    }
                    if(P.proj[i].code==2&&P.proj[i].existed>90){
                        P.proj[i].movex+=0.5;
                        if(P.proj[i].movey!=0)P.proj[i].movey+=0.25;
                    }
                    if(P.proj[i].code==2&&P.proj[i].existed==90){
                        P.proj[i].dmg=28;
                        P.proj[i].hitstun=16;P.proj[i].blockstun=5;
                        P.proj[i].looplen=2;//make the animation get faster later
                        P.proj[i].loopanim[0]=42;
                        P.proj[i].loopanim[1]=43;
                    }
                }
            }
        }
    }
    #undef P
}

void characterdata(player *p,float enemyx,float enemyy,float *enemypaway,short enemygstate,short *superstop,short enemycharacter,short enemygimmick[],bool preblock){
    #define P (*p)
    float walkspeed,runspeed,jumprise,jumpfall;
    if(P.character==0){walkspeed=3;runspeed=6;jumprise=-12;jumpfall=0.8;}
    else if(P.character==2){walkspeed=2.2;runspeed=5;jumprise=-11;jumpfall=0.7;if(P.gimmick[0]>0)P.gimmick[0]--;if(P.gimmick[1]>0&&P.meter<=0){P.gimmick[1]=0;P.meter=0;}else if(P.gimmick[1]>0){P.meter-=2;P.gimmick[1]--;}}
    if(P.iframes>0)P.iframes--;
    if(enemycharacter==2&&(enemygimmick[0]>0||(enemygimmick[1]>0&&(P.character!=2||P.gimmick[1]==0)))){
            walkspeed/=2;runspeed/=2;jumpfall/=2;
    }

    if(P.kdowned==1&&P.animq.size()<28&&!P.comboed&&P.act==1&&P.hp>0){//quick rise
        P.slide=true;
        if(P.right)P.jumpx=-5;else P.jumpx=5;
        P.animq.clear();
        for(short i=0;i<10;i++){P.animq.push_back(8);}
        P.kdowned=0;combo=0;P.iframes=10;
        P.col=1;
    }
    if(P.hit){//hit code
        P.hit=false;
        if(P.counter){for(short i=0;i<64;i++)if(P.cancel[i]){P.act=i;break;}}
        else{
        P.animq.clear();P.hitboxanim.clear();P.atkfx.clear();
        P.movetype=-1;P.grab[0]=0;P.grab[1]=0;P.grabstate=-1;P.landdelay=0;P.movewaitx=-1;P.movewaity=-1;
        P.mgain=0;P.super=false;P.wallcrash=false;
        if(P.air&&P.attack.launch==0){
                P.jumpy=P.attack.kback/6*5*(comboscaling+100)/200;
                if(P.jumpy>0)P.jumpy*=-1;
        }
        else P.jumpy=0;
        if(P.hp<=0)P.block=-1;
        if(((P.attack.movetype==1||P.attack.movetype==2)&&P.block==1)||((P.attack.movetype==3||P.attack.movetype==2)&&P.block==0)||P.block==2){//blocked
            P.slide=true;
            P.attack.kback=roundf(P.attack.kback*4/5);
            if(P.block==2){
                if(P.attack.movetype==1)P.block=1;
                else P.block=0;
            }
            if(P.block==0)for(short i=0;i<+P.attack.blockstun;i++){
                if(P.character==2)P.animq.push_back(18);
                else P.animq.push_back(32);
            }
            if(P.block==1)for(short i=0;i<+P.attack.blockstun;i++)P.animq.push_back(33);
            P.block=2;
        }
        else{//not blocked
            if(P.attack.launch>0){P.jumpy=-P.attack.launch*(comboscaling+100)/200;P.air=true;}
            if(P.air||(P.attack.grab[0]!=0||P.attack.grab[1]!=0))P.slide=false;
            else P.slide=true;
            if(P.attack.wallcrash){P.wallcrashed=true;P.slide=false;}
            P.comboed=true;
            if(P.attack.grab[0]!=0||P.attack.grab[1]!=0)P.col=3;
            else if(P.col==3)P.col=0;
            if(P.col==1)for(short i=0;i<+P.attack.hitstun;i++)P.animq.push_back(53);
            else if(P.frame==P.hurtframes[5]){
                for(short i=0;i<+P.attack.hitstun;i++)P.animq.push_back(P.hurtframes[6]);
            }
            else if(P.frame==P.hurtframes[7]){
                for(short i=0;i<+P.attack.hitstun;i++)P.animq.push_back(P.hurtframes[8]);
            }
            else for(short i=0;i<+P.attack.hitstun;i++){
                if(P.character==2){
                    if(i<2)P.animq.push_back(16);
                    else P.animq.push_back(57);}
                else P.animq.push_back(9);
            }
            if(P.attack.kdown==2||P.hp<=0)P.kdowned=2;
            else if(P.attack.kdown==1||P.attack.launch>0/*||P.air*/)P.kdowned=1;
            else P.kdowned=0;
        }
        if(((P.x<-110&&P.attack.kback>0)||(P.x>360&&P.attack.kback<0))&&(P.attack.grab[0]==0&&P.attack.grab[1]==0)&&P.attack.pushaway){//wall pushaway code
                if(P.attack.kback>0)P.pushaway=P.attack.kback;
                else P.pushaway=-P.attack.kback;
                P.pushaway+=roundf(P.attack.launch/2);
        }
        else if(P.attack.grab[0]==0&&P.attack.grab[1]==0){//knockback code
                if(P.air&&P.attack.launch==0){
                    P.jumpx=-roundf(P.attack.kback/3);
                }
                else{
                    P.jumpx=-P.attack.kback;
                }
        }
        short temp[1]={-1};boolfill(P.cancel,true,temp);
        }
    }
    else if(P.animq.empty()&&P.movewaitx==-1&&P.movewaity==-1){
        if(P.comboed&&P.kdowned>0&&!P.air){
            P.col=2;P.comboed=false;
            if(P.x<enemyx)P.right=true;
            else P.right=false;
            if(P.character==0)for(short i=0;i<32;i++){P.animq.push_back(19);}
            else for(short i=0;i<32;i++){P.animq.push_back(74);}
        }
        else if(P.kdowned>0&&P.hp>0&&!P.air){
            for(short i=0;i<3;i++){P.animq.push_back(8);}
            P.kdowned=0;combo=0;P.iframes=3;
        }
        else {
            short temp[1]={-1};boolfill(P.cancel,true,temp);
            if(!P.neutural&&!P.air){P.jumpx=0;P.jumpy=0;}
            P.neutural=true;P.hitstun=0;P.blockstun=0;P.kback=0;P.hit=false;
            P.slide=false;P.hitcount=0;P.dmg=0;P.launch=0;P.kdown=0;P.mgain=0;P.super=false;
            P.wallcrash=false;P.movetype=-1;P.counter=false;
            P.block=-1;P.grab[0]=0;P.grab[1]=0;P.grabstate=-1;
            if(P.comboed){combo=0;P.comboed=false;}
            if(!P.air){if(P.x<enemyx)P.right=true;else P.right=false;}
        }
    }

    if(P.wallcrashed&&(P.x+bgx>=240||P.x+bgx<=16)){
        P.jumpx*=-1;
        P.jumpy=-11;
        P.movewaitx=12;
        P.movewaity=11;
        P.wallcrashed=false;
        effects temp;
        temp.color1=sf::Color (255, 255, 255);
        temp.len=4;
        temp.x=P.x;
        temp.y=P.y;
        std::uniform_int_distribution<int> dis(0,360),dis2(3,5);
        temp.code=0;
        temp.len=16;
        for(short i=0;i<32;i++){
            temp.dir=dis(gen);
            temp.speed=dis2(gen);
            effectslist.push_back(temp);
        }
    }

    if(enemygstate==3&&P.act==25){
            P.grabstate=0;
            P.slide=true;
            if(P.x<enemyx)P.jumpx=-8;
            else P.jumpx=4;
            P.pushaway=8;
            P.animq.clear();P.hitboxanim.clear();P.atkfx.clear();
            for(short i=0;i<20;i++)P.animq.push_back(32);
        }

    if(P.grabstate==1&&!P.whiff)P.grabstate=3;
    if(P.grabstate==2&&!P.whiff)P.grabstate=4;
    if(P.grabstate==3){
            if(enemygstate==0){
                P.grabstate=-1;
                P.animq.clear();P.hitboxanim.clear();P.atkfx.clear();
                for(short i=0;i<20;i++)P.animq.push_back(32);
            }
            else if(P.animq.size()<16){
                if(P.act==1)P.act=27;
                else P.act=26;
            }
    }
    if(P.grabstate==4){
        if(P.animq.size()<P.blockstun)for(short i=0;i<64;i++)if(P.cancel[i]){P.act=i;break;}
    }
    if((P.comboed&&P.act==15&&(P.meter>=200||(P.meter>=100&&P.block==2)))||(P.block==2&&P.act==25)||(!P.hit&&((P.animq.empty()&&P.movewaitx==-1&&P.movewaity==-1)||((P.cancel[P.act]==true)&&((!P.whiff)||P.movetype==0||P.grabstate==3||P.grabstate==4))))){
        P.moveact=P.act;
        if(P.cancel[P.act]==true||(P.comboed&&P.act==15)||(P.block==2&&P.act==25)){
            P.buffer=0;P.slide=false;P.hitstun=0;P.blockstun=0;P.kback=0;P.dmg=0;P.launch=0;P.kdown=0;P.movewaitx=-1;P.movewaity=-1;
            P.movetype=-1;P.grab[0]=0;P.grab[1]=0;P.landdelay=0;if(!P.air){P.jumpx=0;P.jumpy=0;}P.mgain=0;P.super=false;
            short temp[0]={};boolfill(P.cancel,true,temp);P.cancel[0]=false;P.iframes=0;P.wallcrash=false;
            P.animq.clear();P.hitboxanim.clear();P.atkfx.clear();P.counter=false;
        }

        if(P.act==1)P.block=0;
        else if(P.act==20)P.block=1;
        else if((P.comboed&&P.act==15&&P.block==2)||(P.block==2&&P.act==25))P.block=2;
        else P.block=-1;
        switch (P.character){
        case 0:{
            switch (P.act){
            case 0:{//neutural
                if(!P.air){
                    if(P.x<enemyx)P.right=true;
                    else P.right=false;
                    memcpy(P.anim,animlib[P.character][0],sizeof(animlib[P.character][0]));
                }
                P.col=0;P.frame=0;P.block=-1;
                break;
                }
            case 1:{//left walk
                P.col=0;
                if(preblock){
                    P.animq.push_back(32);
                    }
                else{
                    memcpy(P.anim,animlib[P.character][15],sizeof(animlib[P.character][0]));
                    if(P.x<enemyx)P.right=true;else P.right=false;
                    if(P.right)P.x-=walkspeed;else P.x+=walkspeed;
                    }
                
                break;
                }
            case 2:{P.col=0;P.iframes=3;P.air=true;P.jumpy=-2.0;if(P.right)P.jumpx=-7;else P.jumpx=7;P.landdelay=7;}//left dash
            case 3:{//right walk
                P.col=0;
                memcpy(P.anim,animlib[P.character][17],sizeof(animlib[P.character][0]));
                if(P.x<enemyx)P.right=true;else P.right=false;
                if(P.right)P.x+=walkspeed;else P.x-=walkspeed;
                break;
                }
            case 4:{//right dash
                P.col=0;P.running=true;
                memcpy(P.anim,animlib[P.character][17],sizeof(animlib[P.character][0]));
                if(P.x<enemyx)P.right=true;else P.right=false;
                if(P.right)P.x+=runspeed;else P.x-=runspeed;
                break;
            }
            case 5:{P.col=0;P.jumpy=jumprise;P.movewaity=4;P.animq.insert(P.animq.begin(),{8,8,8,43});P.landdelay=5;soundfxlist.push_back(7);sfxx.push_back((bgx+P.x-128.f)/256.f);break;}//up jump
            case 6:{P.col=0;P.jumpy=jumprise;P.movewaitx=4;P.movewaity=4;if(P.right)P.jumpx=-3;else P.jumpx=3;P.animq.insert(P.animq.begin(),{8,8,8,43});P.landdelay=3;soundfxlist.push_back(7);sfxx.push_back((bgx+P.x-128.f)/256.f);break;}//left jump
            case 7:{//right jump
                    P.col=0;P.movewaitx=4;P.movewaity=4;
                    if(P.running){if(P.right)P.jumpx=6;else P.jumpx=-6;P.jumpy=jumprise*2.f/3.f;}
                    else{if(P.right)P.jumpx=3;else P.jumpx=-3;P.jumpy=jumprise;}
                    P.animq.insert(P.animq.begin(),{8,8,8,43});P.landdelay=3;
                    soundfxlist.push_back(7);sfxx.push_back((bgx+P.x-128.f)/256.f);
                    break;
                    }
            case 8:{//u (light normal)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=2;P.hitstun=9;P.blockstun=3;P.dmg=12;P.movetype=3;P.landdelay=3;P.mgain=4;
                    P.animq.insert(P.animq.begin(),{43,43,45,45,46,46,46});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,10,10,10,10,10,10,10,10});
                    short temp[3]={8,9,10};boolfill(P.cancel,true,temp);
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=4;P.hitstun=9;P.blockstun=6;P.dmg=12;P.movetype=2;P.mgain=4;
                    P.animq.insert(P.animq.begin(),{1,1,1,2,2,2,1,1,1});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,1});
                    short temp[16]={8,9,10,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                }
                break;
                }
            case 9:{//i (middle normal)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=13;P.kback=3;P.hitstun=10;P.blockstun=4;P.dmg=25;P.movetype=3;P.landdelay=3;P.mgain=6;
                    P.animq.insert(P.animq.begin(),{3,4,5,5,5,6,7,7,7,7});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,2,2,2,2});
                    short temp[1]={10};boolfill(P.cancel,true,temp);
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=13;P.kback=5;P.hitstun=12;P.blockstun=5;P.slide=true;P.dmg=27;P.movetype=2;P.mgain=6;
                    P.animq.insert(P.animq.begin(),{3,4,5,5,5,5,5,6,7,7,7,7,7,6,5,5,4,4,3,3});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,2,2});
                    short temp[14]={10,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                    P.movewaitx=7;
                    if(P.right)P.jumpx=3;
                    else P.jumpx=-3;
                }
                break;
                }
            case 10:{//o (heavy normal)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=14;P.kback=3;P.hitstun=12;P.blockstun=6;P.dmg=33;P.movetype=3;P.landdelay=3;P.mgain=8;
                    P.animq.insert(P.animq.begin(),{3,4,5,5,5,5,5,6,7,7,7,7,7});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,2,2,2,2,2,2});
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=14;P.kback=6;P.hitstun=16;P.blockstun=8;P.slide=true;P.dmg=35;P.movetype=2;P.mgain=8;
                    P.animq.insert(P.animq.begin(),{26,26,27,27,28,28,28,28,28,29,30,31,31,31,31,31,31,31,30,29,28,28,28,27,27,27,26,26,26});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,6,6,6});
                    short temp[13]={16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                    P.movewaitx=9;
                    if(P.right)P.jumpx=5;
                    else P.jumpx=-5;
                }
                break;
                }
            case 11:{//crouch
                P.col=1;
                if(P.x<enemyx)P.right=true;else P.right=false;
                memcpy(P.anim,animlib[P.character][8],sizeof(animlib[P.character][8]));
                break;
            }
            case 20:{//crouch block
                P.col=1;
                if(preblock){
                    P.animq.push_back(33);
                    }
                else{
                    if(P.x<enemyx)P.right=true;else P.right=false;
                    memcpy(P.anim,animlib[P.character][8],sizeof(animlib[P.character][8]));
                    }
                break;
                }
            case 12:{//crouch u
                P.col=1;P.hitcount=1;P.hitstop=12;P.kback=5;P.hitstun=13;P.blockstun=9;P.dmg=11;P.movetype=1;P.mgain=4;
                P.animq.insert(P.animq.begin(),{10,10,10,11,11,11,10,10,10});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,3});
                short temp[16]={12,13,14,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                break;
                }
            case 13:{//crouch i
                P.col=1;P.hitcount=1;P.hitstop=13;P.kback=5;P.hitstun=14;P.blockstun=9;P.slide=true;P.dmg=24;P.movetype=1;P.mgain=6;
                P.animq.insert(P.animq.begin(),{38,38,39,39,39,39,40,41,42,42,42,41,41,40,40,39,39,39,38,38,38,38});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,9,9,9});
                short temp[14]={14,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                P.movewaitx=7;
                if(P.right)P.jumpx=2;
                else P.jumpx=-2;
                break;
                }
            case 14:{//crouch o
                P.col=1;P.hitcount=1;P.hitstop=14;P.kback=3;P.hitstun=12;P.blockstun=6;P.slide=true;P.movewaitx=7;P.dmg=35;P.launch=10;P.kdown=1;P.movetype=2;P.mgain=8;
                P.animq.insert(P.animq.begin(),{12,12,12,12,12,12,13,14,14,14,14,14,14,13,12,12,12,12,12});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,4,4,4,4,4});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                short temp[16]={5,6,7,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                break;
                }
            case 15:{//k (gimmick)
                if(P.comboed){
                effects temp;
                temp.color1=sf::Color (255, 85, 255);
                temp.code=2;
                temp.len=4;
                temp.x=P.x;
                temp.y=P.y;
                temp.speed=3;
                effectslist.push_back(temp);
                temp.speed=6;
                effectslist.push_back(temp);
                std::uniform_int_distribution<int> dis(0,360),dis2(3,5);
                temp.code=0;
                temp.len=16;
                for(short i=0;i<32;i++){
                    temp.dir=dis(gen);
                    temp.speed=dis2(gen);
                    effectslist.push_back(temp);
                }
                P.comboed=false;combo=0;P.iframes=3;
                if(P.block==2){P.block=-1;P.meter-=100;}
                else P.meter-=200;
                P.col=1;P.hitcount=1;P.hitstop=15;P.kback=3;P.hitstun=1;P.blockstun=1;P.slide=true;P.movewaitx=3;P.dmg=20;P.launch=10;P.kdown=1;P.movetype=2;
                P.animq.insert(P.animq.begin(),{12,12,12,13,14,14,14,14,14,14,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,4});
                if(P.right)P.jumpx=6;else P.jumpx=-6;
                }
                break;
                }
            case 16:{//special A (u)
                P.col=0;P.hitcount=1;P.hitstop=12;P.kback=7;P.hitstun=13;P.blockstun=9;P.slide=true;P.movewaitx=6;P.dmg=22;P.movetype=2;P.mgain=7;
                P.animq.insert(P.animq.begin(),{20,21,22,22,22,22,23,24,25,25,25,25,25,25,24,24,23,22,21,20,20});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,5,5});
                P.cancel[32]=true;
                if(P.right)P.jumpx=5;else P.jumpx=-5;
                break;
                }
            case 17:{//special A (i)
                P.col=0;P.hitcount=1;P.hitstop=13;P.kback=7;P.hitstun=14;P.blockstun=11;P.slide=true;P.movewaitx=9;P.dmg=29;P.kdown=2;P.movetype=2;P.mgain=8;
                P.animq.insert(P.animq.begin(),{20,20,21,21,22,22,22,22,22,23,24,25,25,25,25,25,25,24,24,23,23,22,22,21,21,20,20});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,5,5});
                P.cancel[32]=true;
                if(P.right)P.jumpx=6;else P.jumpx=-6;
                break;
                }
            case 18:{//special A (o)
                P.col=0;P.hitcount=1;P.hitstop=14;P.kback=0;P.hitstun=1;P.blockstun=12;P.slide=true;P.movewaitx=10;P.dmg=36;P.kdown=1;P.launch=11;P.movetype=2;P.mgain=9;
                P.animq.insert(P.animq.begin(),{20,20,20,21,21,22,22,22,22,22,23,24,25,25,25,25,25,25,24,24,23,23,22,22,22,21,21,20,20,20});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,5,5});
                short temp[4]={5,6,7,32};boolfill(P.cancel,true,temp);
                if(P.right)P.jumpx=7;else P.jumpx=-7;
                break;
                }
            case 19:{//special A (k)
                P.col=0;P.hitcount=1;P.slide=true;P.movewaitx=6;P.movetype=0;
                P.animq.insert(P.animq.begin(),{20,21,22,22,22,22,21,20});
                P.cancel[32]=true;
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
                }
            case 21:{//special B(u)
                P.col=0;P.hitcount=1;P.hitstop=13;P.kback=5;P.hitstun=5;P.blockstun=12;P.slide=true;P.movewaity=4;P.movewaitx=4;P.dmg=28;P.mgain=7;P.iframes=3;
                P.kdown=1;P.launch=8;P.movetype=2;P.jumpy=-11;P.landdelay=5;
                P.animq.insert(P.animq.begin(),{34,34,34,35,35,35,36,37,37,37,37,37,37,37,37,37});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,7,0,0,0,8,8,8,8,8,8,8,8,8});
                P.cancel[32]=true;
                if(P.right)P.jumpx=6;else P.jumpx=-6;
                break;
                }
            case 22:{//special B(i)
                P.col=0;P.hitcount=1;P.hitstop=14;P.kback=5;P.hitstun=5;P.blockstun=7;P.slide=true;P.movewaity=4;P.movewaitx=2;P.dmg=39;P.mgain=8;P.iframes=3;
                P.kdown=1;P.launch=9;P.movetype=2;P.jumpy=-12;P.landdelay=5;
                P.animq.insert(P.animq.begin(),{34,34,34,35,35,35,36,37,37,37,37,37,37,37,37,37,37});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,7,0,0,0,8,8,8,8,8,8,8,8,8,8});
                P.cancel[32]=true;
                if(P.right)P.jumpx=7;else P.jumpx=-7;
                break;
                }
            case 23:{//special B(o)
                P.col=0;P.hitcount=1;P.hitstop=15;P.kback=5;P.hitstun=5;P.blockstun=5;P.slide=true;P.movewaity=5;P.dmg=51;P.mgain=9;P.iframes=3;
                P.kdown=1;P.launch=10;P.movetype=2;P.jumpy=-13;P.landdelay=5;
                P.animq.insert(P.animq.begin(),{34,34,34,34,34,35,35,35,36,37,37,37,37,37,37,37,37,37,37,37});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,7,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8});
                P.cancel[32]=true;
                if(P.right)P.jumpx=8;else P.jumpx=-8;
                break;
                }
            case 24:{//special B(k)
                P.col=0;P.hitcount=1;P.slide=true;P.movewaity=4;P.jumpy=-1;
                P.animq.insert(P.animq.begin(),{34,34,34,34});
                P.cancel[32]=true;
                if(P.right)P.jumpx=6;else P.jumpx=-6;
                break;
                }
            case 25:{//grab
                if(P.block==2){
                    if(P.attack.movetype==1)P.block=1;
                    else P.block=0;
                    if(P.block==0)for(short i=0;i<16;i++){
                        if(P.character==2)P.animq.push_back(18);
                        else P.animq.push_back(32);
                    }
                    if(P.block==1)for(short i=0;i<+16;i++)P.animq.push_back(33);
                    P.pushaway=8;

                    effects temp;
                    temp.color1=sf::Color (85, 255, 255);
                    temp.code=2;
                    temp.len=4;
                    temp.x=P.x;
                    temp.y=P.y;
                    temp.speed=3;
                    effectslist.push_back(temp);
                    temp.speed=6;
                    effectslist.push_back(temp);
                    std::uniform_int_distribution<int> dis(0,360),dis2(3,5);
                    temp.code=0;
                    temp.len=16;
                    for(short i=0;i<32;i++){
                        temp.dir=dis(gen);
                        temp.speed=dis2(gen);
                        effectslist.push_back(temp);
                    }
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=0;P.kback=0;P.hitstun=60;P.blockstun=0;P.slide=true;P.movewaitx=6;P.dmg=0;P.movetype=4;P.grab[0]=21;P.grab[1]=0;P.grabstate=1;
                    P.animq.insert(P.animq.begin(),{20,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,24,24,23,23,22,22,21,21,20,20});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,11});
                    if(P.right)P.jumpx=2;else P.jumpx=-2;
                    short temp[2]={26,27};boolfill(P.cancel,true,temp);
                }
                break;
                }
            case 26:{//grab attack forward
                P.col=1;P.hitcount=1;P.hitstop=15;P.kback=3;P.hitstun=1;P.blockstun=0;P.slide=true;P.movewaitx=3;P.dmg=100;P.launch=10;P.kdown=1;P.movetype=4;P.grabstate=-1;P.mgain=12;
                P.animq.insert(P.animq.begin(),{12,12,12,13,14,14,14,14,14,14,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,4});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
                }
            case 27:{//grab attack backward
                P.col=1;P.hitcount=1;P.hitstop=15;P.kback=-3;P.hitstun=1;P.blockstun=0;P.slide=true;P.movewaitx=3;P.dmg=100;P.launch=10;P.kdown=1;P.movetype=4;P.grabstate=-1;P.mgain=12;
                P.animq.insert(P.animq.begin(),{12,12,12,13,14,14,14,14,14,14,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,4});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
                }
            case 28:{//special C (u)
                P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=3;P.blockstun=1;P.dmg=22;P.movetype=2;P.mgain=7;
                P.animq.insert(P.animq.begin(),{47,47,47,48,49,49,49,49,49,49,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52});
                P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,1});
                P.cancel[32]=true;
                break;
                }
            case 29:{//special C (i)
                P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=4;P.blockstun=2;P.dmg=22;P.movetype=2;P.mgain=8;
                P.animq.insert(P.animq.begin(),{47,47,47,48,49,49,49,49,49,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52});
                P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,2});
                P.cancel[32]=true;
                break;
                }
            case 30:{//special C (o)
                P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=5;P.blockstun=3;P.dmg=22;P.movetype=2;P.mgain=9;
                P.animq.insert(P.animq.begin(),{47,47,47,48,49,49,49,49,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52});
                P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,3});
                P.cancel[32]=true;
                break;
                }
            case 31:{//special C (k)
                P.col=0;P.hitcount=1;
                P.animq.insert(P.animq.begin(),{47,47,47,48,49,49,49,50,50,51,51,51,51,51,52,52});
                P.cancel[32]=true;
                break;
                }
            case 32:{//super
                P.col=0;P.hitcount=1;P.hitstop=14;P.kback=8;P.launch=5;P.hitstun=6;P.blockstun=5;P.slide=true;P.movewaitx=15;P.dmg=150;P.movetype=2;P.mgain=0;
                P.animq.insert(P.animq.begin(),{47,47,47,48,49,49,49,49,49,49,49,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52});
                P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,5,0,0,4});
                if(P.right)P.jumpx=-9;else P.jumpx=9;
                break;
                }
            }
            break;
        }
        case 2:{//Sinclair
            switch (P.act){
            case 0:{//neutural
                if(!P.air){
                    if(P.x<enemyx)P.right=true;else P.right=false;
                    if(P.idleanim.empty())P.idleanim.insert(P.idleanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,71,71,71,71,
                                                            72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,71,71,71,71,71});
                }
                P.col=0;P.frame=0;P.block=-1;
                break;
            }
            case 1:{//left walk
                P.col=0;
                if(preblock){
                    P.animq.push_back(18);
                    }
                else{
                    if(P.idleanim.empty())P.idleanim.insert(P.idleanim.begin(),{14,14,14,14,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6});
                    if(P.x<enemyx)P.right=true;else P.right=false;
                    if(P.right)P.x-=walkspeed;else P.x+=walkspeed;
                    }
                break;
            }
            case 2:{//left dash
                P.col=0;P.slide=true;if(P.right)P.jumpx=-10;else P.jumpx=10;P.iframes=3;
                P.animq.insert(P.animq.begin(),{51,47,47,47,47,47,47,47,47,48,48,49,49,50,50,50,50,50,51});
                P.atkfx.insert(P.atkfx.begin(),{11});
                break;
            }
            case 3:{//right walk
                P.col=0;
                if(P.idleanim.empty())P.idleanim.insert(P.idleanim.begin(),{6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14});
                if(P.x<enemyx)P.right=true;else P.right=false;
                if(P.right)P.x+=walkspeed;else P.x-=walkspeed;
                break;
            }
            case 4:{//right dash
                P.col=0;P.running=true;
                if(P.idleanim.empty())P.idleanim.insert(P.idleanim.begin(),{91,91,91,91,92,92,92,92,93,93,93,93,94,94,94,94,95,95,95,95,96,96,96,96});
                if(P.x<enemyx)P.right=true;else P.right=false;
                if(P.right)P.x+=runspeed;else P.x-=runspeed;
                break;
            }
            case 5:{//up jump
                P.col=0;P.jumpy=jumprise;P.movewaity=4;
                P.animq.insert(P.animq.begin(),{8,8,8,44});
                P.landdelay=5;
                soundfxlist.push_back(7);sfxx.push_back((bgx+P.x-128.f)/256.f);
                break;
            }
            case 6:{//left jump
                P.col=0;P.jumpy=jumprise;P.movewaitx=4;P.movewaity=4;
                if(P.right)P.jumpx=-3;else P.jumpx=3;
                P.animq.insert(P.animq.begin(),{8,8,8,44});P.landdelay=3;
                soundfxlist.push_back(7);sfxx.push_back((bgx+P.x-128.f)/256.f);
                break;
            }
            case 7:{//right jump
                if(P.running){if(P.right)P.jumpx=6;else P.jumpx=-6;P.jumpy=jumprise*2.f/3.f;}
                else{if(P.right)P.jumpx=3;else P.jumpx=-3;P.jumpy=jumprise;}
                P.movetype=0;
                P.col=0;P.movewaitx=4;P.movewaity=4;P.animq.insert(P.animq.begin(),{8,8,8,44});P.landdelay=3;
                soundfxlist.push_back(7);sfxx.push_back((bgx+P.x-128.f)/256.f);
                break;
            }
            case 8:{//u (light normal)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=2;P.hitstun=11;P.blockstun=5;P.dmg=12;P.movetype=3;P.landdelay=3;P.mgain=4;
                    P.animq.insert(P.animq.begin(),{75,75,75,75,76,76,76});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,9,9,9,9,9,9,9,9});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,11});
                    short temp[3]={8,9,10};boolfill(P.cancel,true,temp);
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=4;P.hitstun=12;P.blockstun=9;P.dmg=14;P.movetype=2;P.mgain=4;
                    P.animq.insert(P.animq.begin(),{2,2,2,3,73,73,73,73,3,2,2,2,2});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,1,1});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,11});
                    short temp[17]={8,9,10,15,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                }
                break;
            }
            case 9:{//i (middle normal)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=13;P.kback=3;P.hitstun=16;P.blockstun=8;P.dmg=27;P.movetype=3;P.landdelay=3;P.mgain=6;
                    P.animq.insert(P.animq.begin(),{19,19,19,19,20,21,21,21,21,21,21,21,21,21,21,21,21});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,3,3,3,3,3});
                    short temp[1]={10};boolfill(P.cancel,true,temp);
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=13;P.kback=5;P.hitstun=16;P.blockstun=10;P.slide=true;P.dmg=28;P.movetype=2;P.mgain=6;
                    P.animq.insert(P.animq.begin(),{19,19,19,19,19,19,19,19,20,21,21,21,21,21,21,21,21,21,21,21,21,52,52,52});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,3,3});
                    short temp[15]={10,15,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                    P.movewaitx=9;
                    if(P.right)P.jumpx=2;
                    else P.jumpx=-2;
                }
                break;
            }
            case 10:{//o (heavy normal)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=14;P.kback=3;P.hitstun=17;P.blockstun=7;P.dmg=33;P.movetype=3;P.landdelay=3;P.mgain=8;
                    P.animq.insert(P.animq.begin(),{97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11});
                }
                else{
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,12});
                    P.col=0;P.hitcount=1;P.hitstop=14;P.kback=5;P.hitstun=17;P.blockstun=12;P.slide=true;P.dmg=36;P.movetype=2;P.mgain=8;
                    P.animq.insert(P.animq.begin(),{60,60,60,61,61,61,62,62,62,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,7,7});
                    short temp[14]={15,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                    P.movewaitx=9;
                    if(P.right)P.jumpx=3;
                    else P.jumpx=-3;
                }
                break;
            }
            case 11:{//crouch
                if(P.x<enemyx)P.right=true;
                else P.right=false;
                P.col=1;
                if(P.idleanim.empty())P.idleanim.insert(P.idleanim.begin(),{1});
                break;
            }
            case 20:{//crouch block
                P.col=1;
                if(preblock){
                    P.animq.push_back(33);
                    }
                else{
                    if(P.x<enemyx)P.right=true;else P.right=false;
                    if(P.idleanim.empty())P.idleanim.insert(P.idleanim.begin(),{1});
                    }
                break;
            }
            case 12:{//crouch u
                P.col=1;P.hitcount=1;P.hitstop=12;P.kback=4;P.hitstun=9;P.blockstun=5;P.dmg=10;P.movetype=1;P.mgain=4;
                P.animq.insert(P.animq.begin(),{4,4,4,4,4,5,5,5,4,4,4});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,2});
                short temp[17]={12,13,14,15,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                break;
            }
            case 13:{//crouch i
                P.col=1;P.hitcount=1;P.hitstop=13;P.kback=3;P.hitstun=14;P.blockstun=7;P.dmg=25;P.movetype=1;P.mgain=6;
                P.animq.insert(P.animq.begin(),{58,58,58,58,58,58,59,59,59,59,59,59,59,58,58,58,58});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,6,6,6});
                short temp[15]={14,15,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                break;
            }
            case 14:{//crouch o
                P.col=1;P.hitcount=1;P.hitstop=14;P.kback=3;P.hitstun=1;P.blockstun=7;P.slide=true;P.movewaitx=11;P.dmg=37;P.kdown=2;P.movetype=1;P.mgain=8;
                P.animq.insert(P.animq.begin(),{22,22,22,22,22,22,22,22,22,22,22,23,24,24,24,24,23,22,22,22,22});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,4});
                if(P.right)P.jumpx=3;else P.jumpx=-3;
                short temp[14]={15,16,17,18,19,21,22,23,24,28,29,30,31,32};boolfill(P.cancel,true,temp);
                break;
            }
            case 15:{//k (gimmick)
                if(P.comboed){
                effects temp;
                temp.color1=sf::Color (255, 85, 255);
                temp.code=2;
                temp.len=4;
                temp.x=P.x;
                temp.y=P.y;
                temp.speed=3;
                effectslist.push_back(temp);
                temp.speed=6;
                effectslist.push_back(temp);
                std::uniform_int_distribution<int> dis(0,360),dis2(3,5);
                temp.code=0;
                temp.len=16;
                for(short i=0;i<32;i++){
                    temp.dir=dis(gen);
                    temp.speed=dis2(gen);
                    effectslist.push_back(temp);
                }
                P.comboed=false;combo=0;P.iframes=3;
                if(P.block==2){P.block=-1;P.meter-=100;}
                else P.meter-=200;
                P.gimmick[0]=30;
                P.col=0;P.slide=true;if(P.right)P.jumpx=-10;else P.jumpx=10;
                P.animq.insert(P.animq.begin(),{51,47,47,47,47,47,47,47,47,48,48,49,49,50,50,50,50,50,51});
                P.atkfx.insert(P.atkfx.begin(),{4});
                }
                else{
                P.animq.insert(P.animq.begin(),{25,25,25,25,26,77,77,77,77,77,77,77});
                P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,4});
                }
                break;
            }
            case 16:{//special A (u)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=7;P.blockstun=3;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,37,38,27,28,28,29,30,31,32,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,8});
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=7;P.blockstun=3;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,37,38,27,28,28,29,30,31,32,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,1});
                    P.cancel[32]=true;
                }
                break;
            }
            case 17:{//special A (i)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=7;P.blockstun=3;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,37,38,27,28,28,29,30,31,32,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,18});
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=7;P.blockstun=3;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,37,38,27,28,28,29,30,31,32,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,17});
                    P.cancel[32]=true;
                }
                break;
            }
            case 18:{//special A (o)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=6;P.blockstun=2;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,37,38,27,28,28,29,30,31,32,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,10});
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=6;P.blockstun=2;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,37,38,27,28,28,29,30,31,32,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,3});
                    P.cancel[32]=true;
                }
                break;
            }
            case 19:{//special A (k)
                if(P.air){
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=7;P.blockstun=3;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,36,37,37,38,38,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16});
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=12;P.kback=3;P.hitstun=7;P.blockstun=3;P.movetype=2;P.mgain=7;
                    P.animq.insert(P.animq.begin(),{36,36,37,37,38,38,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,35,35,35,35,35,35,39,39,40,40,41,41});
                    P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15});
                    P.cancel[32]=true;
                }
                break;
            }
            case 21:{//special B(u)
                P.col=0;P.hitcount=1;P.hitstop=0;P.kback=0;P.hitstun=60;P.blockstun=5;P.slide=true;P.movewaitx=6;P.dmg=0;P.movetype=4;P.grab[0]=27;P.grab[1]=15;P.grabstate=2;
                P.animq.insert(P.animq.begin(),{53,53,53,53,53,53,53,53,53,53,53,54,55,55,55,55,55,55,55,55,55,55,55,55,54,53,53,53,53});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,5});
                P.cancel[33]=true;
                if(P.right)P.jumpx=3;else P.jumpx=-3;
                break;
            }
            case 24:{//special B(k)
                P.col=0;P.hitcount=1;P.hitstop=0;P.kback=5;P.hitstun=17;P.blockstun=7;P.slide=true;P.dmg=12;P.movetype=2;P.mgain=8;P.landdelay=15;P.grab[0]=12;P.grab[1]=18;P.grabstate=2;P.iframes=3;
                P.animq.insert(P.animq.begin(),{53,53,53,53,53,53,53,54,55,55,55,55,55,55,55,55,55,55,55,55,54,53,53,53,53,53});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,5,5});
                short temp[1]={36};boolfill(P.cancel,true,temp);
                P.movewaitx=5;
                if(P.right)P.jumpx=7;
                else P.jumpx=-7;
                break;
            }
            case 25:{//grab&pushblock
                if(P.block==2){
                    if(P.attack.movetype==1)P.block=1;
                    else P.block=0;
                    if(P.block==0)for(short i=0;i<16;i++){
                        if(P.character==2)P.animq.push_back(18);
                        else P.animq.push_back(32);
                    }
                    if(P.block==1)for(short i=0;i<+16;i++)P.animq.push_back(33);
                    P.pushaway=8;

                    effects temp;
                    temp.color1=sf::Color (85, 255, 255);
                    temp.code=2;
                    temp.len=4;
                    temp.x=P.x;
                    temp.y=P.y;
                    temp.speed=3;
                    effectslist.push_back(temp);
                    temp.speed=6;
                    effectslist.push_back(temp);
                    std::uniform_int_distribution<int> dis(0,360),dis2(3,5);
                    temp.code=0;
                    temp.len=16;
                    for(short i=0;i<32;i++){
                        temp.dir=dis(gen);
                        temp.speed=dis2(gen);
                        effectslist.push_back(temp);
                    }
                }
                else{
                    P.col=0;P.hitcount=1;P.hitstop=0;P.kback=0;P.hitstun=60;P.blockstun=0;P.slide=true;P.movewaitx=6;P.dmg=0;P.movetype=4;P.grab[0]=21;P.grab[1]=0;P.grabstate=1;
                    P.animq.insert(P.animq.begin(),{53,53,53,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,54,53,53,53,53,53,53,53,53});
                    P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,5});
                    if(P.right)P.jumpx=2;else P.jumpx=-2;
                    short temp[2]={26,27};boolfill(P.cancel,true,temp);
                }
                break;
                }
            case 26:{//grab attack forward
                P.col=1;P.hitcount=1;P.hitstop=15;P.kback=3;P.hitstun=1;P.blockstun=0;P.slide=true;P.movewaitx=3;P.dmg=100;P.launch=10;P.kdown=1;P.movetype=4;P.grabstate=-1;P.mgain=12;
                P.animq.insert(P.animq.begin(),{12,12,12,13,14,14,14,14,14,14,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,4});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
                }
            case 27:{//grab attack backward
                P.col=1;P.hitcount=1;P.hitstop=15;P.kback=-3;P.hitstun=1;P.blockstun=0;P.slide=true;P.movewaitx=3;P.dmg=100;P.launch=10;P.kdown=1;P.movetype=4;P.grabstate=-1;P.mgain=12;
                P.animq.insert(P.animq.begin(),{12,12,12,13,14,14,14,14,14,14,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,4});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
                }
            case 28:{//special C (u)
                P.col=0;P.hitcount=1;P.hitstop=13;P.kback=5;P.hitstun=12;P.blockstun=7;P.dmg=34;P.slide=true;P.movetype=2;P.mgain=7;
                P.animq.insert(P.animq.begin(),{78,78,78,79,79,79,80,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,10,10,10,10,10});
                short temp[2]={15,32};boolfill(P.cancel,true,temp);
                P.movewaitx=7;
                if(P.right)P.jumpx=8;
                else P.jumpx=-8;
                break;
            }
            case 29:{//special C (i)
                P.col=0;P.hitcount=1;P.hitstop=13;P.kback=5;P.hitstun=17;P.blockstun=14;P.dmg=43;P.slide=true;P.movetype=2;P.mgain=7;
                P.animq.insert(P.animq.begin(),{78,78,78,78,79,79,79,79,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,10,10,10,10,10});
                short temp[2]={15,32};boolfill(P.cancel,true,temp);
                P.movewaitx=9;
                if(P.right)P.jumpx=10;
                else P.jumpx=-10;
                break;
            }
            case 30:{//special C (o)
                P.col=0;P.hitcount=2;P.hitstop=13;P.kback=6;P.hitstun=19;P.blockstun=12;P.dmg=30;P.slide=true;P.movetype=2;P.mgain=7;
                P.animq.insert(P.animq.begin(),{78,78,78,78,78,78,79,79,79,79,79,79,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10});
                short temp[2]={15,32};boolfill(P.cancel,true,temp);
                P.movewaitx=11;
                if(P.right)P.jumpx=14;
                else P.jumpx=-14;
                break;
            }
            case 31:{//special C (k)
                P.col=0;P.hitcount=1;P.hitstop=14;P.kback=16;P.hitstun=24;P.blockstun=7;P.dmg=50;P.slide=true;P.movetype=2;P.mgain=7;P.wallcrash=true;P.launch=7;
                P.animq.insert(P.animq.begin(),{78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,80,80,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82});
                P.hitboxanim.insert(P.hitboxanim.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10});
                P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7});
                short temp[2]={15,32};boolfill(P.cancel,true,temp);
                P.movewaitx=18;
                if(P.right)P.jumpx=10;
                else P.jumpx=-10;
                break;
            }
            case 32:{//super
                P.animq.insert(P.animq.begin(),{25,25,25,25,25,25,25,25,25,26,77,77,77,77,77,77});
                if(P.gimmick[1]==0)P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,5,0,6});
                else P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,0,0,6});
                break;
            }
            case 33:{//special B(u)2
                P.col=3;P.hitcount=1;P.hitstop=15;P.kback=-12;P.hitstun=1;P.blockstun=0;P.slide=true;P.movewaitx=3;P.dmg=100;P.launch=1;P.kdown=2;P.movetype=4;P.grabstate=-1;P.mgain=12;P.gimmick[0]=180;
                P.animq.insert(P.animq.begin(),{56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56});
                P.hitboxanim.insert(P.hitboxanim.begin(),{5});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
            }
            case 36:{//special B(k)2
                P.col=3;P.hitcount=3;P.hitstop=3;P.kback=3;P.hitstun=10;P.blockstun=0;P.slide=true;P.dmg=25;P.launch=4;P.kdown=2;P.movetype=4;P.grabstate=-1;P.mgain=1;P.gimmick[0]=30;
                P.animq.insert(P.animq.begin(),{56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56});
                P.hitboxanim.insert(P.hitboxanim.begin(),{8,8,8,8,8});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
            }
            case 37:{//taunt
                P.col=0;
                voicesfxlist.push_back(14);vsfxx.push_back((bgx+P.x-128.f)/256.f);
                P.animq.insert(P.animq.begin(),{83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,
                    85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86});
                    break;
            }
            case 38:{//super2
                P.col=0;P.movetype=0;P.hitstop=15;
                P.animq.insert(P.animq.begin(),{25,25,25,25,25,25,25,25,25,26,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77});
                P.atkfx.insert(P.atkfx.begin(),{0,0,0,0,0,0,0,0,5,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14});
                P.cancel[39]=true;
                break;
            }
            case 39:{//super2 2
                P.col=3;P.hitcount=3;P.hitstop=3;P.kback=3;P.hitstun=10;P.blockstun=0;P.slide=true;P.dmg=50;P.launch=4;P.kdown=2;P.movetype=4;P.grabstate=-1;P.mgain=1;P.gimmick[0]=270;P.iframes=10;
                P.animq.insert(P.animq.begin(),{56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56});
                P.hitboxanim.insert(P.hitboxanim.begin(),{8,8,8,8,8});
                if(P.right)P.jumpx=4;else P.jumpx=-4;
                break;
            }
            }
        }
        }
    }
    if(P.movewaitx>0&&(enemycharacter!=2||(enemygimmick[0]%2==0&&(enemygimmick[1]%2==0||(P.character==2&&P.gimmick[1]>0)))))P.movewaitx-=1;
    else{
        if(enemycharacter==2&&(enemygimmick[0]>0||(enemygimmick[1]>0&&(P.character!=2||P.gimmick[1]==0))))P.x+=P.jumpx/2;
        else P.x+=P.jumpx;
        P.movewaitx=-1;
    }
    if(P.movewaity>0&&(enemycharacter!=2||(enemygimmick[0]%2==0&&(enemygimmick[1]%2==0||(P.character==2&&P.gimmick[1]>0)))))P.movewaity-=1;
    else{
        if(P.jumpy<0)P.air=true;
        if(enemycharacter==2&&(enemygimmick[0]>0||(enemygimmick[1]>0&&(P.character!=2||P.gimmick[1]==0))))P.y+=P.jumpy/2;
        else P.y+=P.jumpy;
        P.movewaity=-1;
    }
    if(P.slide&&P.movewaitx==-1){
        if(P.jumpx>0)P.jumpx-=1;
        else if(P.jumpx<0)P.jumpx+=1;
    }
    if(*enemypaway>0){
            if(P.air)*enemypaway=0;
            else{if(P.x<enemyx)P.x-=*enemypaway;else if(P.x>enemyx)P.x+=*enemypaway;*enemypaway-=1;}
    }
    if(P.air){
            P.block=-1;
            if(P.comboed)P.jumpy+=0.75;
            else P.jumpy+=jumpfall;
            if(P.jumpy>0){
                if(P.neutural&&P.idleanim.empty()){
                    if(P.character==0)P.idleanim.insert(P.idleanim.begin(),{44});
                    else if(P.character==2)P.idleanim.insert(P.idleanim.begin(),{45,45,45,46,46,46});
                }
            }
            if(P.y>=176){
                if(P.kdowned>0){}//add downed landing animation
                if(!P.comboed){P.col=1;P.animq.clear();P.hitboxanim.clear();P.atkfx.clear();if(P.x<enemyx)P.right=true;else P.right=false;for(short i=0;i<P.landdelay;i++)P.animq.push_back(8);}
                P.landdelay=0;
                P.movetype=0;
                soundfxlist.push_back(8);sfxx.push_back((bgx+P.x-128.f)/256.f);
                P.jumpx=0;P.jumpy=0;P.y=176;P.air=false;
            }
        }
    if(!P.hitboxanim.empty()){
        P.hbframe=P.hitboxanim[0];
        if(enemycharacter!=2||enemygimmick[0]%2==0&&(enemygimmick[1]%2==0||(P.character==2&&P.gimmick[1]>0)))P.hitboxanim.pop_front();
    }
    else P.hbframe=0;
    if(!P.animq.empty()){
        P.idleanim.clear();
        P.neutural=false;P.frame=P.animq[0];
        memcpy(P.anim,animlib[P.character][P.animq[0]],sizeof(animlib[P.character][P.animq[0]]));
        if(enemycharacter!=2||(enemygimmick[0]%2==0&&(enemygimmick[1]%2==0||(P.character==2&&P.gimmick[1]>0))))if(!(P.animq[0]==19&&P.hp<=0)&&!((P.comboed||P.movetype!=-1)&&P.air&&P.animq.size()==1))P.animq.pop_front();
    }
    else if(!P.idleanim.empty()&&P.hp>0){
        P.frame=P.idleanim[0];
        memcpy(P.anim,animlib[P.character][P.idleanim[0]],sizeof(animlib[P.character][P.idleanim[0]]));
        if(enemycharacter!=2||(enemygimmick[0]%2==0&&(enemygimmick[1]%2==0||(P.character==2&&P.gimmick[1]>0))))P.idleanim.pop_front();
    }
    if(P.act!=4)P.running=false;
    if(enemygstate==3||enemygstate==4){
        if(P.x<enemyx)P.x=enemyx-P.attack.grab[0];
        else P.x=enemyx+P.attack.grab[0];
        P.y=enemyy-P.attack.grab[1];
        if(P.y<176)P.air=true;
    }
    if(!P.atkfx.empty()){
        if(P.character==0){
            if(P.atkfx[0]==5){*superstop=20;P.super=true;P.meter-=100;soundfxlist.push_back(11);sfxx.push_back((bgx+P.x-128.f)/256.f);}
            if(P.atkfx[0]==1||P.atkfx[0]==2||P.atkfx[0]==3||P.atkfx[0]==4){//projectile
                P.meter+=P.mgain;
                projectile temp;
                temp.movetype=P.movetype;
                temp.x=P.x;temp.y=P.y;
                if(P.atkfx[0]==1)temp.movex=4;
                else if(P.atkfx[0]==2)temp.movex=5;
                else if(P.atkfx[0]==3)temp.movex=6;
                else if(P.atkfx[0]==4)temp.movex=12;
                temp.movey=0;
                temp.moveact=P.moveact;
                temp.hitcount=1;
                temp.hitstop=P.hitstop;
                temp.hitstun=P.hitstun;temp.blockstun=P.blockstun;
                temp.dmg=P.dmg;
                temp.mgain=P.mgain;
                temp.kback=P.kback;
                temp.right=P.right;
                temp.looplen=2;
                temp.knockdown=P.kdown;
                temp.loopanim[0]=54;
                temp.loopanim[1]=55;
                temp.launch=P.launch;
                temp.endanim.insert(temp.endanim.begin(),{58,59,60});
                temp.frame=54;
                if(P.proj.size()<32)P.proj.push_back(temp);
                    }
        }
        else if(P.character==2){
        switch (P.atkfx[0]){
            case 1:
            case 3:
            case 8:
            case 10:
            case 15:
            case 16:
            case 17:
            case 18:{//projectile
                soundfxlist.push_back(10);
                sfxx.push_back((bgx+P.x-128.f)/256.f);
                P.meter+=P.mgain;
                projectile temp;
                temp.movetype=P.movetype;
                if(P.right)temp.x=P.x+32;
                else temp.x=P.x-32;
                temp.y=P.y;
                temp.movex=0.5;
                if(P.atkfx[0]==8||P.atkfx[0]==10||P.atkfx[0]==16){temp.movey=0.25;P.jumpy=-3;}
                else if(P.atkfx[0]==18){temp.movex=5;temp.movey=-4;P.jumpy=-3;}
                else if(P.atkfx[0]==17){temp.movex=5;temp.movey=-4;}
                else temp.movey=0;
                temp.hitcount=1;
                temp.moveact=P.moveact;
                temp.hitstop=P.hitstop;
                temp.hitstun=P.hitstun;temp.blockstun=P.blockstun;
                temp.dmg=14;
                temp.mgain=P.mgain;
                temp.kback=P.kback;
                temp.right=P.right;
                temp.looplen=12;
                temp.knockdown=P.kdown;
                temp.loopanim[0]=42;
                temp.loopanim[1]=42;
                temp.loopanim[2]=42;
                temp.loopanim[3]=42;
                temp.loopanim[4]=42;
                temp.loopanim[5]=42;
                temp.loopanim[6]=43;
                temp.loopanim[7]=43;
                temp.loopanim[8]=43;
                temp.loopanim[9]=43;
                temp.loopanim[10]=43;
                temp.loopanim[11]=43;
                temp.endanim.push_back(42);
                temp.endanim.push_back(43);
                if(P.atkfx[0]==1||P.atkfx[0]==8)temp.code=0;
                else if(P.atkfx[0]==3||P.atkfx[0]==10)temp.code=2;
                else if(P.atkfx[0]==17||P.atkfx[0]==18)temp.code=3;
                else if(P.atkfx[0]==15||P.atkfx[0]==16){
                    temp.code=1;
                    temp.movex*=20;
                    temp.movey*=20;
                    temp.dmg=28;
                    temp.looplen=2;
                    temp.loopanim[0]=42;
                    temp.loopanim[1]=43;
                    temp.hitstun=10;temp.blockstun=2;
                    effects tempfx;
                    tempfx.color1=sf::Color (85, 255, 255);
                    tempfx.len=4;
                    tempfx.x=temp.x;tempfx.y=temp.y-5;
                    if(temp.right)tempfx.x+=8;
                    else tempfx.x-=8;
                    tempfx.code=2;tempfx.speed=0.7;
                    effectslist.push_back(tempfx);
                    tempfx.speed=2;
                    effectslist.push_back(tempfx);
                    tempfx.code=1;
                }
                temp.launch=P.launch;
                temp.frame=42;
                //temp.endanim.insert(temp.endanim.begin(),{42});
                if(P.proj.size()<32)P.proj.push_back(temp);
                break;
            }
            case 4:{//gimmick
                P.cancel[24]=true;P.movetype=0;
                for(short i=0;i<P.proj.size();i++){
                    if(P.proj[i].movex<5&&P.proj[i].code==0){
                        P.proj[i].movex*=20;
                        P.proj[i].movey*=20;
                        P.proj[i].dmg=28;
                        P.proj[i].looplen=2;
                        P.proj[i].loopanim[0]=42;
                        P.proj[i].loopanim[1]=43;
                        P.proj[i].hitstun=10;P.proj[i].blockstun=2;
                        effects temp;
                        temp.color1=sf::Color (85, 255, 255);
                        temp.len=4;
                        temp.x=P.proj[i].x;temp.y=P.proj[i].y-5;
                        if(P.proj[i].right)temp.x+=8;
                        else temp.x-=8;
                        temp.code=2;temp.speed=0.7;
                        effectslist.push_back(temp);
                        temp.speed=2;
                        effectslist.push_back(temp);
                    }
                    else if(P.proj[i].looplen>2&&P.proj[i].code==3){
                        P.proj[i].dmg=28;
                        P.proj[i].looplen=2;
                        P.proj[i].loopanim[0]=42;
                        P.proj[i].loopanim[1]=43;
                        P.proj[i].hitstun=10;P.proj[i].blockstun=2;
                        effects temp;
                        temp.color1=sf::Color (85, 255, 255);
                        temp.len=4;
                        temp.x=P.proj[i].x;temp.y=P.proj[i].y-5;
                        if(P.proj[i].right)temp.x+=8;
                        else temp.x-=8;
                        temp.code=2;temp.speed=0.7;
                        effectslist.push_back(temp);
                        temp.speed=2;
                        effectslist.push_back(temp);
                    }
                }
                effects temp;
                temp.color1=sf::Color (85, 255, 255);
                temp.len=4;
                temp.x=P.x;temp.y=P.y-12;
                if(P.right)temp.x-=15;
                else temp.x+=15;
                temp.code=2;temp.speed=1;
                effectslist.push_back(temp);
                temp.speed=3;
                effectslist.push_back(temp);
                break;
            }
            case 5:{*superstop=20;P.super=true;soundfxlist.push_back(11);sfxx.push_back((bgx+P.x-128.f)/256.f);break;}
            case 6:{
                if(P.gimmick[1]>0)P.gimmick[1]=0;
                else P.gimmick[1]=32767;
                soundfxlist.push_back(12);sfxx.push_back((bgx+P.x-128.f)/256.f);
                effects temp;
                temp.color1=sf::Color (85, 255, 255);
                temp.len=7;
                temp.x=P.x;temp.y=P.y-12;
                if(P.right)temp.x-=15;
                else temp.x+=15;
                temp.code=2;temp.speed=3;
                effectslist.push_back(temp);
                temp.speed=9;
                effectslist.push_back(temp);
                break;
            }
            case 7:{
                std::uniform_int_distribution<int> dis(1,3),dis2(-16,14),dis3(0,1);
                effects temp;
                temp.code=0;
                temp.frame=0;
                temp.len=2;
                temp.color1=(sf::Color(170*((colorpalettes[P.color][1]/4)%2) + 85*(colorpalettes[P.color][1]/8), (1-(colorpalettes[P.color][1]==6)/3.0)*170*((colorpalettes[P.color][1]/2)%2) + 85*(colorpalettes[P.color][1]/8), 170*(colorpalettes[P.color][1]%2) + 85*(colorpalettes[P.color][1]/8)));
                for(short j=0;j<128;j++){
                    if(dis3(gen)==0)temp.speed=-dis(gen);
                    else temp.speed=dis(gen);
                    temp.x=P.x+dis2(gen)/2.f;
                    temp.y=P.y+4+dis2(gen)*2;
                    effectslist.push_back(temp);
                }
                if(P.y==enemyy){
                    if(P.right)P.x=enemyx-48;
                    else P.x=enemyx+48;
                }
                else{
                    if(P.right)P.x+=64;
                    else P.x-=64;
                }
                for(short j=0;j<128;j++){
                    if(dis3(gen)==0)temp.speed=-dis(gen);
                    else temp.speed=dis(gen);
                    temp.x=P.x+dis2(gen)/2.f;
                    temp.y=P.y+4+dis2(gen)*2;
                    effectslist.push_back(temp);
                }
                break;
            }
            case 11:{soundfxlist.push_back(9);sfxx.push_back((bgx+P.x-128.f)/256.f);break;}
            case 12:{
                voicesfxlist.push_back(5);vsfxx.push_back((bgx+P.x-128.f)/256.f);
                soundfxlist.push_back(6);sfxx.push_back((bgx+P.x-128.f)/256.f);
                break;
            }
            case 13:{P.counter=true;P.meter-=100;break;}
            case 14:{P.counter=false;break;}
        }
        }
        P.atkfx.pop_front();
        if(enemycharacter==2&&(enemygimmick[0]%2==1||(enemygimmick[1]%2==1&&(P.character!=2||P.gimmick[1]==0))))P.atkfx.push_front(0);
    }
    #undef P
}

void matchcode(player *p1,player *p2,std::string dialogue,char p1input[],char p2input[],short *superstop,short *framedata,float overlap[],float overlap2[],short matchintro){
    #define P1 (*p1)
    #define P2 (*p2)

    if(P1.character==2&&P1.gimmick[0]>0){
            effects temp;
            temp.color1=sf::Color (0, 170, 170);
            temp.code=4;temp.len=1;
            temp.dir=P1.gimmick[0]/8.f;
            temp.fxsize=28;
            temp.x=P2.x;temp.y=P2.y;
            effectslist.push_back(temp);
            temp.dir=P1.gimmick[0]/32.f;temp.fxsize=16;
            effectslist.push_back(temp);
            temp.code=2;temp.speed=8;
            effectslist.push_back(temp);
    }
    if(P1.character==2&&P1.gimmick[1]>0){
            effects temp;
            temp.color1=sf::Color (85, 255, 255);
            temp.code=4;temp.len=1;
            temp.dir=P1.gimmick[1]/4.f;
            temp.fxsize=28;
            temp.x=P1.x;temp.y=P1.y;
            effectslist.push_back(temp);
            temp.dir=P1.gimmick[1]/16.f;
            temp.fxsize=16;
            effectslist.push_back(temp);
            temp.code=2;temp.speed=8;
            effectslist.push_back(temp);
    }
    if(P2.character==2&&P2.gimmick[0]>0){
            effects temp;
            temp.color1=sf::Color (0, 170, 170);
            temp.code=4;temp.len=1;
            temp.dir=P2.gimmick[0]/8.f;
            temp.fxsize=28;
            temp.x=P1.x;temp.y=P1.y;
            effectslist.push_back(temp);
            temp.dir=P2.gimmick[0]/32.f;temp.fxsize=16;
            effectslist.push_back(temp);
            temp.code=2;temp.speed=8;
            effectslist.push_back(temp);
    }
    if(P2.character==2&&P2.gimmick[1]>0){
            effects temp;
            temp.color1=sf::Color (85, 255, 255);
            temp.code=4;temp.len=1;
            temp.dir=P2.gimmick[1]/4.f;
            temp.fxsize=28;
            temp.x=P2.x;temp.y=P2.y;
            effectslist.push_back(temp);
            temp.dir=P2.gimmick[1]/16.f;
            temp.fxsize=16;
            effectslist.push_back(temp);
            temp.code=2;temp.speed=8;
            effectslist.push_back(temp);
    }

    if(P1.hp>0&&P2.hp>0&&roundframecount/60<99&&dialogue.empty()&&matchintro<=0){//input to action code and roundframe counter
        if(P1.buffer==0&&!P1.animq.empty()){
            P1.buffer=chooseaction(P1.character,P1.act,1,P1.air,p1input,P1.meter);
            if(P1.cancel[P1.buffer]==false&&P1.animq.size()>10)P1.buffer=0;
            else if(P1.buffer<8||P1.buffer==11||P1.buffer==20||(!(P1.cancel[P1.buffer]&&!P1.whiff)&&P1.air&&P1.jumpy<5))P1.buffer=0;
        }
        if(P2.buffer==0&&!P2.animq.empty()){
                P2.buffer=chooseaction(P2.character,P2.act,2,P2.air,p2input,P2.meter);
                if(P2.cancel[P2.buffer]==false&&P2.animq.size()>10)P2.buffer=0;
                else if(P2.buffer<8||P2.buffer==11||P2.buffer==20||(!(P2.cancel[P2.buffer]&&!P2.whiff)&&P2.air&&P2.jumpy<5))P2.buffer=0;
        }
        if(P1.buffer==0){
            short temp=chooseaction(P1.character,P1.act,1,P1.air,p1input,P1.meter);
            if(temp!=P1.act)P1.idleanim.clear();
            P1.act=temp;
        }
        else if(!P1.animq.empty()&&(!P1.whiff||P1.movetype==0||(P1.comboed&&P1.buffer==15&&(P1.meter>=200||(P1.meter>=100&&P1.block==2)))||(P1.block!=-1&&P1.buffer==25)))P1.act=P1.buffer;
        if(P1.animq.empty()){if(!P1.whiff){P1.act=P1.buffer;}P1.buffer=0;}

        if(P2.buffer==0){
            short temp=chooseaction(P2.character,P2.act,2,P2.air,p2input,P2.meter);
            if(temp!=P2.act)P2.idleanim.clear();
            P2.act=temp;
        }
        else if(!P2.animq.empty()&&(!P2.whiff||P2.movetype==0||(P2.comboed&&P2.buffer==15&&(P2.meter>=200||(P2.meter>=100&&P2.block==2)))||(P2.block!=-1&&P2.buffer==25)))P2.act=P2.buffer;
        if(P2.animq.empty()){if(!P2.whiff){P2.act=P2.buffer;}P2.buffer=0;}


    }
    else{P1.act=0;P2.act=0;}

    bool p1preblock=false,p2preblock=false;
    if(P2.movetype>0&&P2.movetype<4&&(abs(int(P1.x-P2.x))<64))p1preblock=true;
    if(P1.movetype>0&&P1.movetype<4&&(abs(int(P1.x-P2.x))<64))p2preblock=true;
    if(!p1preblock)for(short i=0;i<P2.proj.size();i++)
            if(abs(int(P2.proj[i].x-P1.x))<64&&abs(int(P2.proj[i].y-P1.y))<64&&P2.proj[i].hitcount>0){p1preblock=true;break;}
    if(!p2preblock)for(short i=0;i<P1.proj.size();i++)
            if(abs(int(P1.proj[i].x-P2.x))<64&&abs(int(P1.proj[i].y-P2.y))<64&&P1.proj[i].hitcount>0){p2preblock=true;break;}

    if(P1.hit){
        if(P1.hitstopped==0&&*superstop==0)characterdata(&P1,P2.x,P2.y,&P2.pushaway,P2.grabstate,&*superstop,P2.character,P2.gimmick,p1preblock);
        if(P2.hitstopped==0&&*superstop==0)characterdata(&P2,P1.x,P1.y,&P1.pushaway,P1.grabstate,&*superstop,P1.character,P1.gimmick,p2preblock);
                        }
    else{
        if(P2.hitstopped==0&&*superstop==0)characterdata(&P2,P1.x,P1.y,&P1.pushaway,P1.grabstate,&*superstop,P1.character,P1.gimmick,p2preblock);
        if(P1.hitstopped==0&&*superstop==0)characterdata(&P1,P2.x,P2.y,&P2.pushaway,P2.grabstate,&*superstop,P2.character,P2.gimmick,p1preblock);
                        }
    if(!P1.proj.empty())projectiledata(&P1,*superstop,P2.character,P2.gimmick);
    if(!P2.proj.empty())projectiledata(&P2,*superstop,P1.character,P1.gimmick);
    if(combo==0)comboscaling=100;
    if(P1.hp>P1.maxhp)P1.hp=P1.maxhp;
    if(P2.hp>P2.maxhp)P2.hp=P2.maxhp;
    if(comboscaling<20)comboscaling=20;
    float temp[2]={},temp2[2]={},temp3[2]={},temp4[2]={};
    if(P1.right==true){
        temp[0]=colbox[P1.character][P1.col][0][0][0]+int(P1.x);
        temp2[0]=colbox[P1.character][P1.col][0][1][0]+int(P1.x);
    }
    else{
        temp[0]=-colbox[P1.character][P1.col][0][1][0]+int(P1.x);
        temp2[0]=-colbox[P1.character][P1.col][0][0][0]+int(P1.x);

    }
    temp[1]=colbox[P1.character][P1.col][0][0][1]+int(P1.y);
    temp2[1]=colbox[P1.character][P1.col][0][1][1]+int(P1.y);
    if(P2.right==true){
        temp3[0]=colbox[P2.character][P2.col][0][0][0]+int(P2.x);
        temp4[0]=colbox[P2.character][P2.col][0][1][0]+int(P2.x);
    }
    else{
        temp3[0]=-colbox[P2.character][P2.col][0][1][0]+int(P2.x);
        temp4[0]=-colbox[P2.character][P2.col][0][0][0]+int(P2.x);
    }
    temp3[1]=colbox[P2.character][P2.col][0][0][1]+int(P2.y);
    temp4[1]=colbox[P2.character][P2.col][0][1][1]+int(P2.y);
    while(!(temp[0]>=temp4[0]||temp2[0]<=temp3[0]||temp[1]>=temp4[1]||temp2[1]<=temp3[1])){
        if(P1.x<P2.x){
            P1.x-=1;
            temp[0]-=1;
            P2.x+=1;
            temp3[0]+=1;
        }
        else{
            P1.x+=1;
            temp[0]+=1;
            P2.x-=1;
            temp3[0]-=1;
        }
    }

    if(*superstop==0)collisionchecks(&P1,&P2,overlap,&*framedata);
    if(*superstop==0)collisionchecks(&P2,&P1,overlap2,&*framedata);


    //projectile collision
    for(short j=0;j<P1.proj.size();j++){
            if(P1.proj[j].hitstopped==0&&P1.proj[j].hitcount>0){
            for(short i=0;i<hurtboxcount[P1.character][P1.proj[j].frame];i++){
            if(P1.proj[j].right==true){
                temp[0]=hurtbox[P1.character][P1.proj[j].frame][i][0][0]+int(P1.proj[j].x);
                temp[1]=hurtbox[P1.character][P1.proj[j].frame][i][0][1]+int(P1.proj[j].y);
                temp2[0]=hurtbox[P1.character][P1.proj[j].frame][i][1][0]+int(P1.proj[j].x);
                temp2[1]=hurtbox[P1.character][P1.proj[j].frame][i][1][1]+int(P1.proj[j].y);
            }
            else{
                temp[0]=-hurtbox[P1.character][P1.proj[j].frame][i][1][0]+int(P1.proj[j].x);
                temp[1]=hurtbox[P1.character][P1.proj[j].frame][i][0][1]+int(P1.proj[j].y);
                temp2[0]=-hurtbox[P1.character][P1.proj[j].frame][i][0][0]+int(P1.proj[j].x);
                temp2[1]=hurtbox[P1.character][P1.proj[j].frame][i][1][1]+int(P1.proj[j].y);
            }

            for(short l=0;l<P2.proj.size();l++){
                if(P2.proj[l].hitstopped==0&&P2.proj[l].hitcount>0){
                for(short k=0;k<hurtboxcount[P2.character][P2.proj[l].frame];k++){
                    if(P2.proj[l].right==true){
                        temp3[0]=hurtbox[P2.character][P2.proj[l].frame][k][0][0]+int(P2.proj[l].x);
                        temp3[1]=hurtbox[P2.character][P2.proj[l].frame][k][0][1]+int(P2.proj[l].y);
                        temp4[0]=hurtbox[P2.character][P2.proj[l].frame][k][1][0]+int(P2.proj[l].x);
                        temp4[1]=hurtbox[P2.character][P2.proj[l].frame][k][1][1]+int(P2.proj[l].y);
                    }
                    else{
                        temp3[0]=-hurtbox[P2.character][P2.proj[l].frame][k][1][0]+int(P2.proj[l].x);
                        temp3[1]=hurtbox[P2.character][P2.proj[l].frame][k][0][1]+int(P2.proj[l].y);
                        temp4[0]=-hurtbox[P2.character][P2.proj[l].frame][k][0][0]+int(P2.proj[l].x);
                        temp4[1]=hurtbox[P2.character][P2.proj[l].frame][k][1][1]+int(P2.proj[l].y);
                    }
                }
                if(!(temp[0]>=temp4[0]||temp2[0]<=temp3[0]||temp[1]>=temp4[1]||temp2[1]<=temp3[1])){P1.proj[j].hitcount--;P2.proj[j].hitcount--;break;}
                    }
                }
            }
            }
    }

    if(P1.meter>1000)P1.meter=1000;
    if(P2.meter>1000)P2.meter=1000;

    while((P1.x+bgx<32&&P2.x+bgx<224)||(P2.x+bgx<32&&P1.x+bgx<224)){
            if(bgx<125)bgx+=1;
            else break;
    }
    while((P1.x+bgx>224&&P2.x+bgx>32)||(P2.x+bgx>224&&P1.x+bgx>32)){
            if(bgx>-119)bgx-=1;
            else break;
    }
    while(P1.x+bgx<11)P1.x++;
    while(P1.x+bgx>245)P1.x--;
    while(P2.x+bgx<11)P2.x++;
    while(P2.x+bgx>245)P2.x--;
    if(P1.hitstopped>0)P1.hitstopped--;
    if(P2.hitstopped>0)P2.hitstopped--;
    #undef P1
    #undef P2
}

void drawstuff(sf::RenderWindow& window,sf::RenderTexture& renderTexture,player *p1,player *p2,superflash sf,healthbar hb,meterbar mb,timeui time,comboui cui,inputlist p1ilist,inputlist p2ilist,
            charactergraphics p1graphics,charactergraphics p2graphics,charactergraphics p1shadow,charactergraphics p2shadow,menu menus,sf::Shader &shader,textbox tbox,
            sf::Text combotext,sf::Text dtext,sf::Text frametext,std::deque<char>p1keylist,std::deque<char>p2keylist,short framedata,std::string dialogue,short superstop,
            bool pause,bool seeboxes,bool keylistshow,bool framedatashow,bool *playertop,sf::Sprite background,sf::Sprite healthui,sf::Sprite meterui,sf::Texture p1texture,sf::Texture p2texture,sf::Sprite pixelshadowthing,short rounds,
            sf::Sprite engage,sf::Texture engagetexture,short *matchintro){
    #define P1 (*p1)
    #define P2 (*p2)

    box collisionbox1,collisionbox2,Hitbox1,Hurtbox1,Hitbox2,Hurtbox2,P_Hitbox1[32],P_Hitbox2[32];
    collisionbox1.create(floor(P1.x+bgx),int(P1.y),colbox[P1.character][P1.col],P1.right,1,sf::Color::White);
    collisionbox2.create(floor(P2.x+bgx),int(P2.y),colbox[P2.character][P2.col],P2.right,1,sf::Color::White);
    Hurtbox1.create(floor(P1.x+bgx),int(P1.y),hurtbox[P1.character][P1.frame],P1.right,hurtboxcount[P1.character][P1.frame],sf::Color::Blue);
    Hitbox1.create(floor(P1.x+bgx),int(P1.y),hitbox[P1.character][P1.hbframe],P1.right,hitboxcount[P1.character][P1.hbframe],sf::Color::Red);
    Hurtbox2.create(floor(P2.x+bgx),int(P2.y),hurtbox[P2.character][P2.frame],P2.right,hurtboxcount[P2.character][P2.frame],sf::Color::Blue);
    Hitbox2.create(floor(P2.x+bgx),int(P2.y),hitbox[P2.character][P2.hbframe],P2.right,hitboxcount[P2.character][P2.hbframe],sf::Color::Red);
    for(short i=0;i<P1.proj.size();i++)P_Hitbox1[i].create(floor(P1.proj[i].x+bgx),int(P1.proj[i].y),hurtbox[P1.character][P1.proj[i].frame],P1.proj[i].right,hurtboxcount[P1.character][P1.proj[i].frame],sf::Color::Red);
    for(short i=0;i<P2.proj.size();i++)P_Hitbox2[i].create(floor(P2.proj[i].x+bgx),int(P2.proj[i].y),hurtbox[P2.character][P2.proj[i].frame],P2.proj[i].right,hurtboxcount[P2.character][P2.proj[i].frame],sf::Color::Red);

    if(superstop>0){if(P1.super)sf.create(superstop,P1.y-8);else if(P2.super)sf.create(superstop,P2.y-8);}
    /*
    if(combo>1&&cui.slide==0&&cui.slide2==0){cui.slide=64;cui.slide2=12;}
    if(cui.slide>0)cui.slide-=cui.slide2--;
    if(cui.slide<0){cui.slide=0;}
    if(cui.slide==0&&combo==0)cui.slide2=0;
    */
    std::string tempstr;
    tempstr = std::to_string(combo);
    combotext.setString(tempstr);
    combotext.setOrigin({32,0});
    if(framedata<0){tempstr = std::to_string(-framedata);tempstr="-"+tempstr;}
    else {tempstr = std::to_string(framedata);}
    frametext.setString(tempstr);
    frametext.setOrigin({32,0});
    if (combo>1&&(P2.comboed||P2.kdowned))cui.create(true,sf::Color(170*((colorpalettes[p1color][0]/4)%2) + 85*(colorpalettes[p1color][0]/8), (1-(colorpalettes[p1color][0]==6)/3.0)*170*((colorpalettes[p1color][0]/2)%2) + 85*(colorpalettes[p1color][0]/8), 170*(colorpalettes[p1color][0]%2) + 85*(colorpalettes[p1color][0]/8)),
    sf::Color(170*((colorpalettes[p1color][1]/4)%2) + 85*(colorpalettes[p1color][1]/8), (1-(colorpalettes[p1color][1]==6)/3.0)*170*((colorpalettes[p1color][1]/2)%2) + 85*(colorpalettes[p1color][1]/8), 170*(colorpalettes[p1color][1]%2) + 85*(colorpalettes[p1color][1]/8)));
    else if(combo>1)cui.create(false,sf::Color(170*((colorpalettes[p2color][0]/4)%2) + 85*(colorpalettes[p2color][0]/8), (1-(colorpalettes[p2color][0]==6)/3.0)*170*((colorpalettes[p2color][0]/2)%2) + 85*(colorpalettes[p2color][0]/8), 170*(colorpalettes[p2color][0]%2) + 85*(colorpalettes[p2color][0]/8)),
    sf::Color(170*((colorpalettes[p2color][1]/4)%2) + 85*(colorpalettes[p2color][1]/8), (1-(colorpalettes[p2color][1]==6)/3.0)*170*((colorpalettes[p2color][1]/2)%2) + 85*(colorpalettes[p2color][1]/8), 170*(colorpalettes[p2color][1]%2) + 85*(colorpalettes[p2color][1]/8)));

    p1ilist.create(p1keylist,true);p2ilist.create(p2keylist,false);hb.create(P1.hp,P2.hp,P1.maxhp,P2.maxhp);mb.create(P1.meter,P2.meter);

    healthui.setPosition({0.f,8.f});
    sf.setPosition({0,0});hb.setPosition({0,8});
    p1graphics.setPosition({floor(P1.x-64+bgx),floor(P1.y-64)});p1shadow.setPosition({floor(P1.x-64+bgx),floor(184+(P1.y-176)/8)});
    p2graphics.setPosition({floor(P2.x-64+bgx),floor(P2.y-64)});p2shadow.setPosition({floor(P2.x-64+bgx),floor(184+(P2.y-176)/8)});
    background.setPosition({floor(bgx-125),0.f});frametext.setPosition({125.f,33.f});

    p1graphics.setanim(P1.anim,P1.right);p2graphics.setanim(P2.anim,P2.right);p1shadow.setanim(P1.anim,P1.right);p2shadow.setanim(P2.anim,P2.right);


    window.clear();renderTexture.clear();

    if((P2.character==2&&(P2.gimmick[1]>0))||(P1.character==2&&(P1.gimmick[1]>0)))background.setColor(sf::Color (0, 170, 170));
    else background.setColor(sf::Color (255, 255, 255));
    renderTexture.draw(background);
    renderTexture.draw(p1shadow);renderTexture.draw(p2shadow);
    if(!P1.proj.empty()){
        charactergraphics p_graphics[P1.proj.size()];
        for(short i=0;i<P1.proj.size();i++){
            p_graphics[i].load(p1texture,true);
            p_graphics[i].setanim(animlib[P1.character][P1.proj[i].frame],P1.proj[i].right);
            p_graphics[i].setPosition({floor(P1.proj[i].x-64+bgx),floor(184+(P1.proj[i].y-176)/8)});
            renderTexture.draw(p_graphics[i]);
        }
    }
    if(!P2.proj.empty()){
        charactergraphics p_graphics[P2.proj.size()];
        for(short i=0;i<P2.proj.size();i++){
            p_graphics[i].load(p2texture,true);
            p_graphics[i].setanim(animlib[P2.character][P2.proj[i].frame],P2.proj[i].right);
            p_graphics[i].setPosition({floor(P2.proj[i].x-64+bgx),floor(184+(P2.proj[i].y-176)/8)});
            renderTexture.draw(p_graphics[i]);
        }
    }

    if(superstop>0){renderTexture.draw(pixelshadowthing);renderTexture.draw(sf);}

    if(P1.hit)*playertop=true;else if(P2.hit)*playertop=false;

    shader.setUniform("texture", sf::Shader::CurrentTexture);


    if(*playertop){
        if((P2.character==2&&(P2.gimmick[0]>0||P2.gimmick[1]>0)))for(short i=0;i<3;i++)colorpalettes[p1color][i]=15-colorpalettes[p1color][i];
        shader.setUniform("color1",float(colorpalettes[p1color][0]));
        shader.setUniform("color3",float(colorpalettes[p1color][1]));
        shader.setUniform("color2",float(colorpalettes[p1color][2]));
        if((P2.character==2&&(P2.gimmick[0]>0||P2.gimmick[1]>0)))for(short i=0;i<3;i++)colorpalettes[p1color][i]=15-colorpalettes[p1color][i];
        renderTexture.draw(p1graphics,&shader);
        if(!P1.proj.empty()){
        charactergraphics p_graphics[P1.proj.size()];
            for(short i=0;i<P1.proj.size();i++){
                p_graphics[i].load(p1texture,false);
                p_graphics[i].setanim(animlib[P1.character][P1.proj[i].frame],P1.proj[i].right);
                p_graphics[i].setPosition({round(P1.proj[i].x-64+bgx),round(P1.proj[i].y-64)});
                renderTexture.draw(p_graphics[i],&shader);
            }
        }
    }

    if((P1.character==2&&(P1.gimmick[0]>0||P1.gimmick[1]>0)))for(short i=0;i<3;i++)colorpalettes[p2color][i]=15-colorpalettes[p2color][i];
        shader.setUniform("color1",float(colorpalettes[p2color][0]));
        shader.setUniform("color3",float(colorpalettes[p2color][1]));
        shader.setUniform("color2",float(colorpalettes[p2color][2]));
    if((P1.character==2&&(P1.gimmick[0]>0||P1.gimmick[1]>0)))for(short i=0;i<3;i++)colorpalettes[p2color][i]=15-colorpalettes[p2color][i];
    renderTexture.draw(p2graphics,&shader);
    if(!P2.proj.empty()){
    charactergraphics p_graphics[P2.proj.size()];
        for(short i=0;i<P2.proj.size();i++){
            p_graphics[i].load(p2texture,false);
            p_graphics[i].setanim(animlib[P2.character][P2.proj[i].frame],P2.proj[i].right);
            p_graphics[i].setPosition({round(P2.proj[i].x-64+bgx),round(P2.proj[i].y-64)});
            renderTexture.draw(p_graphics[i],&shader);
        }
    }

    if(!*playertop){
        if((P2.character==2&&(P2.gimmick[0]>0||P2.gimmick[1]>0)))for(short i=0;i<3;i++)colorpalettes[p1color][i]=15-colorpalettes[p1color][i];
        shader.setUniform("color1",float(colorpalettes[p1color][0]));
        shader.setUniform("color3",float(colorpalettes[p1color][1]));
        shader.setUniform("color2",float(colorpalettes[p1color][2]));
        if((P2.character==2&&(P2.gimmick[0]>0||P2.gimmick[1]>0)))for(short i=0;i<3;i++)colorpalettes[p1color][i]=15-colorpalettes[p1color][i];
        renderTexture.draw(p1graphics,&shader);
        if(!P1.proj.empty()){
        charactergraphics p_graphics[P1.proj.size()];
            for(short i=0;i<P1.proj.size();i++){
                p_graphics[i].load(p1texture,false);
                p_graphics[i].setanim(animlib[P1.character][P1.proj[i].frame],P1.proj[i].right);
                p_graphics[i].setPosition({round(P1.proj[i].x-64+bgx),round(P1.proj[i].y-64)});
                renderTexture.draw(p_graphics[i],&shader);
            }
        }
    }


    for(short i=0;i<effectslist.size();i++)renderTexture.draw(effectslist[i]);


    renderTexture.draw(hb);renderTexture.draw(healthui);

    meterui.setPosition({0,208});meterui.setScale({1.0f,1.0f});renderTexture.draw(meterui);
    meterui.setPosition({256,208});meterui.setScale({-1.0f,1.0f});renderTexture.draw(meterui);
    renderTexture.draw(mb);

    if(roundframecount/60<99)time.timeset(99-roundframecount/60);
    else time.timeset(0);
    time.setPosition({0,8});renderTexture.draw(time);

    time.timeset(P1.meter/100);time.setPosition({-107,208});renderTexture.draw(time);
    time.timeset(P2.meter/100);time.setPosition({109,208});renderTexture.draw(time);

    sf::RectangleShape square({8.f,8.f});
    square.setFillColor(sf::Color::Black);
    for(unsigned char i=0;i<rounds;i++){
        square.setFillColor(sf::Color::Black);square.setSize({8,8});
        square.setPosition({96.f-i*12.f,32.f});renderTexture.draw(square);
        square.setPosition({152.f+i*12.f,32.f});renderTexture.draw(square);
        square.setSize({4,4});
        if(P1.wins>i)square.setFillColor(sf::Color::Green);else square.setFillColor(sf::Color(170,170,170));
        square.setPosition({98.f-i*12.f,34.f});renderTexture.draw(square);
        if(P2.wins>i)square.setFillColor(sf::Color::Green);else square.setFillColor(sf::Color(170,170,170));
        square.setPosition({154.f+i*12.f,34.f});renderTexture.draw(square);
    }


    if(keylistshow){renderTexture.draw(p1ilist);renderTexture.draw(p2ilist);}

    if(combo>1){
        if(P2.comboed||P2.kdowned){
            shader.setUniform("color1",float(colorpalettes[p1color][0]));
            shader.setUniform("color3",float(colorpalettes[p1color][1]));
            shader.setUniform("color2",float(colorpalettes[p1color][2]));
            shader.setUniform("color4",float(colorpalettes[p1color][2]));}
        else{shader.setUniform("color1",float(colorpalettes[p2color][0]));
            shader.setUniform("color3",float(colorpalettes[p2color][1]));
            shader.setUniform("color2",float(colorpalettes[p2color][2]));
            shader.setUniform("color4",float(colorpalettes[p2color][2]));}
        renderTexture.draw(cui,&shader);
        if(P2.comboed||P2.kdowned){combotext.setPosition({36.f/*-cui.slide*/,26.f});combotext.setFillColor(sf::Color(170*((colorpalettes[p1color][1]/4)%2) + 85*(colorpalettes[p1color][1]/8), (1-(colorpalettes[p1color][1]==6)/3.0)*170*((colorpalettes[p1color][1]/2)%2) + 85*(colorpalettes[p1color][1]/8), 170*(colorpalettes[p1color][1]%2) + 85*(colorpalettes[p1color][1]/8)));}
        else {combotext.setPosition({248.f/*+cui.slide*/,26.f});combotext.setFillColor(sf::Color(170*((colorpalettes[p2color][1]/4)%2) + 85*(colorpalettes[p2color][1]/8), (1-(colorpalettes[p2color][1]==6)/3.0)*170*((colorpalettes[p2color][1]/2)%2) + 85*(colorpalettes[p2color][1]/8), 170*(colorpalettes[p2color][1]%2) + 85*(colorpalettes[p2color][1]/8)));}
        renderTexture.draw(combotext);

        if(P2.comboed||P2.kdowned){combotext.setPosition({35.f/*-cui.slide*/,27.f});combotext.setFillColor(sf::Color(170*((colorpalettes[p1color][2]/4)%2) + 85*(colorpalettes[p1color][2]/8), (1-(colorpalettes[p1color][2]==6)/3.0)*170*((colorpalettes[p1color][2]/2)%2) + 85*(colorpalettes[p1color][2]/8), 170*(colorpalettes[p1color][2]%2) + 85*(colorpalettes[p1color][2]/8)));}
        else{combotext.setPosition({247.f/*+cui.slide*/,27.f});combotext.setFillColor(sf::Color(170*((colorpalettes[p2color][2]/4)%2) + 85*(colorpalettes[p2color][2]/8), (1-(colorpalettes[p2color][2]==6)/3.0)*170*((colorpalettes[p2color][2]/2)%2) + 85*(colorpalettes[p2color][2]/8), 170*(colorpalettes[p2color][2]%2) + 85*(colorpalettes[p2color][2]/8)));}
        renderTexture.draw(combotext);
    }

    if(*matchintro>0&&dialogue.empty()){
        if(!pause)*matchintro-=1;
        square.setSize({256.f,8.f});
        square.setFillColor(sf::Color::White);
        if(*matchintro>105){engage.setPosition({float(*matchintro-105)*48.f,0});square.setPosition({float(*matchintro-105)*-32.f,144.f});}
        else if(*matchintro>90){engage.setPosition({float((*matchintro)%3),0});square.setPosition({0,144.f});}
        else if(*matchintro>60){engage.setPosition({0,0});square.setPosition({0,144.f});}
        else if(*matchintro>45){engage.setTexture(engagetexture);engage.setPosition({0,float(*matchintro-45)*24.f});square.setPosition({0,float(*matchintro-45)*-16.f+144.f});}
        else if(*matchintro>30){engage.setTexture(engagetexture);engage.setPosition({0,float(*matchintro%3)});square.setPosition({0,144.f});}
        else {engage.setTexture(engagetexture);engage.setPosition({0,0});square.setPosition({0,144.f});}
        renderTexture.draw(square);
        renderTexture.draw(engage);
    }

    if(!dialogue.empty()){renderTexture.draw(tbox);renderTexture.draw(dtext);}

    if(framedatashow)renderTexture.draw(frametext);

    if(pause){renderTexture.draw(pixelshadowthing);renderTexture.draw(menus);}renderTexture.display();
    const sf::Texture& texture = renderTexture.getTexture();sf::Sprite rt(texture);

    window.draw(rt);

    if(seeboxes){
        window.draw(collisionbox1);window.draw(collisionbox2);
        if(P1.iframes==0)window.draw(Hurtbox1);if(P2.iframes==0)window.draw(Hurtbox2);
        window.draw(Hitbox1);window.draw(Hitbox2);
        for(short i=0;i<P1.proj.size();i++)window.draw(P_Hitbox1[i]);
        for(short i=0;i<P2.proj.size();i++)window.draw(P_Hitbox2[i]);
    }
    #undef P1
    #undef P2
}

int main()
{
    sf::RenderWindow window(sf::VideoMode({256,240}), "Prosaic at Best");
    
    std::optional event=window.pollEvent();
    sf::Keyboard::Key upkey1=sf::Keyboard::Key::W,downkey1=sf::Keyboard::Key::S,leftkey1=sf::Keyboard::Key::A,rightkey1=sf::Keyboard::Key::D,
                lightkey1=sf::Keyboard::Key::U,mediumkey1=sf::Keyboard::Key::I,heavykey1=sf::Keyboard::Key::O,
                grabkey1=sf::Keyboard::Key::H,specialkey1=sf::Keyboard::Key::K,
                upkey2=sf::Keyboard::Key::Up,downkey2=sf::Keyboard::Key::Down,leftkey2=sf::Keyboard::Key::Left,rightkey2=sf::Keyboard::Key::Right,
                lightkey2=sf::Keyboard::Key::Z,mediumkey2=sf::Keyboard::Key::X,heavykey2=sf::Keyboard::Key::C,
                grabkey2=sf::Keyboard::Key::LControl,specialkey2=sf::Keyboard::Key::LAlt;
    sf::Texture titletexture,pixelshadowthing;
    if (!titletexture.loadFromFile("assets/images/title.png"))window.close();
    if(!pixelshadowthing.loadFromFile("assets/images/darkfilter.png"))window.close();
    sf::Sprite pausedark(pixelshadowthing);
    sf::Sprite title(titletexture);

    std::vector<sf::SoundChannel>channelMap{sf::SoundChannel::FrontLeft,sf::SoundChannel::FrontRight};
    sf::SoundBuffer soundfx[256];
    if(!soundfx[0].loadFromFile("assets/sounds/hit1.wav"))window.close();if(!soundfx[1].loadFromFile("assets/sounds/hit2.wav"))window.close();
    if(!soundfx[2].loadFromFile("assets/sounds/hit3.wav"))window.close();if(!soundfx[3].loadFromFile("assets/sounds/hit4.wav"))window.close();
    if(!soundfx[4].loadFromFile("assets/sounds/Sinclair1.wav"))window.close();if(!soundfx[5].loadFromFile("assets/sounds/swing1.wav"))window.close();
    if(!soundfx[6].loadFromFile("assets/sounds/jump.wav"))window.close();if(!soundfx[7].loadFromFile("assets/sounds/land.wav"))window.close();
    if(!soundfx[8].loadFromFile("assets/sounds/swing2.wav"))window.close();if(!soundfx[9].loadFromFile("assets/sounds/toss.wav"))window.close();
    if(!soundfx[10].loadFromFile("assets/sounds/super.wav"))window.close();if(!soundfx[11].loadFromFile("assets/sounds/Sinclairsuper.wav"))window.close();
    if(!soundfx[12].loadFromFile("assets/sounds/block.wav"))window.close();if(!soundfx[13].loadFromFile("assets/sounds/Sinclairtaunt.wav"))window.close();
    for(int j=0;j<14;j++){
        std::vector<std::int16_t> samples;
        for(int i=0;i<soundfx[j].getSampleCount();i++){
            samples.push_back((soundfx[j].getSamples()[i]/16)*16);
        }
        if(!soundfx[j].loadFromSamples(samples.data(),samples.size(),2,8000,channelMap))window.close();
    }
    sf::Sound hitsound(soundfx[0]),voice(soundfx[0]);hitsound.setVolume(75.f);voice.setVolume(150.f);
    std::deque<sf::Sound> sound;
    sf::Music music("assets/music/practice mode.wav");music.setLooping(true);music.setVolume(50.f);
	menu menus;
	if (!menus.load("assets/images/menu.png")){}
	menus.setmenu(6,144,120,0,16,0);
    window.setFramerateLimit(60);
    sf::RenderTexture renderTexture;
    if (!renderTexture.resize({256, 240})){}
    sf::Font font;
    if(!font.openFromFile("assets/fonts/PerfectDOSVGA437.ttf"))window.close();
    sf::UdpSocket socket;
    socket.setBlocking(false);
    char p1input[5]={'5','0','0','0','0'},p2input[5]={'5','0','0','0','0'},menuup='0',menudown='0',menuleft='0',menuright='0',menuconfirm='0',menucancel='0',colorkey='0',
    menuup2='0',menudown2='0',menuleft2='0',menuright2='0',menuconfirm2='0',menucancel2='0',colorkey2='0';
    short menuselect=0,ipint[4]={0,0,0,0};
    bool gamequit=false,p1control=true;
    std::string dialogue;
    sf::Shader shader;
    if (!shader.loadFromFile("assets/shaders/shader.frag",sf::Shader::Type::Fragment)){}


    while(window.isOpen()){
        windowset(window,&gamequit);

        keypresscheck(lightkey1,&menuconfirm);
        keypresscheck(upkey1,&menuup);
        keypresscheck(downkey1,&menudown);

        if(menuup=='2'){menuselect--;if(menuselect<0)menuselect=5;}
        else if(menudown=='2'){menuselect++;if(menuselect>5)menuselect=0;}
        menus.setcolor(6,false,menuselect);

        window.clear();
        renderTexture.clear();

        renderTexture.draw(title);
        renderTexture.draw(menus);
        renderTexture.display();
        const sf::Texture& texture = renderTexture.getTexture();
        sf::Sprite rt(texture);
        window.draw(rt);
        window.display();

        if(menuconfirm=='2'){
        if(menuselect==5)window.close();
        else if(menuselect==4){//key mapping
            sf::Text keytext(font);
            keytext.setCharacterSize(16);keytext.setFillColor(sf::Color::White);
            unsigned char keyselect=0;
            bool replacemode=false;
            while (window.isOpen()&&!gamequit){
                windowset(window,&gamequit);
                keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
                keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
                keypresscheck(leftkey1,&menuleft);keypresscheck(rightkey1,&menuright);
                if(!replacemode){
                if(menuright=='2'&&menuleft!='2')keyselect++;
                if(menuright!='2'&&menuleft=='2')keyselect--;
                if(keyselect==255)keyselect=17;
                else if(keyselect>17)keyselect=0;
                if(menucancel=='2')break;
                if(menuconfirm=='2'){replacemode=true;menuconfirm='1';}
                }
                std::string keystring("P"),keydescription;
                if(keyselect<9)keystring+='1';
                else keystring+='2';
                switch(keyselect){
                    case 0:case 9:{std::string tempstr(" Up");keystring+=tempstr;break;}
                    case 1:case 10:{std::string tempstr(" Down");keystring+=tempstr;break;}
                    case 2:case 11:{std::string tempstr(" Left");keystring+=tempstr;break;}
                    case 3:case 12:{std::string tempstr(" Right");keystring+=tempstr;break;}
                    case 4:case 13:{std::string tempstr(" Light");keystring+=tempstr;break;}
                    case 5:case 14:{std::string tempstr(" Medium");keystring+=tempstr;break;}
                    case 6:case 15:{std::string tempstr(" Heavy");keystring+=tempstr;break;}
                    case 7:case 16:{std::string tempstr(" Special");keystring+=tempstr;break;}
                    case 8:case 17:{std::string tempstr(" Grab");keystring+=tempstr;break;}
                }
                switch(keyselect){
                    case 0:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(upkey1));break;}
                    case 1:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(downkey1));break;}
                    case 2:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(leftkey1));break;}
                    case 3:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(rightkey1));break;}
                    case 4:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(lightkey1));break;}
                    case 5:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(mediumkey1));break;}
                    case 6:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(heavykey1));break;}
                    case 7:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(specialkey1));break;}
                    case 8:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(grabkey1));break;}
                    case 9:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(upkey2));break;}
                    case 10:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(downkey2));break;}
                    case 11:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(leftkey2));break;}
                    case 12:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(rightkey2));break;}
                    case 13:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(lightkey2));break;}
                    case 14:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(mediumkey2));break;}
                    case 15:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(heavykey2));break;}
                    case 16:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(specialkey2));break;}
                    case 17:{keydescription=sf::Keyboard::getDescription(sf::Keyboard::delocalize(grabkey2));break;}
                }
                keystring+=' ';keystring+=keydescription;
                if(replacemode){
                    std::string temp("press new key");
                    keytext.setString(temp);
                    if(menuconfirm!='1')
                        for(unsigned char i=0;i<=100;i++)
                            if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key(i))){
                                switch(keyselect){
                                case 0:{upkey1=sf::Keyboard::Key(i);break;}
                                case 1:{downkey1=sf::Keyboard::Key(i);break;}
                                case 2:{leftkey1=sf::Keyboard::Key(i);break;}
                                case 3:{rightkey1=sf::Keyboard::Key(i);break;}
                                case 4:{lightkey1=sf::Keyboard::Key(i);break;}
                                case 5:{mediumkey1=sf::Keyboard::Key(i);break;}
                                case 6:{heavykey1=sf::Keyboard::Key(i);break;}
                                case 7:{specialkey1=sf::Keyboard::Key(i);break;}
                                case 8:{grabkey1=sf::Keyboard::Key(i);break;}
                                case 9:{upkey2=sf::Keyboard::Key(i);break;}
                                case 10:{downkey2=sf::Keyboard::Key(i);break;}
                                case 11:{leftkey2=sf::Keyboard::Key(i);break;}
                                case 12:{rightkey2=sf::Keyboard::Key(i);break;}
                                case 13:{lightkey2=sf::Keyboard::Key(i);break;}
                                case 14:{mediumkey2=sf::Keyboard::Key(i);break;}
                                case 15:{heavykey2=sf::Keyboard::Key(i);break;}
                                case 16:{specialkey2=sf::Keyboard::Key(i);break;}
                                case 17:{grabkey2=sf::Keyboard::Key(i);break;}
                                }
                                replacemode=false;
                                }
                }
                else keytext.setString(keystring);

                window.clear();
                renderTexture.clear();
                renderTexture.draw(keytext);
                renderTexture.display();
                const sf::Texture& texture = renderTexture.getTexture();
                sf::Sprite rt(texture);
                window.draw(rt);
                window.display();
            }
        }
        else if(menuselect==1){//story mode
            menus.setmenu(6,176,48,0,24,2);
            unsigned char currentcolor=0,currentmap=0,mapxsize=14,mapysize=8,mapx=3,mapy=3,npccount=1,currentleader=0,currentnpc=255,cpudifficulty=0,cpuaggressive=0,charactercolors[16]={0,0,1},dir=0;//0=up,1=right,2=down,3=left
            std::deque<unsigned char> dportrait;
            short dialoguecnt=0;
            float partyhp[16]={450.f,0.f,800.f},partymaxhp[16]={500.f,0.f,800.f};
            bool partylist[16]={1,0,1},partylockedmoves[16][64]={},//true==lockedmove
            map[64][256]
                {{
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,1,1,0,0,1,0,0,0,0,0,0,1,
                1,0,1,1,0,1,1,1,0,1,0,1,1,1,
                1,0,0,0,0,0,0,1,0,1,0,1,1,1,
                1,0,1,1,1,1,0,1,0,1,0,0,0,1,
                1,0,1,1,0,1,0,0,0,1,0,1,1,1,
                1,0,0,1,0,0,0,1,1,1,0,0,0,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1}},pause=false,statscreen=false,Enterkey=false;
            storymapui mapui;
            if(!mapui.load("assets/images/walltexture.png")){window.close();gamequit=true;}
            mapcompass compass;
            sf::Text dtext(font);dtext.setCharacterSize(16);
            sf::Texture stattexture,icontexture,npctexture[64],chartalktexture;
            if(!stattexture.loadFromFile("assets/images/characterstatart.png")){window.close();gamequit=true;}
            if(!icontexture.loadFromFile("assets/images/charactericon.png")){window.close();gamequit=true;}
            if(!npctexture[0].loadFromFile("assets/images/npc0.png")){window.close();gamequit=true;}
            if(!chartalktexture.loadFromFile("assets/images/chartalk.png")){window.close();gamequit=true;}
            mapnpc npcs[64][16];
            npcs[0][0].dir=3;npcs[0][0].x=5;npcs[0][0].y=1;npcs[0][0].battle=true;
            bool checkwall[10]={false};
            sf::Color storycolors[4];
            while (window.isOpen()&&!gamequit){
                windowset(window,&gamequit);
                keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
                keypresscheck(heavykey1,&colorkey);
                keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
                keypresscheck(leftkey1,&menuleft);keypresscheck(rightkey1,&menuright);

                if(colorkey=='2'){
                    currentcolor++;
                    if(currentcolor==6)currentcolor=0;
                }
                for(unsigned char i=0;i<4;i++)storycolors[i]=sf::Color(CGAcolor(cgapalettes,currentcolor,i));
                dtext.setFillColor(storycolors[3]);
                
                if(!dialogue.empty()){//dialogue stuff
                        char temp='$';
                        dtext.setString(dialogue.substr(0,dialoguecnt));
                            if(dialogue[dialoguecnt]==temp){
                                if(menuconfirm=='2'||menucancel=='2'){dialogue.erase(0,dialoguecnt+1);dialoguecnt=0;dtext.setString(dialogue.substr(0,dialoguecnt));dportrait.pop_front();dportrait.pop_front();}
                            }
                            else{
                                if(menucancel=='2')while(dialogue[dialoguecnt+1]!=temp)dialoguecnt++;
                                else dialoguecnt++;
                            }
                        dtext.setPosition({16,196});
                    }
                else if(!pause){
                    if(menuright=='2'&&menuleft!='2')dir++;
                    if(menuleft=='2'&&menuright!='2')dir--;
                    if(dir==255)dir=3;if(dir==4)dir=0;
                    if((menuup=='2'&&menudown!='2')||(menuup!='0'&&menudown=='0'&&menucancel!='0')){
                        if(dir==0&&!map[currentmap][mapx+(mapy-1)*mapxsize])mapy--;else if(dir==1&&!map[currentmap][mapx+1+(mapy)*mapxsize])mapx++;
                        else if(dir==2&&!map[currentmap][mapx+(mapy+1)*mapxsize])mapy++;else if(dir==3&&!map[currentmap][mapx-1+(mapy)*mapxsize])mapx--;
                    }
                    if((menuup!='2'&&menudown=='2')||(menuup=='0'&&menudown!='0'&&menucancel!='0')){
                        if(dir==0&&!map[currentmap][mapx+(mapy+1)*mapxsize])mapy++;else if(dir==1&&!map[currentmap][mapx-1+(mapy)*mapxsize])mapx--;
                        else if(dir==2&&!map[currentmap][mapx+(mapy-1)*mapxsize])mapy--;else if(dir==3&&!map[currentmap][mapx+1+(mapy)*mapxsize])mapx++;
                    }
                    if(mapx==255)mapx=0;if(mapx==mapxsize)mapx--;
                    if(mapy==255)mapy=0;if(mapy==mapysize)mapy--;

                    if(menuconfirm=='2')
                    for(unsigned char i=0;i<npccount;i++)
                        if(npcs[currentmap][i].x==mapx&&npcs[currentmap][i].y==mapy){
                            currentnpc=i;
                            switch(npcs[currentmap][i].interaction){
                                case 0:{//testnpc
                                    if(currentleader==0){dialogue="Hello this one is\na test$Haha I'm a test character\ntoo good talk sir$";dportrait.insert(dportrait.begin(),{0,0,0,0});}
                                    else if(currentleader==2){dialogue="Hello this one is\na test$...What's a test?$";dportrait.insert(dportrait.begin(),{0,0, 1,1});}
                                    cpudifficulty=200;cpuaggressive=150;
                                    break;
                                }
                            }
                        }
                }
                if(npcs[currentmap][currentnpc].battle&&dialogue.empty()){//battlecode
                short rounds=1,matchintro=120;
                p1color=charactercolors[currentleader];
                unsigned char cpuactioncode=0;
                cpudir.clear();
                cpuu.clear();cpui.clear();
                cpuo.clear();cpuk.clear();
                p2input[0]='5';
                for(unsigned char i=1;i<5;i++)p2input[i]='0';
                menus.setmenu(6,92,72,0,16,1);
                player p1,p2;
                p1.color=p1color;p2.color=p2color;p1.meter=100.0;p2.meter=100.0;
                p1.character=currentleader;p2.character=npcs[currentmap][currentnpc].battlecharacter;
                superflash sf;healthbar hb;meterbar mb;
                timeui time;time.create();comboui cui;inputlist p1ilist,p2ilist;
                sf::Texture bgtexture,hutexture,p1texture,p2texture,metertexture,matchintrotexture,matchintrotexture2;
                if(!p1ilist.load("assets/images/inputicon.png")||!p2ilist.load("assets/images/inputicon.png")){window.close();gamequit=true;}
                if(!time.load("assets/images/time_ui.png")||!cui.load("assets/images/combo_ui.png")||!metertexture.loadFromFile("assets/images/meter_ui.png")){window.close();gamequit=true;}
                if(!bgtexture.loadFromFile("assets/images/stage1.png")||!hutexture.loadFromFile("assets/images/health_ui.png")){window.close();gamequit=true;}
                if(!p1texture.loadFromFile("assets/images/char"+std::to_string(p1.character)+"_sprites.png")||!p2texture.loadFromFile("assets/images/char"+std::to_string(p2.character)+"_sprites.png")){window.close();gamequit=true;}
                if(!matchintrotexture.loadFromFile("assets/images/ENGAGE.png")){window.close();gamequit=true;}
                if(!matchintrotexture2.loadFromFile("assets/images/READY OR NOT.png")){window.close();gamequit=true;}
                charactergraphics p1graphics,p2graphics,p1shadow,p2shadow;textbox tbox;

                p1graphics.load(p1texture,false);p2graphics.load(p2texture,false);
                p1shadow.load(p1texture,true);p2shadow.load(p2texture,true);
                sf::Sprite background(bgtexture),healthui(hutexture),meterui(metertexture),introsprite(matchintrotexture2);
                sf::Text combotext(font),dtext(font),frametext(font);
                combotext.setCharacterSize(32);combotext.setFillColor(sf::Color::Black);
                dtext.setCharacterSize(16);dtext.setFillColor(sf::Color::White);
                frametext.setCharacterSize(16);frametext.setFillColor(sf::Color::White);
                std::deque<char>p1keylist,p2keylist;short dialoguecnt=0;

                p1.maxhp=partymaxhp[p1.character];p2.maxhp=npcs[currentmap][currentnpc].battlehp;

                if(p1.character==2){p1.hurtframes[0]=15;p1.hurtframes[3]=17;p1.hurtframes[5]=87;p1.hurtframes[6]=88;p1.hurtframes[7]=89;p1.hurtframes[8]=90;}
                if(p2.character==2){p2.hurtframes[0]=15;p2.hurtframes[3]=17;p2.hurtframes[5]=87;p2.hurtframes[6]=88;p2.hurtframes[7]=89;p2.hurtframes[8]=90;}

                if(!music.openFromFile("assets/music/Time and time again.wav")){window.close();gamequit=true;}
                music.play();
                    while(p1.wins<rounds&&p2.wins<rounds&&!gamequit){
                    float overlap[2],overlap2[2];
                    bgx=0;
                        p1.x=100.0;p1.y=176.0;p1.hp=partyhp[p1.character];p2.x=156.0;p2.y=176.0;p2.hp=p2.maxhp;
                        for(unsigned char i=0;i<8;i++){p1.gimmick[i]=0;p2.gimmick[i]=0;}
                    short superstop=0,roundwait=90,framedata=0;
                    bool seeboxes=false,F2key=false,F3key=false,pause=false,Enterkey=false,nextframe=false,backslash=false,playertop=false,keylistshow=false,framedatashow=false;
                        p1.right=true;p2.right=false;
                    while (window.isOpen()&&!gamequit){
                        windowset(window,&gamequit);
                        if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::F3)){if(!F3key){F3key=true;if(flash)flash=false;else flash=true;}}else F3key=false;
                        if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Enter)){if(!Enterkey){menuselect=0;Enterkey=true;if(pause)pause=false;else pause=true;}}else Enterkey=false;

                        inputcode(p1input,upkey1,leftkey1,downkey1,rightkey1,lightkey1,mediumkey1,heavykey1,specialkey1,grabkey1,p1.x,p2.x);
                        cpuopponent(p2input,&cpuactioncode,&p2,&p1,cpudifficulty,cpuaggressive);

                        if((!pause||(pause&&nextframe))){//main match code stuff
                            dirkeys.push_front(p1input[0]);ukey.push_front(p1input[1]);ikey.push_front(p1input[2]);okey.push_front(p1input[3]);kkey.push_front(p1input[4]);
                            if(dirkeys.size()>20)dirkeys.pop_back();if(ukey.size()>20)ukey.pop_back();
                            if(ikey.size()>20)ikey.pop_back();if(okey.size()>20)okey.pop_back();if(kkey.size()>20)kkey.pop_back();

                            dirkeys2.push_front(p2input[0]);ukey2.push_front(p2input[1]);ikey2.push_front(p2input[2]);okey2.push_front(p2input[3]);kkey2.push_front(p2input[4]);
                            if(dirkeys2.size()>20)dirkeys2.pop_back();if(ukey2.size()>20)ukey2.pop_back();
                            if(ikey2.size()>20)ikey2.pop_back();if(okey2.size()>20)okey2.pop_back();if(kkey2.size()>20)kkey2.pop_back();

                            nextframe=false;
                            if(roundwait<=0)break;else if(p1.hp<=0||p2.hp<=0)roundwait--;
                            matchcode(&p1,&p2,dialogue,p1input,p2input,&superstop,&framedata,overlap,overlap2,matchintro);

                            if(!sound.empty()){
                                for(int i=0;i<sound.size();i++)if(sound[i].getStatus()==sf::SoundSource::Status::Stopped)sound.erase(sound.begin()+i);  
                            }
                            if(!soundfxlist.empty()){//sound effects
                                if(soundfxlist[0]>0){
                                    sf::Sound temp(soundfx[soundfxlist[0]-1]);
                                    //sound.setBuffer(soundfx[soundfxlist[0]-1]);
                                    temp.setPosition({sfxx[0],0.f,sfxx[0]<0.f?-sfxx[0]-1.f:sfxx[0]-1.f});
                                    sound.push_front(temp);
                                    sound[0].play();
                                }
                                sfxx.pop_front();
                                soundfxlist.pop_front();
                            }
                            if(!hitsfxlist.empty()){//hit sound effects
                                if(hitsfxlist[0]>0){
                                    hitsound.setBuffer(soundfx[hitsfxlist[0]-1]);
                                    hitsound.setPosition({hsfxx[0],0.f,hsfxx[0]<0.f?-hsfxx[0]-1.f:hsfxx[0]-1.f});
                                    hitsound.play();
                                }
                                hsfxx.pop_front();
                                hitsfxlist.pop_front();
                            }
                            if(!voicesfxlist.empty()){//voice effects
                                if(voicesfxlist[0]>0){
                                    voice.setBuffer(soundfx[voicesfxlist[0]-1]);
                                    voice.setPosition({vsfxx[0],0.f,vsfxx[0]<0.f?-vsfxx[0]-1.f:vsfxx[0]-1.f});
                                    voice.play();
                                }
                                vsfxx.pop_front();
                                voicesfxlist.pop_front();
                            }

                            if(superstop>0)superstop--;
                            roundframecount++;
                            for(short i=0;i<effectslist.size();i++){effectslist[i].create();if(effectslist[i].frame>effectslist[i].len)effectslist.erase(effectslist.begin()+i);}
                        }

                        menus.setcolor(6,false,menuselect);
                        if(pause){//pause menu
                            keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
                            keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
                            if(menuup=='2'){menuselect--;if(menuselect<0)menuselect=5;}
                            else if(menudown=='2'){menuselect++;if(menuselect>5)menuselect=0;}
                            if((menuconfirm=='2'&&menuselect==0)||menucancel=='2')pause=false;
                            else if(menuconfirm=='2'&&menuselect==1)if(seeboxes)seeboxes=false;else seeboxes=true;
                            else if(menuconfirm=='2'&&menuselect==2)if(keylistshow)keylistshow=false;else keylistshow=true;
                            else if(menuconfirm=='2'&&menuselect==5)gamequit=true;
                        }

                        drawstuff(window,renderTexture,&p1,&p2,sf,hb,mb,time,cui,p1ilist,p2ilist,p1graphics,p2graphics,p1shadow,p2shadow,menus,shader,tbox,combotext,
                                dtext,frametext,p1keylist,p2keylist,framedata,dialogue,superstop,pause,seeboxes,keylistshow,framedatashow,&playertop,
                                background,healthui,meterui,p1texture,p2texture,pausedark,rounds,introsprite,matchintrotexture,&matchintro);
                        window.display();
                    }

                    if(p1.hp>0&&p2.hp<=0)p1.wins++;
                    else if(p1.hp<=0&&p2.hp>0)p2.wins++;
                    dialogue.erase();
                    effectslist.clear();
                    menuselect=0;combo=0;roundframecount=0;comboscaling=100.0;
                    p1.animq.clear();p1.idleanim.clear();p1.atkfx.clear();p1.hitboxanim.clear();p1.proj.clear();
                    p1.air=false;p1.buffer=0;p1.act=0;p1.kdowned=0;p1.hit=false;
                    p2.animq.clear();p2.idleanim.clear();p2.atkfx.clear();p2.hitboxanim.clear();p2.proj.clear();
                    p2.air=false;p2.buffer=0;p2.act=0;p2.kdowned=0;p2.hit=false;
                    dirkeys.clear();ukey.clear();ikey.clear();okey.clear();kkey.clear();
                    dirkeys2.clear();ukey2.clear();ikey2.clear();okey2.clear();kkey2.clear();
                    }
                    music.stop();
                    gamequit=false;
                    menus.setmenu(6,176,48,0,24,2);
                    currentnpc=255;
                    if(p1.hp<0)p1.hp=0;
                    partyhp[p1.character]=p1.hp;
                }

                if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Enter)&&dialogue.empty()){if(!Enterkey){menuselect=0;Enterkey=true;if(pause&&statscreen){pause=false;statscreen=false;menuselect=0;}else if(pause)pause=false;else pause=true;}}else Enterkey=false;
                menus.setcolor(6,true,menuselect);
                if(statscreen&&pause){//stats menu
                    if(menuright=='2'&&menuleft!='2'){
                        menuselect++;
                        while(!partylist[menuselect]||menuselect>15){menuselect++;if(menuselect>15)menuselect=0;}
                    }
                    else if(menuleft=='2'&&menuright!='2'){
                        menuselect--;
                        while(!partylist[menuselect]||menuselect<0){menuselect--;if(menuselect<0)menuselect=15;}
                    }
                    if(menuconfirm=='2')currentleader=menuselect;
                    if(menucancel=='2'){statscreen=false;menuselect=0;}
                }
                else if(pause){//pause menu
                    if(menuup=='2'&&menudown!='2'){menuselect--;if(menuselect<0)menuselect=5;}
                    else if(menudown=='2'&&menuup!='2'){menuselect++;if(menuselect>5)menuselect=0;}
                    if(menucancel=='2')pause=false;
                    if(menuconfirm=='2'&&menuselect==0){menuselect=currentleader;statscreen=true;}
                    //else if(menuconfirm=='2'&&menuselect==2)if(keylistshow)keylistshow=false;else keylistshow=true;
                    else if(menuconfirm=='2'&&menuselect==5)gamequit=true;
                }

                for(unsigned char i=0;i<8;i++)checkwall[i]=false;
                switch(dir){
                    case 0:{
                        if(map[currentmap][mapx+1+(mapy-1)*mapxsize]!=0)checkwall[2]=true;if(map[currentmap][mapx-1+(mapy)*mapxsize]!=0)checkwall[3]=true;
                        if(map[currentmap][mapx-1+(mapy-1)*mapxsize]!=0)checkwall[0]=true;if(map[currentmap][mapx+(mapy-1)*mapxsize]!=0)checkwall[1]=true;
                        if(map[currentmap][mapx+1+(mapy)*mapxsize]!=0)checkwall[4]=true;if(map[currentmap][mapx-1+(mapy-2)*mapxsize]!=0)checkwall[5]=true;
                        if(map[currentmap][mapx+(mapy-2)*mapxsize]!=0)checkwall[6]=true;if(map[currentmap][mapx+1+(mapy-2)*mapxsize]!=0)checkwall[7]=true;
                        if(map[currentmap][mapx-2+(mapy-2)*mapxsize]!=0)checkwall[8]=true;if(map[currentmap][mapx+2+(mapy-2)*mapxsize]!=0)checkwall[9]=true;
                        break;
                    }
                    case 1:{
                        if(map[currentmap][mapx+1+(mapy-1)*mapxsize]!=0)checkwall[0]=true;if(map[currentmap][mapx+1+(mapy)*mapxsize]!=0)checkwall[1]=true;
                        if(map[currentmap][mapx+1+(mapy+1)*mapxsize]!=0)checkwall[2]=true;if(map[currentmap][mapx+(mapy-1)*mapxsize]!=0)checkwall[3]=true;
                        if(map[currentmap][mapx+(mapy+1)*mapxsize]!=0)checkwall[4]=true;if(map[currentmap][mapx+2+(mapy-1)*mapxsize]!=0)checkwall[5]=true;
                        if(map[currentmap][mapx+2+(mapy)*mapxsize]!=0)checkwall[6]=true;if(map[currentmap][mapx+2+(mapy+1)*mapxsize]!=0)checkwall[7]=true;
                        if(map[currentmap][mapx+2+(mapy-2)*mapxsize]!=0)checkwall[8]=true;if(map[currentmap][mapx+2+(mapy+2)*mapxsize]!=0)checkwall[9]=true;
                        break;
                    }
                    case 2:{
                        if(map[currentmap][mapx+1+(mapy+1)*mapxsize]!=0)checkwall[0]=true;if(map[currentmap][mapx+(mapy+1)*mapxsize]!=0)checkwall[1]=true;
                        if(map[currentmap][mapx-1+(mapy+1)*mapxsize]!=0)checkwall[2]=true;if(map[currentmap][mapx+1+(mapy)*mapxsize]!=0)checkwall[3]=true;
                        if(map[currentmap][mapx-1+(mapy)*mapxsize]!=0)checkwall[4]=true;if(map[currentmap][mapx+1+(mapy+2)*mapxsize]!=0)checkwall[5]=true;
                        if(map[currentmap][mapx+(mapy+2)*mapxsize]!=0)checkwall[6]=true;if(map[currentmap][mapx-1+(mapy+2)*mapxsize]!=0)checkwall[7]=true;
                        if(map[currentmap][mapx+2+(mapy+2)*mapxsize]!=0)checkwall[8]=true;if(map[currentmap][mapx-2+(mapy+2)*mapxsize]!=0)checkwall[9]=true;
                        break;
                    }
                    case 3:{
                        if(map[currentmap][mapx-1+(mapy+1)*mapxsize]!=0)checkwall[0]=true;if(map[currentmap][mapx-1+(mapy)*mapxsize]!=0)checkwall[1]=true;
                        if(map[currentmap][mapx-1+(mapy-1)*mapxsize]!=0)checkwall[2]=true;if(map[currentmap][mapx+(mapy+1)*mapxsize]!=0)checkwall[3]=true;
                        if(map[currentmap][mapx+(mapy-1)*mapxsize]!=0)checkwall[4]=true;if(map[currentmap][mapx-2+(mapy+1)*mapxsize]!=0)checkwall[5]=true;
                        if(map[currentmap][mapx-2+(mapy)*mapxsize]!=0)checkwall[6]=true;if(map[currentmap][mapx-2+(mapy-1)*mapxsize]!=0)checkwall[7]=true;
                        if(map[currentmap][mapx-2+(mapy+2)*mapxsize]!=0)checkwall[8]=true;if(map[currentmap][mapx-2+(mapy-2)*mapxsize]!=0)checkwall[9]=true;
                        break;
                    }
                }
                mapui.create(checkwall);
                compass.create(dir,storycolors[2],storycolors[3]);
                window.clear();
                renderTexture.clear();

                sf::RectangleShape rectangle({4.f, 4.f}),border({256.f,48.f}),
                                    hp({64.f, 16.f}),floor({256.f,36.f});

                border.setFillColor(storycolors[0]);

                floor.setPosition({0.f,160.f});
                floor.setFillColor(storycolors[2]);
                renderTexture.draw(floor);
                floor.setPosition({0.f,44.f});
                floor.setFillColor(storycolors[0]);
                renderTexture.draw(floor);
                
                shader.setUniform("color2",float(cgapalettes[currentcolor][0]));
                shader.setUniform("color4",float(cgapalettes[currentcolor][2]));
                shader.setUniform("color1",float(cgapalettes[currentcolor][3]));
                shader.setUniform("color3",float(cgapalettes[currentcolor][1]));
                renderTexture.draw(mapui,&shader);
                
                sf::VertexArray m_vertices;
                sf::RenderStates tempstates;
                for(unsigned char i=0;i<npccount;i++){
                    tempstates.texture=&npctexture[0];tempstates.shader=&shader;
                    m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
                    m_vertices.resize(16);
                    sf::Vertex* tri = &m_vertices[6];
                    tri[0].texCoords = sf::Vector2f((npcs[currentmap][i].dir-dir)*32,0);
                    tri[1].texCoords = sf::Vector2f((npcs[currentmap][i].dir-dir)*32+32,0);
                    tri[2].texCoords = sf::Vector2f((npcs[currentmap][i].dir-dir)*32+32,64);
                    tri[3].texCoords = sf::Vector2f((npcs[currentmap][i].dir-dir)*32,64);
                    tri[4].texCoords = sf::Vector2f((npcs[currentmap][i].dir-dir)*32,0);
                    tri[5].texCoords = sf::Vector2f((npcs[currentmap][i].dir-dir)*32+32,64);
                    if(npcs[currentmap][i].dir-dir==2||int(npcs[currentmap][i].dir)-dir==-2){
                        tri[0].position = sf::Vector2f(112,136);
                        tri[1].position = sf::Vector2f(144,136);
                        tri[2].position = sf::Vector2f(144,200);
                        tri[3].position = sf::Vector2f(112,200);
                        tri[4].position = sf::Vector2f(112,136);
                        tri[5].position = sf::Vector2f(144,200);
                    }
                    else if(npcs[currentmap][i].dir-dir==1||int(npcs[currentmap][i].dir)-dir==-1){
                        tri[0].position = sf::Vector2f(48,136);
                        tri[1].position = sf::Vector2f(80,136);
                        tri[2].position = sf::Vector2f(80,200);
                        tri[3].position = sf::Vector2f(48,200);
                        tri[4].position = sf::Vector2f(48,136);
                        tri[5].position = sf::Vector2f(80,200);
                    }
                    else {
                        tri[0].position = sf::Vector2f(176,136);
                        tri[1].position = sf::Vector2f(208,136);
                        tri[2].position = sf::Vector2f(208,200);
                        tri[3].position = sf::Vector2f(176,200);
                        tri[4].position = sf::Vector2f(176,136);
                        tri[5].position = sf::Vector2f(208,200);
                    }
                    if((npcs[currentmap][i].dir!=dir)&&(npcs[currentmap][i].x==mapx&&npcs[currentmap][i].y==mapy))renderTexture.draw(m_vertices,tempstates);
                    }
                renderTexture.draw(border);
                border.setPosition({0.f,192.f});
                renderTexture.draw(border);

                if(!statscreen){
                for(unsigned char i=0;i<mapxsize;i++){
                    for(unsigned char j=0;j<mapysize;j++){
                        rectangle.setPosition({4.f*i+160.f,4.f*j+8.f});
                        if(i==mapx&&j==mapy)rectangle.setFillColor(storycolors[1]);
                        else if(!map[currentmap][i+j*mapxsize])rectangle.setFillColor(sf::Color::Transparent);
                        else if(map[currentmap][i+j*mapxsize])rectangle.setFillColor(storycolors[2]);
                        for(unsigned char k=0;k<npccount;k++)if(i==npcs[currentmap][k].x&&j==npcs[currentmap][k].y)rectangle.setFillColor(storycolors[3]);
                        renderTexture.draw(rectangle);
                    }
                }
                compass.setPosition({140.f,24.f});
                renderTexture.draw(compass);
                }
                
                if(!statscreen){
                tempstates.texture=&icontexture;tempstates.shader=&shader;
                m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
                m_vertices.resize(16);
                sf::Vertex* tri = &m_vertices[6];
                tri[0].position = sf::Vector2f(8,8);
                tri[1].position = sf::Vector2f(40,8);
                tri[2].position = sf::Vector2f(40,40);
                tri[3].position = sf::Vector2f(8,40);
                tri[4].position = sf::Vector2f(8,8);
                tri[5].position = sf::Vector2f(40,40);

                tri[0].texCoords = sf::Vector2f(currentleader*32,0);
                tri[1].texCoords = sf::Vector2f(currentleader*32+32,0);
                tri[2].texCoords = sf::Vector2f(currentleader*32+32,32);
                tri[3].texCoords = sf::Vector2f(currentleader*32,32);
                tri[4].texCoords = sf::Vector2f(currentleader*32,0);
                tri[5].texCoords = sf::Vector2f(currentleader*32+32,32);
                renderTexture.draw(m_vertices,tempstates);
                hp.setFillColor(storycolors[2]);
                hp.setPosition({56.f,24.f});
                renderTexture.draw(hp);
                hp.setFillColor(storycolors[3]);
                hp.setSize({roundf(64.f*(partyhp[currentleader]/partymaxhp[currentleader])),16.f});
                renderTexture.draw(hp);
                }
                if(!dialogue.empty()){
                    renderTexture.draw(dtext);
                    if(dportrait[0]>0){
                    tempstates.texture=&chartalktexture;tempstates.shader=&shader;
                    m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
                    m_vertices.resize(16);
                    sf::Vertex* tri = &m_vertices[6];
                    tri[0].position = sf::Vector2f(dportrait[1]*64,32);
                    tri[1].position = sf::Vector2f(128+dportrait[1]*64,32);
                    tri[2].position = sf::Vector2f(128+dportrait[1]*64,192);
                    tri[3].position = sf::Vector2f(dportrait[1]*64,192);
                    tri[4].position = sf::Vector2f(dportrait[1]*64,32);
                    tri[5].position = sf::Vector2f(128+dportrait[1]*64,192);

                    tri[0].texCoords = sf::Vector2f((dportrait[0]-1)*128,0);
                    tri[1].texCoords = sf::Vector2f((dportrait[0]-1)*128+128,0);
                    tri[2].texCoords = sf::Vector2f((dportrait[0]-1)*128+128,160);
                    tri[3].texCoords = sf::Vector2f((dportrait[0]-1)*128,160);
                    tri[4].texCoords = sf::Vector2f((dportrait[0]-1)*128,0);
                    tri[5].texCoords = sf::Vector2f((dportrait[0]-1)*128+128,160);
                    renderTexture.draw(m_vertices,tempstates);
                    }
                }

                if(pause||statscreen)renderTexture.draw(pausedark);
                if(statscreen&&pause){
                    tempstates.texture=&stattexture;tempstates.shader=&shader;
                    m_vertices.setPrimitiveType(sf::PrimitiveType::Triangles);
                    m_vertices.resize(16);
                    sf::Vertex* tri = &m_vertices[6];
                    tri[0].position = sf::Vector2f(0,0);
                    tri[1].position = sf::Vector2f(256,0);
                    tri[2].position = sf::Vector2f(256,240);
                    tri[3].position = sf::Vector2f(0,240);
                    tri[4].position = sf::Vector2f(0,0);
                    tri[5].position = sf::Vector2f(256,240);

                    tri[0].texCoords = sf::Vector2f(menuselect*256,0);
                    tri[1].texCoords = sf::Vector2f(menuselect*256+256,0);
                    tri[2].texCoords = sf::Vector2f(menuselect*256+256,240);
                    tri[3].texCoords = sf::Vector2f(menuselect*256,240);
                    tri[4].texCoords = sf::Vector2f(menuselect*256,0);
                    tri[5].texCoords = sf::Vector2f(menuselect*256+256,240);
                    renderTexture.draw(m_vertices,tempstates);
                    hp.setSize({100.f,16.f});
                    hp.setFillColor(storycolors[2]);
                    hp.setPosition({144.f,208.f});
                    renderTexture.draw(hp);
                    hp.setFillColor(storycolors[3]);
                    hp.setSize({roundf(100.f*(partyhp[menuselect]/partymaxhp[menuselect])),16.f});
                    renderTexture.draw(hp);
                }
                else if(pause){
                    shader.setUniform("color1",float(cgapalettes[currentcolor][0]));
                    shader.setUniform("color3",float(cgapalettes[currentcolor][1]));
                    shader.setUniform("color4",float(cgapalettes[currentcolor][2]));
                    shader.setUniform("color2",float(cgapalettes[currentcolor][1]));
                    renderTexture.draw(menus,&shader);
                    }

                renderTexture.display();
                const sf::Texture& texture = renderTexture.getTexture();
                sf::Sprite rt(texture);
                window.draw(rt);
                window.display();
            }
            gamequit=false;
            menus.setmenu(6,144,120,0,16,0);
            menuselect=0;
        }
        else if(menuselect==0){//vsmode
            characterselect charselect;
            if (!charselect.load("assets/images/charactericon.png")){}
            charselect.setcharselect(4,2,32,144);
            short menux=0,menuy=0,menux2=3,menuy2=0;
            bool p1check=false,p2check=false;
            while (window.isOpen()&&!gamequit){//characterselect
            windowset(window,&gamequit);

            keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
            keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
            keypresscheck(leftkey1,&menuleft);keypresscheck(rightkey1,&menuright);
            keypresscheck(heavykey1,&colorkey);
            keypresscheck(lightkey2,&menuconfirm2);keypresscheck(mediumkey2,&menucancel2);
            keypresscheck(upkey2,&menuup2);keypresscheck(downkey2,&menudown2);
            keypresscheck(leftkey2,&menuleft2);keypresscheck(rightkey2,&menuright2);
            keypresscheck(heavykey2,&colorkey2);

            if(!p1check){
            if(menuright=='2'&&menuleft!='2'){menux++;if(menux>3)menux=0;}if(menuright!='2'&&menuleft=='2'){menux--;if(menux<0)menux=3;}
            if(menudown=='2'&&menuup!='2'){menuy++;if(menuy>1)menuy=0;}if(menudown!='2'&&menuup=='2'){menuy--;if(menuy<0)menuy=1;}
            }
            if(!p2check){
            if(menuright2=='2'&&menuleft2!='2'){menux2++;if(menux2>3)menux2=0;}if(menuright2!='2'&&menuleft2=='2'){menux2--;if(menux2<0)menux2=3;}
            if(menudown2=='2'&&menuup2!='2'){menuy2++;if(menuy2>1)menuy2=0;}if(menudown2!='2'&&menuup2=='2'){menuy2--;if(menuy2<0)menuy2=1;}
            }
            if(menuconfirm=='2')p1check=true;if(menuconfirm2=='2')p2check=true;
            if(menucancel=='2'){if(p1check)p1check=false;else{gamequit=true;break;}}
            if(menucancel2=='2'){if(p2check)p2check=false;else{gamequit=true;break;}}
            if(p1check&&p2check)break;
            charselect.setselect(4,2,menux,menuy,menux2,menuy2);

            if(colorkey=='2'){
                    if(p1color>8)p1color=0;
                    else p1color++;
                    if(p1color==p2color){p1color++;if(p1color>8)p1color=0;}
            }
            if(colorkey2=='2'){
                    if(p2color>8)p2color=0;
                    else p2color++;
                    if(p1color==p2color){p2color++;if(p2color>8)p2color=0;}
            }

            if(p1color==p2color&&menux==menux2&&menuy==menuy2){p2color++;if(p2color>8)p2color=0;}

            sf::RectangleShape rect({256.f, 32.f}),rect2({256.f, 112.f}),crect1({32.f, 32.f}),crect2({32.f, 32.f}),crect3({32.f, 32.f}),crect4({32.f, 32.f}),crect5({32.f, 32.f}),crect6({32.f, 32.f});
            rect.setFillColor(sf::Color(85, 85, 85));rect2.setFillColor(sf::Color(85, 85, 85));
            crect1.setFillColor(CGAcolor(colorpalettes,p1color,0));
            crect2.setFillColor(CGAcolor(colorpalettes,p1color,1));
            crect3.setFillColor(CGAcolor(colorpalettes,p1color,2));
            crect4.setFillColor(CGAcolor(colorpalettes,p2color,0));
            crect5.setFillColor(CGAcolor(colorpalettes,p2color,1));
            crect6.setFillColor(CGAcolor(colorpalettes,p2color,2));
            rect2.setPosition({0,128});
            crect1.setPosition({16,0});crect2.setPosition({48,0});crect3.setPosition({80,0});
            crect4.setPosition({144,0});crect5.setPosition({176,0});crect6.setPosition({208,0});

            sf::Texture bgtexture;
            if (!bgtexture.loadFromFile("assets/images/stage1.png")){}
            sf::Sprite bg(bgtexture);
            bg.setPosition({-125.f,0.f});

            window.clear();
            renderTexture.clear();
            renderTexture.draw(bg);renderTexture.draw(rect);
            renderTexture.draw(rect2);renderTexture.draw(charselect);
            renderTexture.draw(crect1);renderTexture.draw(crect2);renderTexture.draw(crect3);
            renderTexture.draw(crect4);renderTexture.draw(crect5);renderTexture.draw(crect6);
            renderTexture.display();
            const sf::Texture& texture = renderTexture.getTexture();
            sf::Sprite rt(texture);
            window.draw(rt);
            window.display();
        }

            if(!gamequit){
            short rounds=2,matchintro=120;
            menus.setmenu(6,92,72,0,16,1);
            player p1,p2;
            p1.color=p1color;p2.color=p2color;p1.meter=100.0;p2.meter=100.0;
            p1.character=menux+menuy*4;p2.character=menux2+menuy2*4;
            superflash sf;healthbar hb;meterbar mb;
            timeui time;time.create();comboui cui;inputlist p1ilist,p2ilist;
            sf::Texture bgtexture,hutexture,p1texture,p2texture,metertexture,matchintrotexture,matchintrotexture2;
            if(!p1ilist.load("assets/images/inputicon.png")||!p2ilist.load("assets/images/inputicon.png")){window.close();gamequit=true;}
            if(!time.load("assets/images/time_ui.png")||!cui.load("assets/images/combo_ui.png")||!metertexture.loadFromFile("assets/images/meter_ui.png")){window.close();gamequit=true;}
            if(!bgtexture.loadFromFile("assets/images/stage1.png")||!hutexture.loadFromFile("assets/images/health_ui.png")){window.close();gamequit=true;}
            if(!p1texture.loadFromFile("assets/images/char"+std::to_string(p1.character)+"_sprites.png")||!p2texture.loadFromFile("assets/images/char"+std::to_string(p2.character)+"_sprites.png")){window.close();gamequit=true;}
            if(!matchintrotexture.loadFromFile("assets/images/ENGAGE.png")){window.close();gamequit=true;}
            if(!matchintrotexture2.loadFromFile("assets/images/READY OR NOT.png")){window.close();gamequit=true;}
            charactergraphics p1graphics,p2graphics,p1shadow,p2shadow;textbox tbox;

            p1graphics.load(p1texture,false);p2graphics.load(p2texture,false);
            p1shadow.load(p1texture,true);p2shadow.load(p2texture,true);
            sf::Sprite background(bgtexture),healthui(hutexture),meterui(metertexture),introsprite(matchintrotexture2);
            sf::Text combotext(font),dtext(font),frametext(font);
            combotext.setCharacterSize(32);combotext.setFillColor(sf::Color::Black);
            dtext.setCharacterSize(16);dtext.setFillColor(sf::Color::White);
            frametext.setCharacterSize(16);frametext.setFillColor(sf::Color::White);
            std::deque<char>p1keylist,p2keylist;short dialoguecnt=0;

            p1.maxhp=950.0;p2.maxhp=950.0;
            if(p1.character==2){p1.maxhp=900.0;p1.hurtframes[0]=15;p1.hurtframes[3]=17;p1.hurtframes[5]=87;p1.hurtframes[6]=88;p1.hurtframes[7]=89;p1.hurtframes[8]=90;}
            if(p2.character==2){p2.maxhp=10.0;p2.hurtframes[0]=15;p2.hurtframes[3]=17;p2.hurtframes[5]=87;p2.hurtframes[6]=88;p2.hurtframes[7]=89;p2.hurtframes[8]=90;}

            if(p1.character==0&&p2.character==0)dialogue="1Hello\nthis is a test thingy hi$2Do you really think that?\nI don't.$1HERESY.$";
            else if(p1.character==2&&p2.character==0)dialogue="1...What.$2hi tall guy$1Holy crap it can talk$1It doesn't even have a\nbloody mouth how$2rude$";
            else if(p1.character==0&&p2.character==2)dialogue="1Wow you're depressing$2...Excuse me?$1You look depressing$2...I see??$";
            else if(p1.character==2&&p2.character==2)dialogue="1You...look...\nexactly like me.$2Wha- why do you-\nWHO THE HELL ARE YOU?!$";
            if(!music.openFromFile("assets/music/Time and time again.wav")){window.close();gamequit=true;}
            music.play();
                while(p1.wins<rounds&&p2.wins<rounds&&!gamequit){
                float overlap[2],overlap2[2];
                bgx=0;
                    p1.x=100.0;p1.y=176.0;p1.hp=p1.maxhp;p2.x=156.0;p2.y=176.0;p2.hp=p2.maxhp;
                    for(unsigned char i=0;i<8;i++){p1.gimmick[i]=0;p2.gimmick[i]=0;}
                short superstop=0,roundwait=90,framedata=0;
                bool seeboxes=false,F2key=false,F3key=false,pause=false,Enterkey=false,nextframe=false,backslash=false,playertop=false,keylistshow=false,framedatashow=false;
                    p1.right=true;p2.right=false;
                while (window.isOpen()&&!gamequit){
                    windowset(window,&gamequit);
                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::F3)){if(!F3key){F3key=true;if(flash)flash=false;else flash=true;}}else F3key=false;
                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Enter)){if(!Enterkey){menuselect=0;Enterkey=true;if(pause)pause=false;else pause=true;}}else Enterkey=false;

                    inputcode(p1input,upkey1,leftkey1,downkey1,rightkey1,lightkey1,mediumkey1,heavykey1,specialkey1,grabkey1,p1.x,p2.x);
                    inputcode(p2input,upkey2,leftkey2,downkey2,rightkey2,lightkey2,mediumkey2,heavykey2,specialkey2,grabkey2,p2.x,p1.x);

                    if((!pause||(pause&&nextframe))){//main match code stuff
                        dirkeys.push_front(p1input[0]);ukey.push_front(p1input[1]);ikey.push_front(p1input[2]);okey.push_front(p1input[3]);kkey.push_front(p1input[4]);
                        if(dirkeys.size()>20)dirkeys.pop_back();if(ukey.size()>20)ukey.pop_back();
                        if(ikey.size()>20)ikey.pop_back();if(okey.size()>20)okey.pop_back();if(kkey.size()>20)kkey.pop_back();

                        dirkeys2.push_front(p2input[0]);ukey2.push_front(p2input[1]);ikey2.push_front(p2input[2]);okey2.push_front(p2input[3]);kkey2.push_front(p2input[4]);
                        if(dirkeys2.size()>20)dirkeys2.pop_back();if(ukey2.size()>20)ukey2.pop_back();
                        if(ikey2.size()>20)ikey2.pop_back();if(okey2.size()>20)okey2.pop_back();if(kkey2.size()>20)kkey2.pop_back();

                        nextframe=false;
                        if(roundwait<=0)break;else if(p1.hp<=0||p2.hp<=0)roundwait--;
                        matchcode(&p1,&p2,dialogue,p1input,p2input,&superstop,&framedata,overlap,overlap2,matchintro);

                        if(!sound.empty()){
                            for(int i=0;i<sound.size();i++)if(sound[i].getStatus()==sf::SoundSource::Status::Stopped)sound.erase(sound.begin()+i);  
                        }
                        if(!soundfxlist.empty()){//sound effects
                            if(soundfxlist[0]>0){
                                sf::Sound temp(soundfx[soundfxlist[0]-1]);
                                //sound.setBuffer(soundfx[soundfxlist[0]-1]);
                                temp.setPosition({sfxx[0],0.f,sfxx[0]<0.f?-sfxx[0]-1.f:sfxx[0]-1.f});
                                sound.push_front(temp);
                                sound[0].play();
                            }
                            sfxx.pop_front();
                            soundfxlist.pop_front();
                        }
                        if(!hitsfxlist.empty()){//hit sound effects
                            if(hitsfxlist[0]>0){
                                hitsound.setBuffer(soundfx[hitsfxlist[0]-1]);
                                hitsound.setPosition({hsfxx[0],0.f,hsfxx[0]<0.f?-hsfxx[0]-1.f:hsfxx[0]-1.f});
                                hitsound.play();
                            }
                            hsfxx.pop_front();
                            hitsfxlist.pop_front();
                        }
                        if(!voicesfxlist.empty()){//voice effects
                            if(voicesfxlist[0]>0){
                                voice.setBuffer(soundfx[voicesfxlist[0]-1]);
                                voice.setPosition({vsfxx[0],0.f,vsfxx[0]<0.f?-vsfxx[0]-1.f:vsfxx[0]-1.f});
                                voice.play();
                            }
                            vsfxx.pop_front();
                            voicesfxlist.pop_front();
                        }

                        if(superstop>0)superstop--;
                        roundframecount++;
                        for(short i=0;i<effectslist.size();i++){effectslist[i].create();if(effectslist[i].frame>effectslist[i].len)effectslist.erase(effectslist.begin()+i);}
                    }

                    menus.setcolor(6,false,menuselect);
                    if(pause){//pause menu
                        keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
                        keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
                        if(menuup=='2'){menuselect--;if(menuselect<0)menuselect=5;}
                        else if(menudown=='2'){menuselect++;if(menuselect>5)menuselect=0;}
                        if((menuconfirm=='2'&&menuselect==0)||menucancel=='2')pause=false;
                        else if(menuconfirm=='2'&&menuselect==1)if(seeboxes)seeboxes=false;else seeboxes=true;
                        else if(menuconfirm=='2'&&menuselect==2)if(keylistshow)keylistshow=false;else keylistshow=true;
                        else if(menuconfirm=='2'&&menuselect==5)gamequit=true;
                    }
                    if(!dialogue.empty()){//dialogue stuff
                        char temp='$',temp1='1';
                        if(dialogue[0]==temp1)tbox.create(p1.x+bgx+8,p1.y-16);
                        else tbox.create(p2.x+bgx+8,p2.y-16);
                        dtext.setString(dialogue.substr(1,dialoguecnt));
                        if(!pause||nextframe){
                            if(dialogue[dialoguecnt+1]==temp){
                                if(p1input[1]=='2'||p2input[1]=='2'||p1input[2]!='0'||p2input[2]!='0'){dialogue.erase(0,dialoguecnt+2);dialoguecnt=0;}
                            }
                            else{
                                if(p1input[2]!='0'||p2input[2]!='0')while(dialogue[dialoguecnt+1]!=temp)dialoguecnt++;
                                else dialoguecnt++;
                            }
                        }
                        dtext.setPosition({16,8});
                    }

                    drawstuff(window,renderTexture,&p1,&p2,sf,hb,mb,time,cui,p1ilist,p2ilist,p1graphics,p2graphics,p1shadow,p2shadow,menus,shader,tbox,combotext,
                              dtext,frametext,p1keylist,p2keylist,framedata,dialogue,superstop,pause,seeboxes,keylistshow,framedatashow,&playertop,
                              background,healthui,meterui,p1texture,p2texture,pausedark,rounds,introsprite,matchintrotexture,&matchintro);
                    window.display();
                }

                if(p1.hp>0&&p2.hp<=0)p1.wins++;
                else if(p1.hp<=0&&p2.hp>0)p2.wins++;
                dialogue.erase();
                effectslist.clear();
                menuselect=0;combo=0;roundframecount=0;comboscaling=100.0;
                p1.animq.clear();p1.idleanim.clear();p1.atkfx.clear();p1.hitboxanim.clear();p1.proj.clear();
                p1.air=false;p1.buffer=0;p1.act=0;p1.kdowned=0;p1.hit=false;
                p2.animq.clear();p2.idleanim.clear();p2.atkfx.clear();p2.hitboxanim.clear();p2.proj.clear();
                p2.air=false;p2.buffer=0;p2.act=0;p2.kdowned=0;p2.hit=false;
                dirkeys.clear();ukey.clear();ikey.clear();okey.clear();kkey.clear();
                dirkeys2.clear();ukey2.clear();ikey2.clear();okey2.clear();kkey2.clear();
                }
                music.stop();

                menuconfirm='1';menuconfirm2='1';
                if(p1.wins>p2.wins){
                    if(p1.character==0&&p2.character==0)dialogue="HERESY, HERESY!$";
                    else if(p1.character==2&&p2.character==0)dialogue="Are you supposed to look\nhuman??$";
                    else if(p1.character==0&&p2.character==2)dialogue="Imagine being depressed.\nlol.$";
                    else if(p1.character==2&&p2.character==2)dialogue="You didn't have to\npanic like that.$";
                }
                else{
                    if(p1.character==0&&p2.character==0)dialogue="I don't think we're\nsome... test.$";
                    else if(p1.character==2&&p2.character==0)dialogue="Ruuuuuude$";
                    else if(p1.character==0&&p2.character==2)dialogue="Do I really look\nthat sad???$";
                    else if(p1.character==2&&p2.character==2)dialogue="I... I...\n...Should calm down, god.$";
                }
                sf::Texture wintexture,wintexture2;
                if(!wintexture.loadFromFile("assets/images/winbg.png")){window.close();gamequit=true;}
                if(!wintexture2.loadFromFile("assets/images/char2_win.png")){window.close();gamequit=true;}
                while(!gamequit){//win screen
                    windowset(window,&gamequit);
                    keypresscheck(lightkey1,&menuconfirm);
                    keypresscheck(lightkey2,&menuconfirm2);
                    keypresscheck(mediumkey1,&menucancel);
                    keypresscheck(mediumkey2,&menucancel2);
                    if(dialogue.empty())break;
                    else{//dialogue stuff
                        char temp='$';
                        dtext.setString(dialogue.substr(0,dialoguecnt+1));
                        if(dialogue[dialoguecnt+1]==temp){
                            if(menuconfirm=='2'||menuconfirm2=='2'||menucancel!='0'||menucancel2!='0'){dialogue.erase(0,dialoguecnt+2);dialoguecnt=0;}
                        }
                        else{
                            if(menucancel!='0'||menucancel2!='0')while(dialogue[dialoguecnt+1]!=temp)dialoguecnt++;
                            else dialoguecnt++;
                        }
                        dtext.setPosition({16.f,168.f});
                    }

                    sf::RectangleShape square({256,240});
                    square.setFillColor(sf::Color::White);square.setPosition({0.f,0.f});
                    square.setTexture(&wintexture);
                    
                    window.clear();
                    renderTexture.clear();
                    renderTexture.draw(square);


                    square.setTexture(&wintexture2);
                    if(p1.wins>p2.wins){
                        shader.setUniform("color1",float(colorpalettes[p1color][0]));
                        shader.setUniform("color3",float(colorpalettes[p1color][1]));
                        shader.setUniform("color2",float(colorpalettes[p1color][2]));
                    }
                    else{
                        shader.setUniform("color1",float(colorpalettes[p2color][0]));
                        shader.setUniform("color3",float(colorpalettes[p2color][1]));
                        shader.setUniform("color2",float(colorpalettes[p2color][2]));
                    }
                    renderTexture.draw(square,&shader);

                    square.setTexture(&wintexture);
                    square.setFillColor(sf::Color::Black);
                    square.setSize({240.f,64.f});square.setPosition({8.f,168.f});
                    renderTexture.draw(square);

                    renderTexture.draw(dtext);
                    renderTexture.display();
                    const sf::Texture& texture = renderTexture.getTexture();
                    sf::Sprite rt(texture);
                    window.draw(rt);
                    window.display();
                }
            }
            gamequit=false;
            menus.setmenu(6,144,120,0,16,0);
            }
        else if(menuselect==2){//online
            sf::Text iptext(font);
            iptext.setCharacterSize(16);iptext.setFillColor(sf::Color::White);
            sf::RectangleShape rect({8.f, 4.f});rect.setFillColor(sf::Color::White);
            short ipx=0;
            char sideselect='0';
            while (window.isOpen()&&!gamequit){//ipselect
                windowset(window,&gamequit);
                keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
                keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
                keypresscheck(leftkey1,&menuleft);keypresscheck(rightkey1,&menuright);
                keypresscheck(heavykey1,&sideselect);
                if(menuright=='2'&&menuleft!='2'){ipx++;if(ipx>11)ipx=0;}
                if(menuright!='2'&&menuleft=='2'){ipx--;if(ipx<0)ipx=11;}
                if(menuup=='2'&&menudown!='2'){
                    if(ipx%3==0){ipint[ipx/3]+=(ipint[ipx/3]/100==2)?-200:100;}
                    if(ipx%3==1){ipint[ipx/3]+=ipint[ipx/3]>249?-50:(((ipint[ipx/3]%100)/10==9)?-90:10);}
                    if(ipx%3==2){ipint[ipx/3]+=ipint[ipx/3]==255?-5:((ipint[ipx/3]%10==9)?-9:1);}
                    if(ipint[ipx/3]>255)ipint[ipx/3]=255;
                }
                if(menuup!='2'&&menudown=='2'){
                    if(ipx%3==0){ipint[ipx/3]+=(ipint[ipx/3]/100==0)?200:-100;}
                    if(ipx%3==1){ipint[ipx/3]+=((ipint[ipx/3]%100)/10==0)?90:-10;}
                    if(ipx%3==2){ipint[ipx/3]+=(ipint[ipx/3]%10==0)?9:-1;}
                    if(ipint[ipx/3]>255)ipint[ipx/3]=255;
                }
                if(sideselect=='2'){
                    if(p1control)p1control=false;
                    else p1control=true;
                }
                if(menuconfirm=='2')break;
                if(menucancel=='2'){gamequit=true;break;}

                std::string tempstr,ipstr;
                if(sf::Keyboard::isKeyPressed(sf::Keyboard::Key::P)){
                    std::string cbstr=sf::Clipboard::getString();
                    short temp=0,iptemp[4]={0,0,0,0};
                    bool check=true;
                    for(short i=0;i<cbstr.length();i++){
                        if((cbstr[i]>47&&cbstr[i]<58)){
                            iptemp[temp]*=10;
                            iptemp[temp]+=cbstr[i]-48;
                            if(iptemp[temp]>=1000){check=false;break;}
                            }
                        else if(cbstr[i]=='.')temp++;
                        else {check=false;break;}
                    }
                    if(check&&temp==3)for(unsigned char i=0;i<4;i++)ipint[i]=iptemp[i];
                    
                }
                for(short i=0;i<4;i++){
                    tempstr = std::to_string(ipint[i]);
                    if(ipint[i]>99)ipstr=ipstr+tempstr+'.';
                    else if(ipint[i]>9)ipstr=ipstr+' '+tempstr+'.';
                    else ipstr=ipstr+' '+' '+tempstr+'.';
                    }
                ipstr.pop_back();
                if(p1control)ipstr=ipstr+' '+'P'+'1';
                else ipstr=ipstr+' '+'P'+'2';
                
                iptext.setString(ipstr);
                iptext.setPosition({32.f,120.f});
                rect.setPosition({32.f+(ipx+ipx/3)*9.f,136.f});

                window.clear();
                renderTexture.clear();
                renderTexture.draw(iptext);
                renderTexture.draw(rect);
                renderTexture.display();
                const sf::Texture& texture = renderTexture.getTexture();
                sf::Sprite rt(texture);
                window.draw(rt);
                window.display();
            
            }
            std::string tempstr,ipstr;
            for(short i=0;i<4;i++){
                tempstr = std::to_string(ipint[i]);
                ipstr=ipstr+tempstr+'.';
            }
            ipstr.pop_back();
            auto ipvalue2=sf::IpAddress::resolve(ipstr);
            sf::IpAddress ipvalue(ipint[0],ipint[1],ipint[2],ipint[3]);
            unsigned short port=53924;
            if (socket.bind(port) != sf::Socket::Status::Done){window.close();gamequit=true;}
            if(!gamequit){//ipwaitscreen
            sf::Text iptext(font);
            iptext.setCharacterSize(16);iptext.setFillColor(sf::Color::White);
            short loadcnt=0; 
            while(window.isOpen()&&!gamequit){
                windowset(window,&gamequit);
                keypresscheck(mediumkey1,&menucancel);if(menucancel=='2'){gamequit=true;break;}
                sf::Packet packet;
                std::uint8_t onlinecheck;
                if(p1control)onlinecheck=1;
                else onlinecheck=2;
                
                packet<<onlinecheck;
                if(socket.send(packet,ipvalue,port)!=sf::Socket::Status::Done){/*window.close();gamequit=true;*/}
                if(socket.receive(packet,ipvalue2,port)!=sf::Socket::Status::Done){/*window.close();gamequit=true;*/}
                packet>>onlinecheck;
                if((p1control&&onlinecheck==2)||(!p1control&&onlinecheck==1)||onlinecheck==3){packet<<onlinecheck;while(socket.send(packet,ipvalue,port)!=sf::Socket::Status::Done){}break;}

                loadcnt++;
                if(loadcnt>179)loadcnt=0;
                std::string waitstr("waiting for player");
                for(short i=0;i<(loadcnt/60)+1;i++)waitstr=waitstr+'.';
                
                iptext.setString(waitstr);
                iptext.setPosition({32.f,120.f});

                window.clear();
                renderTexture.clear();
                renderTexture.draw(iptext);
                renderTexture.display();
                const sf::Texture& texture = renderTexture.getTexture();
                sf::Sprite rt(texture);
                window.draw(rt);
                window.display();
                }
            }
            characterselect charselect;
            if (!charselect.load("assets/images/charactericon.png")){}
            charselect.setcharselect(4,2,32,144);
            short menux=0,menuy=0,menux2=3,menuy2=0;
            bool p1check=false,p2check=false;
            while (window.isOpen()&&!gamequit){//characterselect
            windowset(window,&gamequit);

            if(p1control){
            keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
            keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
            keypresscheck(leftkey1,&menuleft);keypresscheck(rightkey1,&menuright);
            keypresscheck(heavykey1,&colorkey);
            }
            else{
            keypresscheck(lightkey1,&menuconfirm2);keypresscheck(mediumkey1,&menucancel2);
            keypresscheck(upkey1,&menuup2);keypresscheck(downkey1,&menudown2);
            keypresscheck(leftkey1,&menuleft2);keypresscheck(rightkey1,&menuright2);
            keypresscheck(heavykey1,&colorkey2);
            }

            if(!p1check){
            if(menuright=='2'&&menuleft!='2'){menux++;if(menux>3)menux=0;}if(menuright!='2'&&menuleft=='2'){menux--;if(menux<0)menux=3;}
            if(menudown=='2'&&menuup!='2'){menuy++;if(menuy>1)menuy=0;}if(menudown!='2'&&menuup=='2'){menuy--;if(menuy<0)menuy=1;}
            }
            if(!p2check){
            if(menuright2=='2'&&menuleft2!='2'){menux2++;if(menux2>3)menux2=0;}if(menuright2!='2'&&menuleft2=='2'){menux2--;if(menux2<0)menux2=3;}
            if(menudown2=='2'&&menuup2!='2'){menuy2++;if(menuy2>1)menuy2=0;}if(menudown2!='2'&&menuup2=='2'){menuy2--;if(menuy2<0)menuy2=1;}
            }
            if(menuconfirm=='2')p1check=true;if(menuconfirm2=='2')p2check=true;
            if(menucancel=='2'){if(p1check)p1check=false;else{gamequit=true;break;}}
            if(menucancel2=='2'){if(p2check)p2check=false;else{gamequit=true;break;}}
            if(p1check&&p2check)break;
            charselect.setselect(4,2,menux,menuy,menux2,menuy2);

            if(colorkey=='2'){
                    if(p1color>8)p1color=0;
                    else p1color++;
                    if(p1color==p2color){p1color++;if(p1color>8)p1color=0;}
            }
            if(colorkey2=='2'){
                    if(p2color>8)p2color=0;
                    else p2color++;
                    if(p1color==p2color){p2color++;if(p2color>8)p2color=0;}
            }

            if(p1color==p2color&&menux==menux2&&menuy==menuy2){p2color++;if(p2color>8)p2color=0;}

            sf::RectangleShape rect({256.f, 32.f}),rect2({256.f, 112.f}),crect1({32.f, 32.f}),crect2({32.f, 32.f}),crect3({32.f, 32.f}),crect4({32.f, 32.f}),crect5({32.f, 32.f}),crect6({32.f, 32.f});
            rect.setFillColor(sf::Color(85, 85, 85));rect2.setFillColor(sf::Color(85, 85, 85));
            crect1.setFillColor(CGAcolor(colorpalettes,p1color,0));
            crect2.setFillColor(CGAcolor(colorpalettes,p1color,1));
            crect3.setFillColor(CGAcolor(colorpalettes,p1color,2));
            crect4.setFillColor(CGAcolor(colorpalettes,p2color,0));
            crect5.setFillColor(CGAcolor(colorpalettes,p2color,1));
            crect6.setFillColor(CGAcolor(colorpalettes,p2color,2));
            rect2.setPosition({0,128});
            crect1.setPosition({16,0});crect2.setPosition({48,0});crect3.setPosition({80,0});
            crect4.setPosition({144,0});crect5.setPosition({176,0});crect6.setPosition({208,0});

            sf::Packet packet;
            std::uint8_t onlinecode=3,onlinecolor,onlinemenux,onlinemenuy,onlinecheck;
            if(p1control){onlinecolor=p1color;onlinemenux=menux;onlinemenuy=menuy;onlinecheck=p1check;}
            else{onlinecolor=p2color;onlinemenux=menux2;onlinemenuy=menuy2;onlinecheck=p2check;}
            packet<<onlinecode<<onlinecolor<<onlinemenux<<onlinemenuy<<onlinecheck;
            if(socket.send(packet,ipvalue,port)!=sf::Socket::Status::Done){/*window.close();gamequit=true;*/}
            if(socket.receive(packet,ipvalue2,port)==sf::Socket::Status::Done){
                packet>>onlinecode;
                if(onlinecode==4){p1check=true;p2check=true;break;}
                packet>>onlinecolor>>onlinemenux>>onlinemenuy>>onlinecheck;
                if(p1control){p2color=onlinecolor;menux2=onlinemenux;menuy2=onlinemenuy;p2check=onlinecheck;}
                else{p1color=onlinecolor;menux=onlinemenux;menuy=onlinemenuy;p1check=onlinecheck;}
                if(p1check&&p2check){
                    if(p1control){onlinecolor=p1color;onlinemenux=menux;onlinemenuy=menuy;onlinecheck=p1check;}
                    else{onlinecolor=p2color;onlinemenux=menux2;onlinemenuy=menuy2;onlinecheck=p2check;}
                    packet<<onlinecode<<onlinecolor<<onlinemenux<<onlinemenuy<<onlinecheck;
                    while(socket.send(packet,ipvalue,port)!=sf::Socket::Status::Done){}
                }
            }
        

            sf::Texture bgtexture;
            if (!bgtexture.loadFromFile("assets/images/stage1.png")){}
            sf::Sprite bg(bgtexture);
            bg.setPosition({-125.f,0.f});

            window.clear();
            renderTexture.clear();
            renderTexture.draw(bg);renderTexture.draw(rect);
            renderTexture.draw(rect2);renderTexture.draw(charselect);
            renderTexture.draw(crect1);renderTexture.draw(crect2);renderTexture.draw(crect3);
            renderTexture.draw(crect4);renderTexture.draw(crect5);renderTexture.draw(crect6);
            renderTexture.display();
            const sf::Texture& texture = renderTexture.getTexture();
            sf::Sprite rt(texture);
            window.draw(rt);
            window.display();
        }
            if(!gamequit){//online vs
            short rounds=2,matchintro=120;
            menus.setmenu(6,92,72,0,16,1);
            player p1,p2;
            p1.color=p1color;p2.color=p2color;p1.meter=100.0;p2.meter=100.0;
            p1.character=menux+menuy*4;p2.character=menux2+menuy2*4;
            superflash sf;healthbar hb;meterbar mb;
            timeui time;time.create();comboui cui;inputlist p1ilist,p2ilist;
            sf::Texture bgtexture,hutexture,p1texture,p2texture,metertexture,matchintrotexture,matchintrotexture2;
            if(!p1ilist.load("assets/images/inputicon.png")||!p2ilist.load("assets/images/inputicon.png")){window.close();gamequit=true;}
            if(!time.load("assets/images/time_ui.png")||!cui.load("assets/images/combo_ui.png")||!metertexture.loadFromFile("assets/images/meter_ui.png")){window.close();gamequit=true;}
            if(!bgtexture.loadFromFile("assets/images/stage1.png")||!hutexture.loadFromFile("assets/images/health_ui.png")){window.close();gamequit=true;}
            if(!p1texture.loadFromFile("assets/images/char"+std::to_string(p1.character)+"_sprites.png")||!p2texture.loadFromFile("assets/images/char"+std::to_string(p2.character)+"_sprites.png")){window.close();gamequit=true;}
            if(!matchintrotexture.loadFromFile("assets/images/ENGAGE.png")){window.close();gamequit=true;}
            if(!matchintrotexture2.loadFromFile("assets/images/READY OR NOT.png")){window.close();gamequit=true;}
            charactergraphics p1graphics,p2graphics,p1shadow,p2shadow;textbox tbox;

            p1graphics.load(p1texture,false);p2graphics.load(p2texture,false);
            p1shadow.load(p1texture,true);p2shadow.load(p2texture,true);
            sf::Sprite background(bgtexture),healthui(hutexture),meterui(metertexture),introsprite(matchintrotexture2);
            sf::Text combotext(font),dtext(font),frametext(font);
            combotext.setCharacterSize(32);combotext.setFillColor(sf::Color::Black);
            dtext.setCharacterSize(16);dtext.setFillColor(sf::Color::White);
            frametext.setCharacterSize(16);frametext.setFillColor(sf::Color::White);
            std::deque<char>p1keylist,p2keylist;short dialoguecnt=0;

            p1.maxhp=950.0;p2.maxhp=950.0;
            if(p1.character==2){p1.maxhp=900.0;p1.hurtframes[0]=15;p1.hurtframes[3]=17;p1.hurtframes[5]=87;p1.hurtframes[6]=88;p1.hurtframes[7]=89;p1.hurtframes[8]=90;}
            if(p2.character==2){p2.maxhp=900.0;p2.hurtframes[0]=15;p2.hurtframes[3]=17;p2.hurtframes[5]=87;p2.hurtframes[6]=88;p2.hurtframes[7]=89;p2.hurtframes[8]=90;}
                std::deque<player> precord;
                std::deque<std::deque<char>> dirrecord,urecord,irecord,orecord,krecord;
                while(p1.wins<rounds&&p2.wins<rounds&&!gamequit){
                float overlap[2],overlap2[2],bgx=0;
                    p1.x=100.0;p1.y=176.0;p1.hp=p1.maxhp;p2.x=156.0;p2.y=176.0;p2.hp=p2.maxhp;
                    for(unsigned char i=0;i<8;i++){p1.gimmick[i]=0;p2.gimmick[i]=0;}
                    
                short superstop=0,roundwait=90,framedata=0;
                bool seeboxes=false,F2key=false,F3key=false,pause=false,Enterkey=false,nextframe=false,backslash=false,playertop=false,keylistshow=false,framedatashow=false;
                    p1.right=true;p2.right=false;

                while (window.isOpen()&&!gamequit){
                    windowset(window,&gamequit);

                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::F2)){if(!F2key){F2key=true;if(framedatashow)framedatashow=false;else framedatashow=true;}}else F2key=false;
                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::F3)){if(!F3key){F3key=true;if(flash)flash=false;else flash=true;}}else F3key=false;
                    //if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Enter)){if(!Enterkey){menuselect=0;Enterkey=true;if(pause)pause=false;else pause=true;}}else Enterkey=false;
                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Backslash)){if(backslash==false){backslash=true;nextframe=true;}}else backslash=false;

                    if(p1control)inputcode(p1input,upkey1,leftkey1,downkey1,rightkey1,lightkey1,mediumkey1,heavykey1,specialkey1,grabkey1,p1.x,p2.x);
                    else inputcode(p2input,upkey1,rightkey1,downkey1,leftkey1,lightkey1,mediumkey1,heavykey1,specialkey1,grabkey1,p1.x,p2.x);

                    //main match code stuff
                    dirkeys.push_front(p1input[0]);ukey.push_front(p1input[1]);
                    ikey.push_front(p1input[2]);okey.push_front(p1input[3]);kkey.push_front(p1input[4]);
                    if(dirkeys.size()>30)dirkeys.pop_back();if(ukey.size()>30)ukey.pop_back();
                    if(ikey.size()>30)ikey.pop_back();if(okey.size()>30)okey.pop_back();if(kkey.size()>30)kkey.pop_back();

                    dirkeys2.push_front(p2input[0]);ukey2.push_front(p2input[1]);
                    ikey2.push_front(p2input[2]);okey2.push_front(p2input[3]);kkey2.push_front(p2input[4]);
                    if(dirkeys2.size()>30)dirkeys2.pop_back();if(ukey2.size()>30)ukey2.pop_back();
                    if(ikey2.size()>30)ikey2.pop_back();if(okey2.size()>30)okey2.pop_back();if(kkey2.size()>30)kkey2.pop_back();

                    nextframe=false;
                    if(roundwait<=0)break;else if(p1.hp<=0||p2.hp<=0)roundwait--;
                    matchcode(&p1,&p2,dialogue,p1input,p2input,&superstop,&framedata,overlap,overlap2,matchintro);

                    if(!sound.empty()){
                            for(int i=0;i<sound.size();i++)if(sound[i].getStatus()==sf::SoundSource::Status::Stopped)sound.erase(sound.begin()+i);  
                        }
                    if(!soundfxlist.empty()){//sound effects
                            if(soundfxlist[0]>0){
                                sf::Sound temp(soundfx[soundfxlist[0]-1]);
                                //sound.setBuffer(soundfx[soundfxlist[0]-1]);
                                temp.setPosition({sfxx[0],0.f,sfxx[0]<0.f?-sfxx[0]-1.f:sfxx[0]-1.f});
                                sound.push_front(temp);
                                sound[0].play();
                            }
                            sfxx.pop_front();
                            soundfxlist.pop_front();
                        }
                    if(!hitsfxlist.empty()){//hit sound effects
                        if(hitsfxlist[0]>0){
                            hitsound.setBuffer(soundfx[hitsfxlist[0]-1]);
                            hitsound.setPosition({hsfxx[0],0.f,hsfxx[0]<0.f?-hsfxx[0]-1.f:hsfxx[0]-1.f});
                            hitsound.play();
                        }
                        hsfxx.pop_front();
                        hitsfxlist.pop_front();
                    }
                    if(!voicesfxlist.empty()){//voice effects
                        if(voicesfxlist[0]>0){
                            voice.setBuffer(soundfx[voicesfxlist[0]-1]);
                            voice.setPosition({vsfxx[0],0.f,vsfxx[0]<0.f?-vsfxx[0]-1.f:vsfxx[0]-1.f});
                            voice.play();
                        }
                        vsfxx.pop_front();
                        voicesfxlist.pop_front();
                    }

                    if(superstop>0)superstop--;

                    roundframecount++;
                    if(p1control){
                        precord.push_front(p1);
                        dirrecord.push_front(dirkeys);
                        urecord.push_front(ukey);irecord.push_front(ikey);
                        orecord.push_front(okey);krecord.push_front(kkey);
                        }
                    else{
                        precord.push_front(p2);
                        dirrecord.push_front(dirkeys2);
                        urecord.push_front(ukey2);irecord.push_front(ikey2);
                        orecord.push_front(okey2);krecord.push_front(kkey2);
                        }
                    if(precord.size()>30)precord.pop_back();
                    if(urecord.size()>30)urecord.pop_back();
                    if(irecord.size()>30)irecord.pop_back();
                    if(orecord.size()>30)orecord.pop_back();
                    if(krecord.size()>30)krecord.pop_back();

                    for(short i=0;i<effectslist.size();i++){effectslist[i].create();if(effectslist[i].frame>effectslist[i].len)effectslist.erase(effectslist.begin()+i);}

                    if(!dialogue.empty()){//dialogue stuff
                        char temp='$',temp1='1';
                        if(dialogue[0]==temp1)tbox.create(p1.x+bgx+8,p1.y-16);
                        else tbox.create(p2.x+bgx+8,p2.y-16);
                        dtext.setString(dialogue.substr(1,dialoguecnt));
                        if(!pause||nextframe){
                            if(dialogue[dialoguecnt+1]==temp){
                                if(p1input[1]=='2'||p2input[1]=='2'||p1input[2]!='0'||p2input[2]!='0'){dialogue.erase(0,dialoguecnt+2);dialoguecnt=0;}
                            }
                            else{
                                if(p1input[2]!='0'||p2input[2]!='0')while(dialogue[dialoguecnt+1]!=temp)dialoguecnt++;
                                else dialoguecnt++;
                            }
                        }
                        dtext.setPosition({16,8});
                    }

                    drawstuff(window,renderTexture,&p1,&p2,sf,hb,mb,time,cui,p1ilist,p2ilist,p1graphics,p2graphics,p1shadow,p2shadow,menus,shader,tbox,combotext,
                              dtext,frametext,p1keylist,p2keylist,framedata,dialogue,superstop,pause,seeboxes,keylistshow,framedatashow,&playertop,
                              background,healthui,meterui,p1texture,p2texture,pausedark,rounds,introsprite,matchintrotexture,&matchintro);
                    window.display();


                    sf::Packet packet;
                    std::uint8_t onlinecode=4,dir,U,I,O,K,len;
                    std::int16_t onlineframe=roundframecount,temp;
                    std::deque<char>dironline,uonline,ionline,oonline,konline,
                                    dironline2,uonline2,ionline2,oonline2,konline2;
                    packet<<onlinecode;
                    
                    if(p1control){
                        dir=p1input[0];U=p1input[1];I=p1input[2];O=p1input[3];K=p1input[4];
                        packet<<p1.x<<p1.y<<p1.jumpx<<p1.jumpy<<p1.kback<<p1.launch<<p1.hp<<p1.maxhp<<p1.dmg<<
                        p1.pushaway<<p1.grab[0]<<p1.grab[1]<<p1.meter<<p1.mgain<<onlineframe<<dir<<U<<I<<O<<K;

                        len=p1.animq.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p1.animq[i];packet<<temp;}
                        len=p1.idleanim.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p1.idleanim[i];packet<<temp;}
                        len=p1.atkfx.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p1.atkfx[i];packet<<temp;}
                        len=p1.hitboxanim.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p1.hitboxanim[i];packet<<temp;}
                        len=dirkeys.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=dirkeys[i];packet<<temp;}
                        len=ukey.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=ukey[i];packet<<temp;}
                        len=ikey.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=ikey[i];packet<<temp;}
                        len=okey.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=okey[i];packet<<temp;}
                        len=kkey.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=kkey[i];packet<<temp;}

                        for(unsigned char i=0;i<8;i++){temp=p1.gimmick[i];packet<<temp;}
                        for(unsigned char i=0;i<5;i++){temp=p1.hurtframes[i];packet<<temp;}
                        temp=p1.hbframe;packet<<temp;temp=p1.act;packet<<temp;temp=p1.col;packet<<temp;temp=p1.frame;packet<<temp;
                        temp=p1.block;packet<<temp;temp=p1.hitstop;packet<<temp;temp=p1.hitstun;packet<<temp;temp=p1.blockstun;packet<<temp;
                        temp=p1.wins;packet<<temp;temp=p1.character;packet<<temp;temp=p1.buffer;packet<<temp;temp=p1.kdown;packet<<temp;
                        temp=p1.kdowned;packet<<temp;temp=p1.movewaitx;packet<<temp;temp=p1.movewaity;packet<<temp;temp=p1.movetype;packet<<temp;
                        temp=p1.landdelay;packet<<temp;temp=p1.hitstopped;packet<<temp;temp=p1.grabstate;packet<<temp;temp=p1.iframes;packet<<temp;
                        temp=p1.grabiframes;packet<<temp;temp=p1.hitcount;packet<<temp;

                        for(unsigned char i=0;i<64;i++){packet<<p1.cancel[i];}
                        packet<<p1.air<<p1.whiff<<p1.right<<p1.hit<<p1.slide<<p1.neutural<<p1.comboed<<p1.hitbefore<<p1.super;

                        //attackdata
                        temp=p1.attack.movetype;packet<<temp;temp=p1.attack.hitstun;packet<<temp;temp=p1.attack.blockstun;packet<<temp;
                        temp=p1.attack.kdown;packet<<temp;temp=p1.attack.hitwait;packet<<temp;
                        packet<<p1.attack.kback<<p1.attack.launch<<p1.attack.grab[0]<<p1.attack.grab[1]<<p1.attack.pushaway;
                        //projdata
                        len=p1.proj.size();packet<<len;
                        for(unsigned char i=0;i<len;i++){
                            packet<<p1.proj[i].x<<p1.proj[i].y<<p1.proj[i].movex<<p1.proj[i].movey<<
                            p1.proj[i].dmg<<p1.proj[i].kback<<p1.proj[i].mgain<<p1.proj[i].launch<<p1.proj[i].right<<p1.proj[i].hit;
                            temp=p1.proj[i].movetype;packet<<temp;temp=p1.proj[i].animloop;packet<<temp;
                            temp=p1.proj[i].looplen;packet<<temp;
                            for(unsigned char j=0;j<p1.proj[i].looplen;j++){temp=p1.proj[i].loopanim[j];packet<<temp;}
                            temp=p1.proj[i].frame;packet<<temp;temp=p1.proj[i].hitstop;packet<<temp;
                            temp=p1.proj[i].hitstun;packet<<temp;temp=p1.proj[i].blockstun;packet<<temp;
                            temp=p1.proj[i].hitcount;packet<<temp;temp=p1.proj[i].hitstopped;packet<<temp;
                            temp=p1.proj[i].knockdown;packet<<temp;temp=p1.proj[i].code;packet<<temp;
                            temp=p1.proj[i].existed;packet<<temp;
                            temp=p1.proj[i].endanim.size();packet<<temp;
                            for(unsigned char j=0;j<p1.proj[i].endanim.size();j++){temp=p1.proj[i].endanim[j];packet<<temp;}
                        }
                    }
                    else{
                        dir=p2input[0];U=p2input[1];I=p2input[2];O=p2input[3];K=p2input[4];
                        packet<<p2.x<<p2.y<<p2.jumpx<<p2.jumpy<<p2.kback<<p2.launch<<p2.hp<<p2.maxhp<<p2.dmg<<
                        p2.pushaway<<p2.grab[0]<<p2.grab[1]<<p2.meter<<p2.mgain<<onlineframe<<dir<<U<<I<<O<<K;

                        len=p2.animq.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p2.animq[i];packet<<temp;}
                        len=p2.idleanim.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p2.idleanim[i];packet<<temp;}
                        len=p2.atkfx.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p2.atkfx[i];packet<<temp;}
                        len=p2.hitboxanim.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=p2.hitboxanim[i];packet<<temp;}
                        len=dirkeys.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=dirkeys2[i];packet<<temp;}
                        len=ukey2.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=ukey2[i];packet<<temp;}
                        len=ikey2.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=ikey2[i];packet<<temp;}
                        len=okey2.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=okey2[i];packet<<temp;}
                        len=kkey2.size();packet<<len;for(unsigned char i=0;i<len;i++){temp=kkey2[i];packet<<temp;}

                        for(unsigned char i=0;i<8;i++){temp=p2.gimmick[i];packet<<temp;}
                        for(unsigned char i=0;i<5;i++){temp=p2.hurtframes[i];packet<<temp;}
                        temp=p2.hbframe;packet<<temp;temp=p2.act;packet<<temp;temp=p2.col;packet<<temp;temp=p2.frame;packet<<temp;
                        temp=p2.block;packet<<temp;temp=p2.hitstop;packet<<temp;temp=p2.hitstun;packet<<temp;temp=p2.blockstun;packet<<temp;
                        temp=p2.wins;packet<<temp;temp=p2.character;packet<<temp;temp=p2.buffer;packet<<temp;temp=p2.kdown;packet<<temp;
                        temp=p2.kdowned;packet<<temp;temp=p2.movewaitx;packet<<temp;temp=p2.movewaity;packet<<temp;temp=p2.movetype;packet<<temp;
                        temp=p2.landdelay;packet<<temp;temp=p2.hitstopped;packet<<temp;temp=p2.grabstate;packet<<temp;temp=p2.iframes;packet<<temp;
                        temp=p2.grabiframes;packet<<temp;temp=p2.hitcount;packet<<temp;

                        for(unsigned char i=0;i<64;i++){packet<<p2.cancel[i];}
                        packet<<p2.air<<p2.whiff<<p2.right<<p2.hit<<p2.slide<<p2.neutural<<p2.comboed<<p2.hitbefore<<p2.super;

                        //attackdata
                        temp=p2.attack.movetype;packet<<temp;temp=p2.attack.hitstun;packet<<temp;temp=p2.attack.blockstun;packet<<temp;
                        temp=p2.attack.kdown;packet<<temp;temp=p2.attack.hitwait;packet<<temp;
                        packet<<p2.attack.kback<<p2.attack.launch<<p2.attack.grab[0]<<p2.attack.grab[1]<<p2.attack.pushaway;
                        //projdata
                        len=p2.proj.size();packet<<len;
                        for(unsigned char i=0;i<len;i++){
                            packet<<p2.proj[i].x<<p2.proj[i].y<<p2.proj[i].movex<<p2.proj[i].movey<<
                            p2.proj[i].dmg<<p2.proj[i].kback<<p2.proj[i].mgain<<p2.proj[i].launch<<p2.proj[i].right<<p2.proj[i].hit;
                            temp=p2.proj[i].movetype;packet<<temp;temp=p2.proj[i].animloop;packet<<temp;
                            temp=p2.proj[i].looplen;packet<<temp;
                            for(unsigned char j=0;j<p2.proj[i].looplen;j++){temp=p2.proj[i].loopanim[j];packet<<temp;}
                            temp=p2.proj[i].frame;packet<<temp;temp=p2.proj[i].hitstop;packet<<temp;
                            temp=p2.proj[i].hitstun;packet<<temp;temp=p2.proj[i].blockstun;packet<<temp;
                            temp=p2.proj[i].hitcount;packet<<temp;temp=p2.proj[i].hitstopped;packet<<temp;
                            temp=p2.proj[i].knockdown;packet<<temp;temp=p2.proj[i].code;packet<<temp;
                            temp=p2.proj[i].existed;packet<<temp;
                            temp=p2.proj[i].endanim.size();packet<<temp;
                            for(unsigned char j=0;j<p2.proj[i].endanim.size();j++){temp=p2.proj[i].endanim[j];packet<<temp;}
                        }
                    }
                    if(socket.send(packet,ipvalue,port)!=sf::Socket::Status::Done){}
                    if(socket.receive(packet,ipvalue2,port)==sf::Socket::Status::Done){
                        player playertemp1=p1,playertemp2=p2;
                        //float xtemp=0;
                        if(p1control){
                            packet>>onlinecode>>playertemp2.x>>playertemp2.y>>playertemp2.jumpx>>playertemp2.jumpy>>
                            playertemp2.kback>>playertemp2.launch>>playertemp2.hp>>playertemp2.maxhp>>playertemp2.dmg>>
                            playertemp2.pushaway>>playertemp2.grab[0]>>playertemp2.grab[1]>>playertemp2.meter>>playertemp2.mgain>>
                            onlineframe>>dir>>U>>I>>O>>K;
                            p2input[0]=dir;p2input[1]=U;p2input[2]=I;p2input[3]=O;p2input[4]=K;

                            packet>>len;playertemp2.animq.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp2.animq.push_back(temp);}
                            packet>>len;playertemp2.idleanim.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp2.idleanim.push_back(temp);}
                            packet>>len;playertemp2.atkfx.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp2.atkfx.push_back(temp);}
                            packet>>len;playertemp2.hitboxanim.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp2.hitboxanim.push_back(temp);}
                            packet>>len;dironline2.clear();for(unsigned char i=0;i<len;i++){packet>>temp;dironline2.push_back(temp);}
                            packet>>len;uonline2.clear();for(unsigned char i=0;i<len;i++){packet>>temp;uonline2.push_back(temp);}
                            packet>>len;ionline2.clear();for(unsigned char i=0;i<len;i++){packet>>temp;ionline2.push_back(temp);}
                            packet>>len;oonline2.clear();for(unsigned char i=0;i<len;i++){packet>>temp;oonline2.push_back(temp);}
                            packet>>len;konline2.clear();for(unsigned char i=0;i<len;i++){packet>>temp;konline2.push_back(temp);}

                            for(unsigned char i=0;i<8;i++){packet>>temp;playertemp2.gimmick[i]=temp;}
                            for(unsigned char i=0;i<5;i++){packet>>temp;playertemp2.hurtframes[i]=temp;}
                            packet>>temp;playertemp2.hbframe=temp;packet>>temp;playertemp2.act=temp;
                            packet>>temp;playertemp2.col=temp;packet>>temp;playertemp2.frame=temp;
                            packet>>temp;playertemp2.block=temp;packet>>temp;playertemp2.hitstop=temp;
                            packet>>temp;playertemp2.hitstun=temp;packet>>temp;playertemp2.blockstun=temp;
                            packet>>temp;playertemp2.wins=temp;packet>>temp;playertemp2.character=temp;
                            packet>>temp;playertemp2.buffer=temp;packet>>temp;playertemp2.kdown=temp;
                            packet>>temp;playertemp2.kdowned=temp;packet>>temp;playertemp2.movewaitx=temp;
                            packet>>temp;playertemp2.movewaity=temp;packet>>temp;playertemp2.movetype=temp;
                            packet>>temp;playertemp2.landdelay=temp;packet>>temp;playertemp2.hitstopped=temp;
                            packet>>temp;playertemp2.grabstate=temp;packet>>temp;playertemp2.iframes=temp;
                            packet>>temp;playertemp2.grabiframes=temp;packet>>temp;playertemp2.hitcount=temp;

                            //attackdata
                            packet>>temp;playertemp2.attack.movetype=temp;
                            packet>>temp;playertemp2.attack.hitstun=temp;
                            packet>>temp;playertemp2.attack.blockstun=temp;
                            packet>>temp;playertemp2.attack.kdown=temp;
                            packet>>temp;playertemp2.attack.hitwait=temp;
                            packet>>playertemp2.attack.kback>>playertemp2.attack.launch>>playertemp2.attack.grab[0]>>playertemp2.attack.grab[1]>>playertemp2.attack.pushaway;
                            //projdata
                            
                            playertemp2.proj.clear();
                            packet>>len;
                            for(unsigned char i=0;i<len;i++){
                            projectile tempproj;
                            packet>>tempproj.x>>tempproj.y>>tempproj.movex>>tempproj.movey>>
                            tempproj.dmg>>tempproj.kback>>tempproj.mgain>>tempproj.launch>>tempproj.right>>tempproj.hit;
                            packet>>temp;tempproj.movetype=temp;packet>>temp;tempproj.animloop=temp;
                            packet>>temp;tempproj.looplen=temp;
                            for(unsigned char j=0;j<tempproj.looplen;j++){packet>>temp;tempproj.loopanim[j]=temp;}
                            packet>>temp;tempproj.frame=temp;packet>>temp;tempproj.hitstop=temp;
                            packet>>temp;tempproj.hitstun=temp;packet>>temp;tempproj.blockstun=temp;
                            packet>>temp;tempproj.hitcount=temp;packet>>temp;tempproj.hitstopped=temp;
                            packet>>temp;tempproj.knockdown=temp;packet>>temp;tempproj.code=temp;
                            packet>>temp;tempproj.existed=temp;
                            std::int16_t templen;
                            packet>>templen;
                            for(unsigned char j=0;j<templen;j++){packet>>temp;tempproj.endanim[j]=temp;}
                            playertemp2.proj.push_back(tempproj);
                            }
                        }
                        else{
                            packet>>onlinecode>>playertemp1.x>>playertemp1.y>>playertemp1.jumpx>>playertemp1.jumpy>>
                            playertemp1.kback>>playertemp1.launch>>playertemp1.hp>>playertemp1.maxhp>>playertemp1.dmg>>
                            playertemp1.pushaway>>playertemp1.grab[0]>>playertemp1.grab[1]>>playertemp1.meter>>playertemp1.mgain>>
                            onlineframe>>dir>>U>>I>>O>>K;
                            p1input[0]=dir;p1input[1]=U;p1input[2]=I;p1input[3]=O;p1input[4]=K;

                            packet>>len;playertemp1.animq.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp1.animq.push_back(temp);}
                            packet>>len;playertemp1.idleanim.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp1.idleanim.push_back(temp);}
                            packet>>len;playertemp1.atkfx.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp1.atkfx.push_back(temp);}
                            packet>>len;playertemp1.hitboxanim.clear();for(unsigned char i=0;i<len;i++){packet>>temp;playertemp1.hitboxanim.push_back(temp);}
                            packet>>len;dironline.clear();for(unsigned char i=0;i<len;i++){packet>>temp;dironline.push_back(temp);}
                            packet>>len;uonline.clear();for(unsigned char i=0;i<len;i++){packet>>temp;uonline.push_back(temp);}
                            packet>>len;ionline.clear();for(unsigned char i=0;i<len;i++){packet>>temp;ionline.push_back(temp);}
                            packet>>len;oonline.clear();for(unsigned char i=0;i<len;i++){packet>>temp;oonline.push_back(temp);}
                            packet>>len;konline.clear();for(unsigned char i=0;i<len;i++){packet>>temp;konline.push_back(temp);}

                            for(unsigned char i=0;i<8;i++){packet>>temp;playertemp1.gimmick[i]=temp;}
                            for(unsigned char i=0;i<5;i++){packet>>temp;playertemp1.hurtframes[i]=temp;}
                            packet>>temp;playertemp1.hbframe=temp;packet>>temp;playertemp1.act=temp;
                            packet>>temp;playertemp1.col=temp;packet>>temp;playertemp1.frame=temp;
                            packet>>temp;playertemp1.block=temp;packet>>temp;playertemp1.hitstop=temp;
                            packet>>temp;playertemp1.hitstun=temp;packet>>temp;playertemp1.blockstun=temp;
                            packet>>temp;playertemp1.wins=temp;packet>>temp;playertemp1.character=temp;
                            packet>>temp;playertemp1.buffer=temp;packet>>temp;playertemp1.kdown=temp;
                            packet>>temp;playertemp1.kdowned=temp;packet>>temp;playertemp1.movewaitx=temp;
                            packet>>temp;playertemp1.movewaity=temp;packet>>temp;playertemp1.movetype=temp;
                            packet>>temp;playertemp1.landdelay=temp;packet>>temp;playertemp1.hitstopped=temp;
                            packet>>temp;playertemp1.grabstate=temp;packet>>temp;playertemp1.iframes=temp;
                            packet>>temp;playertemp1.grabiframes=temp;packet>>temp;playertemp1.hitcount=temp;

                            //attackdata
                            packet>>temp;playertemp1.attack.movetype=temp;
                            packet>>temp;playertemp1.attack.hitstun=temp;
                            packet>>temp;playertemp1.attack.blockstun=temp;
                            packet>>temp;playertemp1.attack.kdown=temp;
                            packet>>temp;playertemp1.attack.hitwait=temp;
                            packet>>playertemp1.attack.kback>>playertemp1.attack.launch>>playertemp1.attack.grab[0]>>playertemp1.attack.grab[1]>>playertemp1.attack.pushaway;
                            //projdata
                            
                            playertemp1.proj.clear();
                            packet>>len;
                            for(unsigned char i=0;i<len;i++){
                            projectile tempproj;
                            packet>>tempproj.x>>tempproj.y>>tempproj.movex>>tempproj.movey>>
                            tempproj.dmg>>tempproj.kback>>tempproj.mgain>>tempproj.launch>>tempproj.right>>tempproj.hit;
                            packet>>temp;tempproj.movetype=temp;packet>>temp;tempproj.animloop=temp;
                            packet>>temp;tempproj.looplen=temp;
                            for(unsigned char j=0;j<tempproj.looplen;j++){packet>>temp;tempproj.loopanim[j]=temp;}
                            packet>>temp;tempproj.frame=temp;packet>>temp;tempproj.hitstop=temp;
                            packet>>temp;tempproj.hitstun=temp;packet>>temp;tempproj.blockstun=temp;
                            packet>>temp;tempproj.hitcount=temp;packet>>temp;tempproj.hitstopped=temp;
                            packet>>temp;tempproj.knockdown=temp;packet>>temp;tempproj.code=temp;
                            packet>>temp;tempproj.existed=temp;
                            std::int16_t templen;
                            packet>>templen;
                            for(unsigned char j=0;j<templen;j++){packet>>temp;tempproj.endanim[j]=temp;}
                            playertemp1.proj.push_back(tempproj);
                            }
                        }
                        char onlineinput1[5]={},onlineinput2[5]={};
                        
                        /*
                        if(p1control){
                            playertemp1=precord[roundframecount-onlineframe];
                            onlineinput2[0]=char(dir);onlineinput2[1]=char(U);onlineinput2[2]=char(I);onlineinput2[3]=char(O);onlineinput2[4]=char(K);
                            dironline=dirrecord[roundframecount-onlineframe];
                            uonline=urecord[roundframecount-onlineframe];
                            ionline=irecord[roundframecount-onlineframe];
                            oonline=orecord[roundframecount-onlineframe];
                            konline=krecord[roundframecount-onlineframe];
                        }
                        else{
                            playertemp2=precord[roundframecount-onlineframe];
                            onlineinput1[0]=char(dir);onlineinput1[1]=char(U);onlineinput1[2]=char(I);onlineinput1[3]=char(O);onlineinput1[4]=char(K);
                            dironline2=dirrecord[roundframecount-onlineframe];
                            uonline2=urecord[roundframecount-onlineframe];
                            ionline2=irecord[roundframecount-onlineframe];
                            oonline2=orecord[roundframecount-onlineframe];
                            konline2=krecord[roundframecount-onlineframe];
                        }
                        for(short i=0;i<=roundframecount-onlineframe;i++){
                            if(p1control){
                                onlineinput1[0]=dirkeys[i];
                                onlineinput1[1]=ukey[i];onlineinput1[2]=ikey[i];
                                onlineinput1[3]=okey[i];onlineinput1[4]=kkey[i];
                            }
                            else{
                                onlineinput2[0]=dirkeys2[i];
                                onlineinput2[1]=ukey2[i];onlineinput2[2]=ikey2[i];
                                onlineinput2[3]=okey2[i];onlineinput2[4]=kkey2[i];
                            }

                            dironline.push_front(onlineinput1[0]);uonline.push_front(onlineinput1[1]);
                            ionline.push_front(onlineinput1[2]);oonline.push_front(onlineinput1[3]);konline.push_front(onlineinput1[4]);
                            if(dironline.size()>20)dironline.pop_back();if(uonline.size()>20)uonline.pop_back();
                            if(ionline.size()>20)ionline.pop_back();if(oonline.size()>20)oonline.pop_back();if(konline.size()>20)konline.pop_back();

                            dironline2.push_front(onlineinput2[0]);uonline2.push_front(onlineinput2[1]);
                            ionline2.push_front(onlineinput2[2]);oonline2.push_front(onlineinput2[3]);konline2.push_front(onlineinput2[4]);
                            if(dironline2.size()>20)dironline2.pop_back();if(uonline2.size()>20)uonline2.pop_back();
                            if(ionline2.size()>20)ionline2.pop_back();if(oonline2.size()>20)oonline2.pop_back();if(konline2.size()>20)konline2.pop_back();
                            
                            //if(roundwait<=0)break;else if(p1.hp<=0||p2.hp<=0)roundwait--;
                            matchcode(&playertemp1,&playertemp2,dialogue,onlineinput1,onlineinput2,0,&bgx,&framedata,overlap,overlap2);
                        }
                        */
                        p1=playertemp1;
                        p2=playertemp2;
                    }
                }

                if(p1.hp>0&&p2.hp<=0)p1.wins++;
                else if(p1.hp<=0&&p2.hp>0)p2.wins++;
                dialogue.erase();
                effectslist.clear();
                menuselect=0;combo=0;roundframecount=0;comboscaling=100.0;
                p1.animq.clear();p1.idleanim.clear();p1.atkfx.clear();p1.hitboxanim.clear();p1.proj.clear();
                p1.air=false;p1.buffer=0;p1.act=0;p1.kdowned=0;p1.hit=false;
                p2.animq.clear();p2.idleanim.clear();p2.atkfx.clear();p2.hitboxanim.clear();p2.proj.clear();
                p2.air=false;p2.buffer=0;p2.act=0;p2.kdowned=0;p2.hit=false;
                dirkeys.clear();ukey.clear();ikey.clear();okey.clear();kkey.clear();
                dirkeys2.clear();ukey2.clear();ikey2.clear();okey2.clear();kkey2.clear();
                }
            
            }
            gamequit=false;
            menus.setmenu(6,144,120,0,16,0);
            socket.unbind();
        }
        else{//training

        menuconfirm2='0';
        characterselect charselect;
        if (!charselect.load("assets/images/charactericon.png")){}
        charselect.setcharselect(4,2,32,144);
        short menux=0,menuy=0,menux2=3,menuy2=0;
        bool p1check=false,p2check=false;
        while (window.isOpen()&&!gamequit){//characterselect
            windowset(window,&gamequit);

            if(!p1check){
            keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
            keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
            keypresscheck(leftkey1,&menuleft);keypresscheck(rightkey1,&menuright);
            keypresscheck(heavykey1,&colorkey);
            }
            else{
            keypresscheck(lightkey1,&menuconfirm2);keypresscheck(mediumkey1,&menucancel2);
            keypresscheck(upkey1,&menuup2);keypresscheck(downkey1,&menudown2);
            keypresscheck(leftkey1,&menuleft2);keypresscheck(rightkey1,&menuright2);
            keypresscheck(heavykey1,&colorkey2);
            }
            

            if(!p1check){
            if(menuright=='2'&&menuleft!='2'){menux++;if(menux>3)menux=0;}if(menuright!='2'&&menuleft=='2'){menux--;if(menux<0)menux=3;}
            if(menudown=='2'&&menuup!='2'){menuy++;if(menuy>1)menuy=0;}if(menudown!='2'&&menuup=='2'){menuy--;if(menuy<0)menuy=1;}
            }
            if(!p2check){
            if(menuright2=='2'&&menuleft2!='2'){menux2++;if(menux2>3)menux2=0;}if(menuright2!='2'&&menuleft2=='2'){menux2--;if(menux2<0)menux2=3;}
            if(menudown2=='2'&&menuup2!='2'){menuy2++;if(menuy2>1)menuy2=0;}if(menudown2!='2'&&menuup2=='2'){menuy2--;if(menuy2<0)menuy2=1;}
            }
            if(menuconfirm=='2'){p1check=true;menuconfirm='1';menuconfirm2='1';}
            if(menuconfirm2=='2')p2check=true;
            if(menucancel=='2'){gamequit=true;break;}
            if(menucancel2=='2'){p1check=false;menucancel='1';menucancel2='1';}
            if(p1check&&p2check)break;
            charselect.setselect(4,2,menux,menuy,menux2,menuy2);

            if(colorkey=='2'){
                    if(p1color>8)p1color=0;
                    else p1color++;
                    if(p1color==p2color){p1color++;if(p1color>8)p1color=0;}
            }
            if(colorkey2=='2'){
                    if(p2color>8)p2color=0;
                    else p2color++;
                    if(p1color==p2color){p2color++;if(p2color>8)p2color=0;}
            }

            if(p1color==p2color&&menux==menux2&&menuy==menuy2){p2color++;if(p2color>8)p2color=0;}

            sf::RectangleShape rect({256.f, 32.f}),rect2({256.f, 112.f}),crect1({32.f, 32.f}),crect2({32.f, 32.f}),crect3({32.f, 32.f}),crect4({32.f, 32.f}),crect5({32.f, 32.f}),crect6({32.f, 32.f});
            rect.setFillColor(sf::Color(85, 85, 85));rect2.setFillColor(sf::Color(85, 85, 85));
            crect1.setFillColor(CGAcolor(colorpalettes,p1color,0));
            crect2.setFillColor(CGAcolor(colorpalettes,p1color,1));
            crect3.setFillColor(CGAcolor(colorpalettes,p1color,2));
            crect4.setFillColor(CGAcolor(colorpalettes,p2color,0));
            crect5.setFillColor(CGAcolor(colorpalettes,p2color,1));
            crect6.setFillColor(CGAcolor(colorpalettes,p2color,2));
            rect2.setPosition({0,128});
            crect1.setPosition({16,0});crect2.setPosition({48,0});crect3.setPosition({80,0});
            crect4.setPosition({144,0});crect5.setPosition({176,0});crect6.setPosition({208,0});

            sf::Texture bgtexture;
            if (!bgtexture.loadFromFile("assets/images/stage1.png")){}
            sf::Sprite bg(bgtexture);
            bg.setPosition({-125.f,0.f});

            window.clear();
            renderTexture.clear();
            renderTexture.draw(bg);renderTexture.draw(rect);
            renderTexture.draw(rect2);renderTexture.draw(charselect);
            renderTexture.draw(crect1);renderTexture.draw(crect2);renderTexture.draw(crect3);
            renderTexture.draw(crect4);renderTexture.draw(crect5);renderTexture.draw(crect6);
            renderTexture.display();
            const sf::Texture& texture = renderTexture.getTexture();
            sf::Sprite rt(texture);
            window.draw(rt);
            window.display();
        }
        
        if(!gamequit){
            short rounds=2,matchintro=120;

            menus.setmenu(6,92,72,0,16,1);
            player p1,p2;
            p1.color=p1color;p2.color=p2color;p1.meter=1000.0;p2.meter=1000.0;
            p1.character=menux+menuy*4;p2.character=menux2+menuy2*4;
            superflash sf;healthbar hb;meterbar mb;
            timeui time;time.create();comboui cui;inputlist p1ilist,p2ilist;
            sf::Texture bgtexture,hutexture,p1texture,p2texture,metertexture,matchintrotexture,matchintrotexture2;
            if(!p1ilist.load("assets/images/inputicon.png")||!p2ilist.load("assets/images/inputicon.png")){window.close();gamequit=true;}
            if(!time.load("assets/images/time_ui.png")||!cui.load("assets/images/combo_ui.png")||!metertexture.loadFromFile("assets/images/meter_ui.png")){window.close();gamequit=true;}
            if(!bgtexture.loadFromFile("assets/images/stage1.png")||!hutexture.loadFromFile("assets/images/health_ui.png")){window.close();gamequit=true;}
            if(!p1texture.loadFromFile("assets/images/char"+std::to_string(p1.character)+"_sprites.png")||!p2texture.loadFromFile("assets/images/char"+std::to_string(p2.character)+"_sprites.png")){window.close();gamequit=true;}
            if(!matchintrotexture.loadFromFile("assets/images/ENGAGE.png")){window.close();gamequit=true;}
            if(!matchintrotexture2.loadFromFile("assets/images/READY OR NOT.png")){window.close();gamequit=true;}
            charactergraphics p1graphics,p2graphics,p1shadow,p2shadow;textbox tbox;

            p1graphics.load(p1texture,false);p2graphics.load(p2texture,false);
            p1shadow.load(p1texture,true);p2shadow.load(p2texture,true);
            sf::Sprite background(bgtexture),healthui(hutexture),meterui(metertexture),introsprite(matchintrotexture2);
            sf::Text combotext(font),dtext(font),frametext(font);
            combotext.setCharacterSize(32);combotext.setFillColor(sf::Color::Black);
            dtext.setCharacterSize(16);dtext.setFillColor(sf::Color::White);
            frametext.setCharacterSize(16);frametext.setFillColor(sf::Color::White);
            std::deque<char>p1keylist,p2keylist;short dialoguecnt=0;

            p1.maxhp=950.0;p2.maxhp=950.0;
            if(p1.character==2){p1.maxhp=900.0;p1.hurtframes[0]=15;p1.hurtframes[3]=17;p1.hurtframes[5]=87;p1.hurtframes[6]=88;p1.hurtframes[7]=89;p1.hurtframes[8]=90;}
            if(p2.character==2){p2.maxhp=900.0;p2.hurtframes[0]=15;p2.hurtframes[3]=17;p2.hurtframes[5]=87;p2.hurtframes[6]=88;p2.hurtframes[7]=89;p2.hurtframes[8]=90;}
            if(menuselect==3){//training
                if(!music.openFromFile("assets/music/practice mode.wav")){window.close();gamequit=true;}
                music.play();
                while(p1.wins<rounds&&p2.wins<rounds&&!gamequit){
                float overlap[2],overlap2[2];
                bgx=0;
                    p1.x=100.0;p1.y=176.0;p1.hp=p1.maxhp;p2.x=156.0;p2.y=176.0;p2.hp=p2.maxhp;

                    for(unsigned char i=0;i<8;i++){p1.gimmick[i]=0;p2.gimmick[i]=0;}
                    
                short superstop=0,roundwait=90,framedata=0;
                bool seeboxes=false,F2key=false,F3key=false,pause=false,Enterkey=false,nextframe=false,backslash=false,playertop=false,keylistshow=false,framedatashow=false;
                    p1.right=true;
                    p2.right=false;



                while (window.isOpen()&&!gamequit){
                    windowset(window,&gamequit);

                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::F2)){if(!F2key){F2key=true;if(framedatashow)framedatashow=false;else framedatashow=true;}}else F2key=false;
                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::F3)){if(!F3key){F3key=true;if(flash)flash=false;else flash=true;}}else F3key=false;
                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Enter)){if(!Enterkey){menuselect=0;Enterkey=true;if(pause)pause=false;else pause=true;}}else Enterkey=false;
                    if(screenfocused&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Backslash)){if(backslash==false){backslash=true;nextframe=true;}}else backslash=false;

                    inputcode(p1input,upkey1,leftkey1,downkey1,rightkey1,lightkey1,mediumkey1,heavykey1,specialkey1,grabkey1,p1.x,p2.x);
                    inputcode(p2input,upkey2,leftkey2,downkey2,rightkey2,lightkey2,mediumkey2,heavykey2,specialkey2,grabkey2,p2.x,p1.x);

                    if((!pause||(pause&&nextframe))){//main match code stuff
                        dirkeys.push_front(p1input[0]);ukey.push_front(p1input[1]);
                        ikey.push_front(p1input[2]);okey.push_front(p1input[3]);kkey.push_front(p1input[4]);
                        if(dirkeys.size()>20)dirkeys.pop_back();if(ukey.size()>20)ukey.pop_back();
                        if(ikey.size()>20)ikey.pop_back();if(okey.size()>20)okey.pop_back();if(kkey.size()>20)kkey.pop_back();

                        dirkeys2.push_front(p2input[0]);ukey2.push_front(p2input[1]);
                        ikey2.push_front(p2input[2]);okey2.push_front(p2input[3]);kkey2.push_front(p2input[4]);
                        if(dirkeys2.size()>20)dirkeys2.pop_back();if(ukey2.size()>20)ukey2.pop_back();
                        if(ikey2.size()>20)ikey2.pop_back();if(okey2.size()>20)okey2.pop_back();if(kkey2.size()>20)kkey2.pop_back();

                        nextframe=false;
                        if(roundwait<=0)break;else if(p1.hp<=0||p2.hp<=0)roundwait--;
                        matchcode(&p1,&p2,dialogue,p1input,p2input,&superstop,&framedata,overlap,overlap2,matchintro);

                        if(!sound.empty()){
                            for(int i=0;i<sound.size();i++)if(sound[i].getStatus()==sf::SoundSource::Status::Stopped)sound.erase(sound.begin()+i);  
                        }
                        if(!soundfxlist.empty()){//sound effects
                            if(soundfxlist[0]>0){
                                sf::Sound temp(soundfx[soundfxlist[0]-1]);
                                //sound.setBuffer(soundfx[soundfxlist[0]-1]);
                                temp.setPosition({sfxx[0],0.f,sfxx[0]<0.f?-sfxx[0]-1.f:sfxx[0]-1.f});
                                sound.push_front(temp);
                                sound[0].play();
                            }
                            sfxx.pop_front();
                            soundfxlist.pop_front();
                        }
                        if(!hitsfxlist.empty()){//hit sound effects
                            if(hitsfxlist[0]>0){
                                hitsound.setBuffer(soundfx[hitsfxlist[0]-1]);
                                hitsound.setPosition({hsfxx[0],0.f,hsfxx[0]<0.f?-hsfxx[0]-1.f:hsfxx[0]-1.f});
                                hitsound.play();
                            }
                            hsfxx.pop_front();
                            hitsfxlist.pop_front();
                        }
                        if(!voicesfxlist.empty()){//voice effects
                            if(voicesfxlist[0]>0){
                                voice.setBuffer(soundfx[voicesfxlist[0]-1]);
                                voice.setPosition({vsfxx[0],0.f,vsfxx[0]<0.f?-vsfxx[0]-1.f:vsfxx[0]-1.f});
                                voice.play();
                            }
                            vsfxx.pop_front();
                            voicesfxlist.pop_front();
                        }

                        if(combo==0&&p1.hp<p1.maxhp)p1.hp+=10;if(combo==0&&p2.hp<p2.maxhp)p2.hp+=10;
                        //if(combo==0&&p1.meter<1000)p1.meter+=10;
                        //if(combo==0&&p2.meter<1000)p2.meter+=10;

                        if(superstop>0)superstop--;

                        for(short i=0;i<effectslist.size();i++){effectslist[i].create();if(effectslist[i].frame>effectslist[i].len)effectslist.erase(effectslist.begin()+i);}
                    }

                    if(!pause){//trainingkeylist
                        char keytemp=dirkeys[1],keytemp2=p1input[0];
                        if(!p1.right){
                            if(keytemp=='7')keytemp='9';
                            else if(keytemp=='9')keytemp='7';
                            else if(keytemp=='4')keytemp='6';
                            else if(keytemp=='6')keytemp='4';
                            else if(keytemp=='3')keytemp='1';
                            else if(keytemp=='1')keytemp='3';
                            if(keytemp2=='7')keytemp2='9';
                            else if(keytemp2=='9')keytemp2='7';
                            else if(keytemp2=='4')keytemp2='6';
                            else if(keytemp2=='6')keytemp2='4';
                            else if(keytemp2=='3')keytemp2='1';
                            else if(keytemp2=='1')keytemp2='3';
                        }

                        if(keytemp2!=keytemp&&keytemp2!='5')p1keylist.push_front(keytemp2);else p1keylist.push_front('0');
                        if(p1input[1]=='2')p1keylist.push_front('u');else p1keylist.push_front('0');
                        if(p1input[2]=='2')p1keylist.push_front('i');else p1keylist.push_front('0');
                        if(p1input[3]=='2')p1keylist.push_front('o');else p1keylist.push_front('0');
                        if(p1input[4]=='2')p1keylist.push_front('k');else p1keylist.push_front('0');
                        if(p1keylist[0]=='0'&&p1keylist[1]=='0'&&p1keylist[2]=='0'&&p1keylist[3]=='0'&&p1keylist[4]=='0')for(short i=0;i<5;i++)p1keylist.pop_front();
                        if(p1keylist.size()>40)for(short i=0;i<5;i++)p1keylist.pop_back();


                        keytemp=dirkeys2[1],keytemp2=p2input[0];
                        if(!p2.right){
                            if(keytemp=='7')keytemp='9';
                            else if(keytemp=='9')keytemp='7';
                            else if(keytemp=='4')keytemp='6';
                            else if(keytemp=='6')keytemp='4';
                            else if(keytemp=='3')keytemp='1';
                            else if(keytemp=='1')keytemp='3';
                            if(keytemp2=='7')keytemp2='9';
                            else if(keytemp2=='9')keytemp2='7';
                            else if(keytemp2=='4')keytemp2='6';
                            else if(keytemp2=='6')keytemp2='4';
                            else if(keytemp2=='3')keytemp2='1';
                            else if(keytemp2=='1')keytemp2='3';
                        }

                        if(keytemp2!=keytemp&&keytemp2!='5')p2keylist.push_front(keytemp2);else p2keylist.push_front('0');
                        if(p2input[1]=='2')p2keylist.push_front('u');else p2keylist.push_front('0');
                        if(p2input[2]=='2')p2keylist.push_front('i');else p2keylist.push_front('0');
                        if(p2input[3]=='2')p2keylist.push_front('o');else p2keylist.push_front('0');
                        if(p2input[4]=='2')p2keylist.push_front('k');else p2keylist.push_front('0');
                        if(p2keylist[0]=='0'&&p2keylist[1]=='0'&&p2keylist[2]=='0'&&p2keylist[3]=='0'&&p2keylist[4]=='0')for(short i=0;i<5;i++)p2keylist.pop_front();
                        if(p2keylist.size()>40)for(short i=0;i<5;i++)p2keylist.pop_back();
                    }

                    menus.setcolor(6,false,menuselect);
                    if(pause){//pause menu
                        keypresscheck(lightkey1,&menuconfirm);keypresscheck(mediumkey1,&menucancel);
                        keypresscheck(upkey1,&menuup);keypresscheck(downkey1,&menudown);
                        if(menuup=='2'){menuselect--;if(menuselect<0)menuselect=5;}
                        else if(menudown=='2'){menuselect++;if(menuselect>5)menuselect=0;}
                        if((menuconfirm=='2'&&menuselect==0)||menucancel=='2')pause=false;
                        else if(menuconfirm=='2'&&menuselect==1)if(seeboxes)seeboxes=false;else seeboxes=true;
                        else if(menuconfirm=='2'&&menuselect==2)if(keylistshow)keylistshow=false;else keylistshow=true;
                        else if(menuconfirm=='2'&&menuselect==5)gamequit=true;
                    }
                    if(!dialogue.empty()){//dialogue stuff
                        char temp='$',temp1='1';
                        if(dialogue[0]==temp1)tbox.create(p1.x+bgx+8,p1.y-16);
                        else tbox.create(p2.x+bgx+8,p2.y-16);
                        dtext.setString(dialogue.substr(1,dialoguecnt));
                        if(!pause||nextframe){
                            if(dialogue[dialoguecnt+1]==temp){
                                if(p1input[1]=='2'||p2input[1]=='2'||p1input[2]!='0'||p2input[2]!='0'){dialogue.erase(0,dialoguecnt+2);dialoguecnt=0;}
                            }
                            else{
                                if(p1input[2]!='0'||p2input[2]!='0')while(dialogue[dialoguecnt+1]!=temp)dialoguecnt++;
                                else dialoguecnt++;
                            }
                        }
                        dtext.setPosition({16,8});
                    }

                    drawstuff(window,renderTexture,&p1,&p2,sf,hb,mb,time,cui,p1ilist,p2ilist,p1graphics,p2graphics,p1shadow,p2shadow,menus,shader,tbox,combotext,
                              dtext,frametext,p1keylist,p2keylist,framedata,dialogue,superstop,pause,seeboxes,keylistshow,framedatashow,&playertop,
                              background,healthui,meterui,p1texture,p2texture,pausedark,rounds,introsprite,matchintrotexture,&matchintro);
                    window.display();

                }
                dialogue.erase();
                effectslist.clear();
                menuselect=0;combo=0;roundframecount=0;comboscaling=100.0;
                p1.animq.clear();p1.idleanim.clear();p1.atkfx.clear();p1.hitboxanim.clear();p1.proj.clear();
                p1.air=false;p1.buffer=0;p1.act=0;p1.kdowned=0;p1.hit=false;
                p2.animq.clear();p2.idleanim.clear();p2.atkfx.clear();p2.hitboxanim.clear();p2.proj.clear();
                p2.air=false;p2.buffer=0;p2.act=0;p2.kdowned=0;p2.hit=false;
                dirkeys.clear();ukey.clear();ikey.clear();okey.clear();kkey.clear();
                dirkeys2.clear();ukey2.clear();ikey2.clear();okey2.clear();kkey2.clear();
                }
                music.stop();
            }
        }
        gamequit=false;
        menus.setmenu(6,144,120,0,16,0);
        }

        }
    }
	return 0;
}
